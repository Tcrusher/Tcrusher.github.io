[{"title":"Linux shell常用命令","url":"%2F2020%2F02%2F09%2FLinux-shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","content":"![](/uploads/linux.jpg)\n\n<!-- more -->\n\n##\n\n##\n\n##\n\n<hr />\n\n","tags":["shell命令"],"categories":["shell命令"]},{"title":"宝塔连接服务器","url":"%2F2020%2F02%2F04%2F%E5%AE%9D%E5%A1%94%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html","content":"![](/uploads/cmg.jpg)\n\n<!-- more -->\n\n# 宝塔连接服务器\n\n宝塔,让运维简单高效。面板支持Linux与Windows系统。一键配置:LAMP/LNMP、网站、数据库、FTP、SSL,通过Web端轻松管理服务器。下面以阿里云为例\n\n##  安装宝塔面板\n\n在阿里云租赁服务器，使用xshell连接服务器（或者直接使用ssh连接。。。）。\n\n宝塔面板：[<https://www.bt.cn/>](https://www.bt.cn/)\n\n安装连接：[<https://www.bt.cn/bbs/thread-19376-1-1.html>](https://www.bt.cn/bbs/thread-19376-1-1.html)\n\n对应自己的服务器，选择相应的命令，我这里选用的是：\n\n```shell\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\n\n执行，等待几分钟安装成功。\n\n![image1.png](https://i.loli.net/2020/02/04/G6d2Z8jnV4kvwuW.png)\n\n## 连接宝塔面板\n\n安装成功后有Bt-Panel、username、password。打开浏览器输入Bt-Panel后的地址，输入用户名和密码登录。\n\n## 失败问题\n\n服务器的安全组没有设置宝塔的端口号8888\n\n![image2.png](https://i.loli.net/2020/02/04/3QTCGr6bwIgiq1f.png)\n\n\n\n点击快速创建规则\n\n填写规则信息，端口填 8888/8888，授权对象 0.0.0.0/0代表所有对象都可以使用\n\n![image3.png](https://i.loli.net/2020/02/04/hLCViwdupyaAvjX.png)\n\n保存，再次连接就OK了\n\n\n\n<hr />","tags":["宝塔面板"],"categories":["Linux"]},{"title":"Vue.js基础","url":"%2F2020%2F02%2F03%2FVue-js%E5%9F%BA%E7%A1%80.html","content":"![](/uploads/vue.png)\n\n<!-- more -->\n\n# 基础\n\n官方文档：[<https://cn.vuejs.org/>](https://cn.vuejs.org/)\n\n[<https://vuejs.bootcss.com/guide/>](https://vuejs.bootcss.com/guide/)\n\n## 介绍\n\n### Vue.js 是什么\n\nVue (读音 /vjuː/，类似于 **view**) 是一套用于构建用户界面的**渐进式框架**。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n### 安装\n\n直接引入Vue：\n\n```html\n<!-- 开发环境版本，包含了有帮助的命令行警告 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n```\n\n或者：\n\n```html\n<!-- 生产环境版本，优化了尺寸和速度 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n```\n\n也可以下载vue文件，将vue.js文件引入\n\n```html\n<script src=\"vue.js\"></script>\n```\n\n- 使用npm\n\n  - 安装node.js\n\n  下载：[<https://nodejs.org/en/>](https://nodejs.org/en/)\n\n  按照提示一步一步安装，这里就不赘述了。\n\n  ```shell\n  $  npm  install  -g  cnpm  --registry=https://registry.npm.taobao.org\n  ```\n\n  可以使用cnpm 命令来安装模块了\n\n  - 项目初始化\n\n  安装`vue-cli`\n\n  ```shell\n  cnpm install vue-cli -g  //全局安装\n  vue list //是否安装成功\n  ```\n\n  创建项目\n\n  ```shell\n  vue init webpack  ”项目名称“\n  ```\n\n  安装依赖\n\n  ```shell\n  cnpm install\n  ```\n\n  运行项目\n\n  ```shell\n  cnpm run dev\n  ```\n\n  默认是在8080端口启动，当然也是可以更改的\n\n  [http://localhost:8080/](http://localhost:8080/)\n\n  这样就成功了，开始学习旅程。。。\n\n### HelloWorld\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <script src=\"../lib/vue.js\"></script>\n    <title>hello</title>\n\n</head>\n\n<body>\n    <div id=\"app\">\n        {{ message }}\n    </div>\n    <script>\n        var app = new Vue({ // 创建Vue实例\n            el: '#app', // 表示控制的区域\n            data: { // 存放el要用到的数据\n                message: 'Hello Vue!'\n            }\n            //methods://实例方法{}\n        })\n    </script>\n</body>\n\n</html>\n```\n\n### 条件与循环\n\n```html\n<div id=\"app-3\">\n     <p v-if=\"flag\">可以看到我吗？</p>\n</div>\n```\n\n指令带有前缀 `v-`，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。`v-if`表示条件选择\n\nv-if 的特点：每次都会重新删除或创建元素\nv-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 \n\nv-if 有较高的切换性能消耗\nv-show 有较高的初始渲染消耗\n\n如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show\n如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if\n\n\n\n`v-for` 指令可以绑定数组的数据来渲染一个项目列表：\n\n```html\n<div id=\"app-4\">\n    <ol>\n        <li v-for=\"todo in todos\">\n            {{ todo.text }}\n        </li>\n    </ol>\n</div>\n```\n\n```javascript\n var app4 = new Vue({\n     el: '#app-4',\n     data: {\n         todos: [\n             { text: '学习 JavaScript' },\n             { text: '学习 Vue' },\n             { text: '整个牛项目' }\n         ]\n     }\n })\n```\n\n### v-clock、v-text、v-html\n\n- v-clock\n\n使用`v-cloak`可以解决插值表达式闪烁的问题\n\n```html\n<!-- html -->\n<p v-cloak>{{ message }}</p>\n\n<!-- css -->\n<style>\n    [v-cloak] {\n        display: none;\n    }\n</style>\n\n<!-- js -->\n<!-- 与上面类似 -->\n```\n\n- v-text\n\n`v-text`是没有闪烁问题的\n\n`v-text`会覆盖元素中原本的内容，但是`插值表达式`只会替换自己的这个占位符，不会把 整个元素的内容清空，`渲染的字符串，不会渲染HTML组件`\n\n```html\n<h2 v-text=\"msg\">这是原来内容</h2>\n```\n\n- v-html\n\n与`v-text`类似，会渲染`HTML`组件\n\n### v-bind\n\n1. 直接使用指令`v-bind`\n2. 使用简化指令`:`\n3. 在绑定的时候，拼接绑定内容：`:title=\"btnTitle + ', 这是追加的内容'\"`\n\nv-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定\n\n### v-model\n\n使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定\n注意： v-model 只能运用在 表单元素中\n\n### vue中的样式\n\n- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定\n\n```html\n:class=\"['样式1', '样式2']\"\n```\n\n- 在数组中使用三元表达式\n\n```html\n:class=\"['样式', '。。。', flag?'':'']\" <!-- 三元式 -->\n```\n\n- 在数组中使用 对象来代替三元表达式，提高代码的可读性\n\n```html\n:class=\"['。。。', '。。。', {'。。。':flag} ]\"\n```\n\n- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符\n\n```html\n:class=\"classObj\"\n```\n\n- 对象就是无序键值对的集合 \n\n```html\n:style=\"styleObj1\"\n```\n\n`vue：`\n\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        styleObj1: { color: 'red', 'font-weight': 200 },\n        styleObj2: { 'font-style': 'italic' }\n    },\n    methods: {}\n});\n```\n\n## 模板语法\n\n## 条件渲染\n\n和其他语言类似，`v-if、v-else-if、v-else、`\n\n首先来看`v-if`\n\n```html\n<div id=\"app\">\n    <h2 v-if=\"flag\">你可以看到我吗？</h2>\n</div>\n\n<script>\n    var vm=new Vue({\n        el: \"#app\",\n        data: {\n            flag: false\n        }\n    })\n</script>\n```\n\n在浏览器中不会显示`你可以看到我吗？`，将flag改为`true`，就显出出来了。\n\n条件渲染就是通过判断v-if的值，来渲染页面\n\nv-else\n\n```html\n<div id=\"app\">\n    <h2 v-if=\"flag\">你可以看到我吗？</h2>\n    <h2 v-else>这是else部分。</h2>\n</div>\n\n<script>\n    var vm=new Vue({\n        el: \"#app\",\n        data: {\n            flag: false\n        }\n    })\n</script>\n```\n\nv-else-if\n\n```html\n<div id=\"app\">\n    <div v-if=\"type === 'A'\">\n        A\n    </div>\n    <div v-else-if=\"type === 'B'\">\n        B\n    </div>\n    <div v-else-if=\"type === 'C'\">\n        C\n    </div>\n    <div v-else>\n        Not A/B/C\n    </div>\n</div>\n\n<script>\n    var vm=new Vue({\n        el: \"#app\",\n        data: {\n            type: \"A\"\n        }\n    })\n</script>\n```\n\nv-show也可以实现条件渲染\n\n```html\n<div id=\"app\">\n    <h2 v-show=\"flag\">你可以看到我吗？</h2>\n</div>\n\n<script>\n    var vm=new Vue({\n        el: \"#app\",\n        data: {\n            flag: false\n        }\n    })\n</script>\n```\n\n注意：`v-show` 不支持 `<template>` 元素，也不支持 `v-else`。\n\n`v-if` vs `v-show`\n\n`v-if` 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n\n`v-if` 也是**惰性的**：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\n\n相比之下，`v-show` 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\n\n一般来说，`v-if` 有更高的切换开销，而 `v-show` 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 `v-show` 较好；如果在运行时条件很少改变，则使用 `v-if` 较好。\n\n## 列表渲染\n\n数组\n\n```html\n<div id=\"app\">\n    <p v-for=\"item in items\">{{ item }}</p>\n</div>\n<script>\n    var vm=new Vue({\n        el: \"#app\",\n        data: {\n            items: [\n                \"one\",\n                \"two\",\n                \"three\"\n            ]\n        }\n    })\n</script>\n```\n\n对象\n\n```html\n<ul id=\"app3\">\n    <li v-for=\"(value, key, index) in student\">\n        {{index}}--{{ key }} : {{ value }}\n    </li>\n</ul>\n<script>\n    var vm=new Vue({\n        el: \"#app3\",\n        data: {\n            student: {\n                name: \"Tcrush\",\n                age: 20,\n                sex: \"男\"\n            }\n        }\n    })\n</script>\n```\n\n\n\n# 深入了解组件\n\n## 组件基础\n\n### Hello World\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"components-demo\">\n        <button-counter></button-counter>\n    </div>\n    <script>\n        // 定义一个名为 button-counter 的新组件\n        Vue.component('button-counter', {\n            data: function () {\n                return {\n                    count: 0\n                }\n            },\n            template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n        })\n        new Vue({ el: '#components-demo' })\n    </script>\n</body>\n</html>\n```\n\n组件复用\n\n```html\n<div id=\"components-demo\">\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n</div>\n```\n\n每个组件都有一个独立的count，相互不影响，每次使用到组件，vue就会创建一个新的实例\n\n我们看到这里不像之前是使用对象\n\n```html\ndata: {\n  count: 0\n}\n```\n\n而是使用函数，**组件的 data 选项必须是一个函数**，因此每个实例可以维护一份被返回对象的独立的拷贝：\n\n```html\ndata: function () {\n    return {\n    \tcount: 0\n\t}\n},\n```\n\n\n\n<hr />\n\n","tags":["Vue.js"],"categories":["Vue.js"]},{"title":"深入理解Java虚拟机","url":"%2F2020%2F01%2F12%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA.html","content":"![](/uploads/a3.png)\n\n<!-- more -->\n\n## 走近Java\n\n\n\n## Java内存区域与内存溢出异常\n\n\n\n## 垃圾收集器与内存分配策略\n\n\n\n<hr />\n","tags":["Java虚拟机"],"categories":["Java虚拟机"]},{"title":"Docker基础","url":"%2F2019%2F12%2F04%2FDocker%E5%9F%BA%E7%A1%80.html","content":"![](/uploads/fork.png)\n\n<!-- more -->\n\n##\n\n##\n\n##\n\n<hr />\n","tags":["Docker"],"categories":["Docker"]},{"title":"U盘文件夹变成exe应用程序","url":"%2F2019%2F10%2F20%2FU%E7%9B%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%98%E6%88%90exe%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F.html","content":"![](/uploads/a2.png)\n\n<!-- more -->\n\n## 出现问题\n\n在日常使用中，你可能会遇到：U盘的文件夹都变成了exe应用程序，或者文件夹直接不见了，但查看U盘的内存可是已经用掉了。是因为U盘中了 **Autorun** 病毒。可以百度、Google下这个病毒，都有详细介绍。\n\n## 解决方法1\n\n下载杀毒软件，对U盘、计算机进行杀毒。听说：计算机裸奔才是最安全的，因此，这里就不介绍这种方法了。\n\n## 解决方法2\n\n**基本步骤**\n\n1. 先打开计算机的查看方式，把文件扩展名，隐藏的项目选项勾上，其实不做也是可以的。\n\n2. 在U盘中新建两个.txt文件，命名随意，这里就命名为a.txt和b.txt\n\n   - 在a中增添如下代码：\n\n   ```shell\n   Windows Registry Editor Version 5.00 \n   [HKEY_LOCAL_ MACHINE \\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n   \\Explorer\\Advanced\\Folder\\Hidden\n   \\SHOWALL] \"CheckedValue\"=dword:00000001\n   ```\n\n   - 在b中增添如下代码：\n\n   ```shell\n   for /f \"delims=\" %%i in ('dir /ah /s/b') do attrib \"%%i\" -s -h\n   ```\n\n3. 将a的扩展名改为reg，将b的扩展名改为bat\n\n4. 依次执行a，b\n\n然后文件就会出现了。把exe删掉\n\n<hr />\n","tags":["U盘"],"categories":["计算机"]},{"title":"@RequestMapping详解","url":"%2F2019%2F09%2F22%2FRequestMapping%E8%AF%A6%E8%A7%A3.html","content":"`@RequestMapping`是Spring Web应用程序中最常见的注解之一，她将HTTP请求映射到mvc和rest控制的处理方法上，大大减小我们的工作量，下面对`@RequestMapping`进行介绍。\n\n<!-- more -->\n\n## 简介\n\n`@RequestMapping`可以修饰类，也可以修饰方法。\n\n## 属性\n\n### 1、value，method\n\n### 2、params，headers\n\n### 3、consumes，produces\n\n##\n\n<hr />\n","tags":["Java"],"categories":["Java"]},{"title":"汇编语言","url":"%2F2019%2F09%2F07%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80.html","content":"\n机器语言编写程序绝对是让人一件头疼的事情，为了避免使用0和1的组合来编写程序。汇编语言使用短语（缩写）来表示指令，使用变量名称来表示存储空间的位置。汇编语言指令与机器语言指令之间存在着一对一的关系。\n\n汇编语言的学习，一点笔记。。。\n\n<!--more-->\n\n## 1、汇编语言介绍\n\n汇编语言（assembly language）是一种用于**电子计算机**、**微处理器**、**微控制器**或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用**助记符**代替**机器指令**的**操作码**，用地址符号或标号代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言**指令集**，通过汇编过程转换成机器指令。特定的汇编语言和特定的机器语言指令集是一一对应的，不同平台之间不可直接移植\n\n---来自百度百科\n\n## 2、变量、寄存器与数据移动\n\n### 2.1、Hello World\n\n### 2.2、变量声明\n\n变量名必须以字母打头，其后可以跟着字母数字，可以包含‘_’，'@'，'$'特殊符号，但是通常避免使用特殊符号。**变量名不区分大小写，最大长度为247个字符，通常变量名有1~10个字符组成。**\n\n| 类型   | 占比特位数 | 表示范围（包含） |\n| ------ | ---------- | ---------------- |\n| sdword | 32         |                  |\n| dword  | 32         |                  |\n| sword  | 16         |                  |\n| word   | 16         |                  |\n| sbyte  | 8          | -128~127         |\n| byte   | 8          | 0~255            |\n\n```c\nint num=5; //c语言\nnum sdword 5 ; num被初始化为5，汇编语言;表示注释\n\nchar grade;\ngrade byte ? ;?表示汇编程序不对其进行初始化操作\n\ngrades byte 'a','b','c' ; 声明字节数组\n\nname byte 'abc' ; 声明整体字符串\n\nname byte 'abc',0 ; 字符串结尾通常带有二进制0，占用1个字节，用于表示字符串结束\n```\n\n### 2.3、立即数\n\nmov指令将右边操作数值指派给左边的操作数，右边的操作数称为源操作数，左边的操作数称为目的操作数。\n\n| 指令         | 意义                                                 |\n| ------------ | ---------------------------------------------------- |\n| mov mem, imm | 将立即数存储到内存中                                 |\n| mov reg, imm | 将内存单元的值存储到寄存器中                         |\n| mov mem, reg | 将寄存器中的内容存储到内存单元中                     |\n| mov reg, imm | 将立即数存储到寄存器中                               |\n| mov reg, reg | 将源（第二）寄存器中的内容存储到目的（第一）寄存器中 |\n\nimm：immediate\n\nmem：memory\n\nreg：register\n\n```assembly\nmov num1, 5 ; num1地址，5立即数\n```\n\n### 2.4、寄存器\n\n数据不能直接从一个内存单元移动到另一个内存单元中。\n\n先把随机数存储器（RAM）当中某一个存储单元的内容复制或装载到中央处理器（CPU）中，然后再从中央处理器中把这个内容复制或存储回随机存储器的某一个单元中。在CPU中实现上述快速地、临时性的存储空间作用的部件称为**存储器**，也称累加器\n\n### 2.5、数据移动\n\n如果实现num2=num1；因为不能从一个内存单元移动数据到另一个内存单元，因此不能写成mov num2, num1；必须需要把num1的内容复制到寄存器中，然后将寄存器中的内容复制到num2中\n\n```assembly\n;num1, num2\nmov eax, num1 ;将num1的值装载到寄存器eax中\nmov num2, eax ;将寄存器eax的值装载到num2中\n```\n\n### 2.6、字符数据\n\n```c\nchar str1,str2;\nstr1='A';\nstr2=str1;\n```\n\n```assembly\n\t\t.data\nstr1\tbyte\t?\nstr1\tbyte\t?\n\t\t.code\n\t\tmov str1, 'A' ;将‘A’存储到str1中\n\t\tmov al, str1 ;将str1的值存储到寄存器中\n\t\tmov str2, al ;将寄存器的值存储到str2中\n```\n\n## 3、输入与输出\n\n### 3.1、Hello World\n\n### 3.2、整数输出\n\n### 3.3、整数输入\n\n## 4、算术运算指令\n\n### 4.1、加法与减法运算\n\n- 加法指令\n\n| 指令         | 意义                                                         |\n| ------------ | ------------------------------------------------------------ |\n| add mem, imm | 将内存单元的数值与立即数的值相加，结果值放到内存单元中       |\n| add reg, mem | 将寄存器中的值加上内存单元中的值，结果值放到寄存器中         |\n| add mem, reg | 将内存单元中的值加上寄存器中的值，结果值放到内存单元中       |\n| add reg, imm | 将寄存器中的值加上立即数的值，结果值放到寄存器中             |\n| add reg, reg | 将目的(第一个)寄存器的值加上源(第二个)寄存器的值，结果值放到目的寄存器中 |\n\n\n\n- 减法指令\n\n| 指令         | 意义                                                         |\n| ------------ | ------------------------------------------------------------ |\n| sub mem, imm | 将内存单元的数值减去立即数的值，结果值放到内存单元中         |\n| sub reg, mem | 将寄存器中的值减去内存单元中的值，结果值放到寄存器中         |\n| sub mem, reg | 将内存单元中的值减去寄存器中的值，结果值放到内存单元中       |\n| sub reg, imm | 将寄存器中的值减去立即数的值，结果值放到寄存器中             |\n| sub reg, reg | 将目的(第一个)寄存器的值减去源(第二个)寄存器的值，结果值放到目的寄存器中 |\n\n### 4.2、乘法与除法运算\n\n- 乘法指令\n\n| 指令     | 意义                                      |\n| -------- | ----------------------------------------- |\n| imul reg | 将寄存器eax的值与寄存器中的整数值相乘     |\n| imul mem | 将内存单元中的整数值与寄存器eax中的值相乘 |\n\n- idiv指令-除法指令\n\n| 指令     | 意义                                        |\n| -------- | ------------------------------------------- |\n| idiv reg | 将寄存器中的值拆分开存储带寄存器对edx:eax中 |\n| idiv mem | 将内存中的值拆分开存储到寄存器对edx:eax中   |\n\n- 转化指令\n\n| 指令 | 意义            | 描述                                 |\n| ---- | --------------- | ------------------------------------ |\n| cbw  | 字节转化为字    | 寄存器al的内容扩展到寄存器ax         |\n| cwb  | 字转化为双字    | 寄存器ax的内容扩展到寄存器eax        |\n| cbq  | 双字转化为4个字 | 寄存器eax的内容扩展到寄存器对edx:eax |\n\n### 4.3、一元运算\n\n### 4.4、优先级\n\n## 5、选择结构\n\n### 5.1、if-then结构\n\n```c\n// 1)\nif(num==0)\n    num--;\n\n// 2)\nif(amount!=1) {\n    count++;\n    amount=amount+2;\n}\n```\n\n```assembly\n; 1)\n.if num==0\ndec num\n.endif\n\n; 2)\n.if amount!=1\ninc count\nadd amount, 2\n.endif\n```\n\n\n\n### 5.2、if-then-else结构\n\nelse使用`.else`汇编指令实现\n\n```c\nif(x>=y)\n    x--;\nelse\n    y++;\n```\n\n```assembly\n; if(x>=y)\nmov eax, x ;将x的值存储寄存器eax中，因为不能直接比较两个内存单元的值\n.if eax>=y\ndec x\n.else\ninc y\n.endif\n```\n\n### 5.3、嵌套if结构\n\n使用多个`.endif`结束if结构\n\n### 5.4、case结构\n\n使用je指令实现case结构\n\n### 5.5、字符与逻辑运算符\n\n## 6、迭代结构\n\n### 6.1、前置检测循环while\n\n`.while`和`.endw`汇编指令实现while循环\n\n```c\ni=1;\nwhile(i<=3) {\n    i++;\n}\n```\n\n```assembly\nmov i, 1\n.while i<=3\ninc i\n.endw\n```\n\n当然也可以使用if-then=else中无条件跳转命令，类似goto语句\n\n### 6.2、后置检测循环do-while\n\n`.repeat`和`until`汇编指令实现do-while循环\n\n```c\ni=1;\ndo {\n    i++;\n} while(i<=3);\n```\n\n```assembly\nmov i, 1\n.repeat\ninc i\n.until i>3\n```\n\n注意：\n\n> .until i>3替换了i<=3，repeat-until循环是直到i>3时，循环才不执行。\n\n### 6.3、固定迭代循环for\n\n`.repeat`和`.untilcxz`汇编指令实现\n\n`.repeat`和`.untilcxz`指令使用ecx寄存器作为计数器，`.untilcxz`完成两个任务，把寄存器ecx的值减1，然后当寄存器ecx的值不为0时，它将跳转到`.repeat`指令处执行，也就是：当寄存器ecx的值为0时（cxz），循环停止执行。for循环是前置循环，而`.`repeat和`.untilcxz`指令是后置循环\n\n```c\nfor(i=1;i<=3;i++) {\n    //循环体\n}\n```\n\n```assembly\nmov eax, 3\n.repeat\n; 循环体\n.untilcxz\n```\n\n说明：\n\n> 首先，将需要执行的次数装载到寄存器ecx中，然后。untilcxz执行一次，寄存器ecx的值减1，同时与0比较，如果不为0，继续循环，为0，则程序控制流跳转到.untilcxz之后开始执行\n\n### 6.4、循环与输出输入\n\nINVOKE指令会破坏寄存器eax、ecx和edx的值，`.repeat`-`.untilcxz`指令需要使用到寄存器eax的值，因此在输出输入的时候，需要存储寄存器eax的值。注意这里的使用。\n\n\n\n### 6.5、嵌套循环\n\n```c\ni=1;\nwhile(i<=2) {\n    j=1;\n    while(j<=3) {\n        j++;\n    }\n    i++;\n}\n```\n\n```assembly\nmov i, 1\n.while i<=2\nmov j, 1\n.while j<=3\ninc j\n.endw\ninc i\n.endw\n```\n\n\n\n## 7、运算指令\n\n### 7.1、逻辑运算指令\n\n\n\n### 7.2、逻辑移位指令\n\n### 7.3、算术移位指令\n\n### 7.4、循环移位指令\n\n### 7.5、堆栈操作\n\n### 7.6、数据交换\n\n## 8、过程与宏\n\n### 8.1、过程\n\n调用过程的指令为call，call指令只有一个操作数。\n\n```assembly\n; pname为过程名，汇编指令proc指出过程\npname proc\n\t; 过程体，后需要有ret指令\n\tret\npname endp ；结束\n```\n\n```assembly\nsample proc\n\tadd eax,ebx\n\tadd eax,ecx\n\tadd eax,edx\n\tret\nsample endp\n```\n\n调用过程：\n\ncall sample\n\n### 8.2、宏\n\n使用`macro`定义宏\n\n```assembly\nmname macro\n\t; 宏体\n\tendm\n```\n\n调用过程需要使用call，调用宏直接写出宏的名字即可。\n\n- 宏传递参数\n\n命名参数是一个代替参数\n\n```assembly\nswap macro p1,p2 ;p1，p2是命名参数\n    mov ebx,p1\n    xchg ebx,p2 ;交换ebx和p2的值\n    mov p1,ebx\n    endm\n```\n\n使用注释来文档化宏定义，又不希望在宏扩展中看到注释，可以使用（;;）代替（;）进行注释\n\n## 9、数组\n\n### 9.1、数组声明与编制\n\n数组是连续的，因此声明数组最简单的方法就是按照内存位置依次罗列\n\n```assembly\n\t.data\nnum1 sdword 2\nnum2 sdword 3\nnum3 sdword 4\n```\n\n当然，这种办法很不现实\n\n```assembly\nnumary  sdword 2\n\t\tsdword 3\n\t\tsdword 4\n```\n\n在MASM中有更简单的方法，`sdword`只需要出现一次\n\n```assembly\nnumary sdword 2,3,4\n\nempary sdword ?,?,? ;不初始化数组\n```\n\n也许你发现了问题，如果有几百个元素，那不是需要写很多，如果更多，就更加糟糕了。\n\n当然有简单方法了：\n\n```assembly\nnumary sdword 3 dup(0)\nempary sdword 3 dup(?) ;未初始化\n```\n\n### 9.2、数组索引\n\n看一个示例，在C语言中，我们常常会求一个数组的和。eg：\n\n```c\nint num[]={1,2,3};\nint sum=0;\nfor(int i=0;i<3;i++)\n    sum+=num[i];\n```\n\n我们从上面看到求数组的和，即遍历索引数组元素，然后相加。因此需要使用循环，如果你忘记了，可以向前翻一翻哦。这里就不写初始化变量。\n\n```assembly\nmov sum,0\nmov ecx,3\nmov ebx,0\n.repeat\nmov eax,num[ebx]\nadd sum,eax\nadd ebx,4 ;寄存器ebx的值加上4，跳到下一个元素\n.untilcxz\n```\n\n你不防试一试使用for循环求解。\n\n### 9.3、使用esi和edi寄存器索引\n\n```assembly\nmov ebx,4\nmov eax,num[ebx]\n```\n\n寄存器加上4，指向下一个元素的地址，然后将地址上的值装载到寄存器eax中。下面看看寄存器esi是如何的？\n\n```assembly\nmov esi,offset num+4\nmov eax,[esi]\n```\n\n这里不是把num+4中的内容装载到寄存器esi中，这里offset的操作是将内存位置num+4的地址值装载到寄存器esi中。注意后面的装载，没有num。\n\n我们前面知道了，不能直接将一个内存位置复制到另一个内存位置：\n\n```assembly\nmov eax,num1\nmov num2,eax\n```\n\n看看另一种方法\n\n```assembly\nlea esi,num1 ;将num1的地址装载到寄存器esi中\nlea edi,num2\nmov eax,[esi] ;将寄存器esi所指内存地址中的内容装载到寄存器eax\nmov [edi],eax ;将寄存器eax的内容装载到寄存器edi所指向的地址中\n```\n\n### 9.4、lengthof和sizeof\n\n在C语言中，知道一个数组的长度和大小是多么重要，汇编也不例外\n\nlengthof操作符确定数组中有多少个元素，sizeof操作符确定数组多少个字节\n\n```assembly\nmov ecx,lengthof num\nmov eax,sizeof num\n```\n\n## 10、字符串\n\n","tags":["汇编语言"],"categories":["汇编语言"]},{"title":"MyBatis笔记","url":"%2F2019%2F08%2F01%2FMyBatis%E7%AC%94%E8%AE%B0.html","content":"\nMyBatis是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集。MyBatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的 POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。\n\n<!--more-->\n\n官方文档中文版：[http://www.mybatis.org/mybatis-3/zh/index.html](http://www.mybatis.org/mybatis-3/zh/index.html)\n\n官方文档英文版：[http://www.mybatis.org/mybatis-3/](http://www.mybatis.org/mybatis-3/)\n\n### 1、下载安装\n\n下载：[https://github.com/mybatis/mybatis-3](https://github.com/mybatis/mybatis-3)\n\n使用maven构建项目\n\n```xml\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>x.x.x</version>\n</dependency>\n```\n\n### 2、入门\n\n- 从XML中构建SqlSessionFactory\n\nSqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的Configuration 的实例构建出 SqlSessionFactory 的实例。\n\n```java\nString resource = \"mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n```\n\nXML 配置文件中包含了对 MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）。mybatis-config.xml:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\"/>\n                <property name=\"url\" value=\"${url}\"/>\n                <property name=\"username\" value=\"${username}\"/>\n                <property name=\"password\" value=\"${password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"EmployeeMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n- 不使用 XML 构建 SqlSessionFactory\n\n```java\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(\"development\", transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n```\n\n注意该例中，configuration 添加了一个映射器类（mapper class）。映射器类是Java 类，它们包含 SQL 映射语句的注解从而避免依赖 XML 文件。不过，由于Java 注解的一些限制以及某些 MyBatis 映射的复杂性，要使用大多数高级映射（比如：嵌套联合映射），仍然需要使用 XML配置。有鉴于此，如果存在一个同名XML 配置文件，MyBatis 会自动查找并加载它（在这个例子中，基于类路径和 BlogMapper.class 的类名，会加载BlogMapper.xml）。\n\n- 从 SqlSessionFactory 中获取 SqlSession\n\nSqlSession完全包含了面向数据库执行 SQL 命令所需的所有方法。你可以通过SqlSession 实例来直接执行已映射的 SQL 语句\n\n```java\ntry (SqlSession session = sqlSessionFactory.openSession()) {\n  Blog blog = (Blog) session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n}\n```\n\n简洁方法：\n\n```java\ntry (SqlSession session = sqlSessionFactory.openSession()) {\n  BlogMapper mapper = session.getMapper(BlogMapper.class);\n  Blog blog = mapper.selectBlog(101);\n}\n```\n\n- 探究已映射的 SQL 语句\n\n​         在上面提到的例子中，一个语句既可以通过 XML 定义，也可以通过注解定义。我们先看看XML 定义语句的方式，事实上 MyBatis 提供的全部特性都可以利用基于 XML 的映射语言来实现，这使得MyBatis 在过去的数年间得以流行。如果你以前用过 MyBatis，你应该对这个概念比较熟悉。不过自那以后，XML 的配置也改进了许多，我们稍后还会再提到。这里给出一个基于 XML映射语句的示例，它应该可以满足上述示例中 SqlSession 的调用。       \n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"org.mybatis.example.BlogMapper\">\n  <select id=\"selectBlog\" resultType=\"Blog\">\n    select * from Blog where id = #{id}\n  </select>\n</mapper>\n```\n\n​         在一个 XML 映射文件中，可以定义无数个映射语句，这样一来，XML头部和文档类型声明占去的部分就显得微不足道了。而文件的剩余部分具备自解释性，很容易理解。在命名空间 “org.mybatis.example.BlogMapper” 中定义了一个名为 “selectBlog”的映射语句，允许你使用指定的完全限定名    “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句，就像上面例子中那样：       \n\n```java\nBlog blog = (Blog) session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n```\n\n​         你可能注意到这和使用完全限定名调用 Java 对象的方法类似。这样，该命名就可以直接映射到在命名空间中同名的 Mapper 类，并将已映射的 select 语句中的名字、参数和返回类型匹配成方法。因此你就可以像上面那样很容易地调用这个对应 Mapper接口的方法，就像下面这样：       \n\n```java\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n```\n\n​         第二种方法有很多优势，首先它不依赖于字符串字面值，会更安全一点；其次，如果你的 IDE 有代码补全功能，那么代码补全可以帮你快速选择已映射的 SQL语句。       \n\n**提示：**对命名空间的一点说明\n\n​         在之前版本的 MyBatis中，**命名空间（Namespaces）**的作用并不大，是可选的。但现在，随着命名空间越发重要，你必须指定命名空间。       \n\n​         命名空间的作用有两个，一个是利用更长的完全限定名来将不同的语句隔离开来，同时也实现了你上面见到的接口绑定。就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。       \n\n​         **命名解析：**为了减少输入量，MyBatis对所有的命名配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。       \n\n- 完全限定名（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。         \n- 短名称（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。         如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和         “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用完全限定名。         \n\n​         对于像 BlogMapper 这样的映射器类来说，还有另一种方法来处理映射。它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML示例可被替换如下：       \n\n```java\npackage org.mybatis.example;\npublic interface BlogMapper {\n  @Select(\"SELECT * FROM blog WHERE id = #{id}\")\n  Blog selectBlog(int id);\n}\n```\n\n​         使用注解来映射简单语句会使代码显得更加简洁，然而对于稍微复杂一点的语句，Java  注解就力不从心了，并且会显得更加混乱。因此，如果你需要完成很复杂的事情，那么最好使用 XML 来映射语句。       \n\n​         选择何种方式来配置映射，以及认为映射语句定义的一致性是否重要，这些完全取决于你和你的团队。         换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML         的语句映射方式间自由移植和切换。 \n\n- 作用域（Scope）和生命周期\n\n**SqlSessionFactoryBuilder**\n\n这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。你可以重用SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory实例，但是最好还是不要让其一直存在，以保证所有的XML 解析资源可以被释放给更重要的事情。         \n\n**SqlSessionFactory**\n\nSqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。           使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏味道（bad smell）”。因此SqlSessionFactory 的最佳作用域是应用作用域。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。         \n\n**SqlSession**\n\n每个线程都应该有它自己的 SqlSession 实例。SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的HttpSession。如果你现在正在使用一种 Web 框架，要考虑 SqlSession 放在一个和 HTTP 请求对象相似的作用域中。换句话说，每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。下面的示例就是一个确保SqlSession 关闭的标准模式：         \n\n```java\ntry (SqlSession session = sqlSessionFactory.openSession()) {\n  // 你的应用逻辑代码\n}\n```\n\n在你的所有的代码中一致地使用这种模式来保证所有数据库资源都能被正确地关闭。\n\n### 3、XML配置\n\n#### 3.1、properties\n\n#### 3.2、settings\n\n[http://www.mybatis.org/mybatis-3/zh/configuration.html#settings](http://www.mybatis.org/mybatis-3/zh/configuration.html#settings)\n\n|              设置名              | 描述                                                         | 有效值                                            | 默认值                                       |\n| :------------------------------: | :----------------------------------------------------------- | ------------------------------------------------- | -------------------------------------------- |\n|           cacheEnabled           | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。   | true \\|false                                      | true                                         |\n|        lazyLoadingEnabled        | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置 `fetchType` 属性来覆盖该项的开关状态。 | true \\| false                                     | false                                        |\n|      aggressiveLazyLoading       | 当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考 `lazyLoadTriggerMethods`)。 | true \\| false                                     | false （在 3.4.1 及之前的版本默认值为 true） |\n|    multipleResultSetsEnabled     | 是否允许单一语句返回多结果集（需要驱动支持）                 | true \\| false                                     | true                                         |\n|          useColumnLabel          | 使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 | true \\| false                                     | true                                         |\n|         useGeneratedKeys         | 允许 JDBC 支持自动生成主键，需要驱动支持。如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 | true \\| false                                     | False                                        |\n|       autoMappingBehavior        | 指定 MyBatis 应如何自动映射列到字段或属性。NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL                               | PARTIAL                                      |\n| autoMappingUnknownColumnBehavior | 指定发现自动映射目标未知列（或者未知属性类型）的行为。 `NONE`: 不做任何反应`WARNING`: 输出提醒日志 (`'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'`                   的日志等级必须设置为 `WARN`) `FAILING`: 映射失败 (抛出 `SqlSessionException`) | NONE, WARNING, FAILING                            | NONE                                         |\n|       defaultExecutorType        | 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。 | SIMPLE                 REUSE                BATCH | SIMPLE                                       |\n\n设置：\n\n```xml\n<!-- settings包含多个setting\n  <setting name=\"\" value=\"\"/>\n  name：setting名（设置名）\n  value：setting值（设置值）\n -->\n<settings>\n\t<setting name=\"mapUnderscoreToCamelCase\" value=\"True\"/>\n</settings>\n```\n\n\n\n#### 3.3、typeAliases\n\n```xml\n<!-- 3、typeAliases可以给java类型起别名（别名不区分大小写） -->\n<typeAliases>\n    <!-- typeAlias：为某个类起别名\n   type：指定需要起别名的java类型（com.mybatis.bean.Employee），默认为类名小写（employee）\n   alias：指定别名\n  -->\n    <typeAlias type=\"com.mybatis.bean.Employee\" alias=\"employee\"/>\n\n    <!-- package：为某个包下所有类起别名\n   name：指定报名（为当前包以及下面所有的后代包每一个类都起一个默认别名（类名小写:employee））\n   <package name=\"com.mybatis.bean\"/>\n   -->\n\n    <!-- @Alias(\"employee\")：包与子包的类名冲突，可以@Alias取别名，在类前加上注解@Alias，默认为类名小写 -->\n</typeAliases>\n```\n\nmybatis为java类型起好别名：[http://www.mybatis.org/mybatis-3/zh/configuration.html#settings](http://www.mybatis.org/mybatis-3/zh/configuration.html#settings)\n\n取别名需要与这些别名不同。。。\n\n#### 3.4、typeHandlers\n\n#### 3.5、objectFactory\n\n#### 3.6、plugins\n\n#### 3.7、environments\n\n```xml\n<!-- environments：环境配置，可以配置多种环境\n        environment：配置一种具体环境,id:唯一标识符\n        transactionManager：事务管理器\n          type：事务管理器类型：[JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)]\n            自定义：实现TransactionFactory接口\n        dataSource:数据源\n          type：数据源类型：[UNPOOLED(UnpooledDataSourceFactory)\n               |POOLED(PooledDataSourceFactory)\n               |JNDI(JndiDataSourceFactory)]\n            自定义：实现DataSourceFactory接口\n        <environment id=\"\">\n    <transactionManager type=\"\"></transactionManager>\n    <dataSource type=\"\"></dataSource>\n   </environment>\n-->\n<environments default=\"development\">\n    <environment id=\"development\">\n        <transactionManager type=\"JDBC\" />\n        <dataSource type=\"POOLED\">\n            <property name=\"driver\" value=\"${driver}\" />\n            <property name=\"url\" value=\"${url}\" />\n            <property name=\"username\" value=\"${username}\" />\n            <property name=\"password\" value=\"${password}\" />\n        </dataSource>\n    </environment>\n</environments>\n```\n\n#### 3.8、databaseIdProvider\n\n```xml\n<environments default=\"dev_mysql\">\n    <environment id=\"dev_mysql\">\n        <transactionManager type=\"JDBC\"></transactionManager>\n        <dataSource type=\"POOLED\">\n            <property name=\"driver\" value=\"${jdbc.driver}\" />\n            <property name=\"url\" value=\"${jdbc.url}\" />\n            <property name=\"username\" value=\"${jdbc.username}\" />\n            <property name=\"password\" value=\"${jdbc.password}\" />\n        </dataSource>\n    </environment>\n\n    <environment id=\"dev_oracle\">\n        <transactionManager type=\"JDBC\" />\n        <dataSource type=\"POOLED\">\n            <property name=\"driver\" value=\"${orcl.driver}\" />\n            <property name=\"url\" value=\"${orcl.url}\" />\n            <property name=\"username\" value=\"${orcl.username}\" />\n            <property name=\"password\" value=\"${orcl.password}\" />\n        </dataSource>\n    </environment>\n</environments>\n<!-- 5、databaseIdProvider：支持多数据库厂商的；\n   type=\"DB_VENDOR\"：VendorDatabaseIdProvider\n    作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;\n    MySQL，Oracle，SQL Server,xxxx\n   -->\n<databaseIdProvider type=\"DB_VENDOR\">\n    <!-- 为不同的数据库厂商起别名 -->\n    <property name=\"MySQL\" value=\"mysql\"/>\n    <property name=\"Oracle\" value=\"oracle\"/>\n    <property name=\"SQL Server\" value=\"sqlserver\"/>\n</databaseIdProvider>\n```\n\n增删改的映射文件\n\n```xml\n<select id=\"getEmpById\" resultType=\"com.mybatis.bean.Employee\">\n    select * from tbl_employee where id = #{id}\n</select>\n<select id=\"getEmpById\" resultType=\"com.mybatis.bean.Employee\"\n        databaseId=\"mysql\">\n    select * from tbl_employee where id = #{id}\n</select>\n<select id=\"getEmpById\" resultType=\"com.mybatis.bean.Employee\"\n        databaseId=\"oracle\">\n    select EMPLOYEE_ID id,LAST_NAME\tlastName,EMAIL email \n    from employees where EMPLOYEE_ID=#{id}\n</select>\n```\n\n#### 3.9、mappers\n\n```xml\n<!-- 全局mybatis配置文件，数据库驱动，url，username，password 其他sql映射文件需要在此处注册\n  将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->\n<!-- 6、mappers：将sql映射注册到全局配置中 \n -->\n<mappers>\n    <!-- \n    mapper:注册一个sql映射 \n     注册配置文件\n     resource：引用类路径下的sql映射文件\n      mybatis/mapper/EmployeeMapper.xml\n     url：引用网路路径或者磁盘路径下的sql映射文件\n      file:///var/mappers/AuthorMapper.xml\n\n     注册接口\n     class：引用（注册）接口，\n      1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；\n      2、没有sql映射文件，所有的sql都是利用注解写在接口上;\n\t\t@Select(\"select * from user where id=#{id}\")\n      推荐：\n       比较重要的，复杂的Dao接口我们来写sql映射文件\n       不重要，简单的Dao接口为了开发快速可以使用注解；\n   -->\n    <!-- <mapper resource=\"mybatis/mapper/EmployeeMapper.xml\"/> -->\n    <!-- <mapper class=\"com.mybatis.dao.EmployeeMapperAnnotation\"/> -->\n\n    <!-- 批量注册：\n    <package name=\"com.mybatis.dao\"/> \n   -->\n    <mapper resource=\"EmployeeMapper.xml\" />\n</mappers>\n```\n\n基本顺序：(properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, \n objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, \n mappers?)\n\n### 4、XML映射文件\n\n#### 4.1、select\n\n#### 4.2、insert, update 和 delete\n\n#### 4.3、参数\n\n- 单个参数\n\n使用的简单参数。实际上参数是 MyBatis非常强大的元素。：         \n\n```xml\n<select id=\"getEmpById\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee where id = #{id}\n</select>\n```\n\n像 MyBatis 的其他部分一样，参数也可以指定一个特殊的数据类型。         \n\n```\n#{property,javaType=int,jdbcType=NUMERIC}\n```\n\n​          像 MyBatis 的其它部分一样，javaType 几乎总是可以根据参数对象的类型确定下来，除非该对象是一个           `HashMap`。这个时候，你需要显式指定 `javaType` 来确保正确的类型处理器（`TypeHandler`）被使用。         \n\n提示 JDBC 要求，如果一个列允许 null 值，并且会传递值 null 的参数，就必须要指定 JDBC Type。阅读         `PreparedStatement.setNull()`的 JavaDoc 文档来获取更多信息。         \n\n​          要更进一步地自定义类型处理方式，你也可以指定一个特殊的类型处理器类（或别名），比如：         \n\n```\n#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}\n```\n\n尽管看起来配置变得越来越繁琐，但实际上，很少需要如此繁琐的配置。\n\n对于数值类型，还有一个小数保留位数的设置，来指定小数点后保留的位数。\n\n```\n#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}\n```\n\n​          最后，mode 属性允许你指定 `IN`，`OUT` 或  `INOUT` 参数。如果参数的 `mode` 为 `OUT`  或 `IOUT`，就像你在指定输出参数时所期望的行为那样，参数对象的属性实际值将会被改变。如果 `mode` 为 `OUT`（或 `INOUT`），而且           `jdbcType` 为 `CURSOR`（也就是 Oracle 的REFCURSOR），你必须指定一个 `resultMap` 引用来将结果集           `ResultMap` 映射到参数的类型上。要注意这里的`javaType` 属性是可选的，如果留空并且 jdbcType 是           `CURSOR`，它会被自动地被设为 `ResultMap`。         \n\n```\n#{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}\n```\n\n​          MyBatis 也支持很多高级的数据类型，比如结构体（structs），但是当使用 out          参数时，你必须显式设置类型的名称。比如（再次提示，在实际中要像这样不能换行）：         \n\n```\n#{middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap}\n```\n\n​          尽管所有这些选项很强大，但大多时候你只须简单地指定属性名，其他的事情          MyBatis 会自己去推断，顶多要为可能为空的列指定 `jdbcType`。         \n\n```\n#{firstName}\n#{middleInitial,jdbcType=VARCHAR}\n#{lastName}\n```\n\n- 字符串替换\n\n​          默认情况下,使用 `#{}`          格式的语法会导致 MyBatis 创建 `PreparedStatement`          参数占位符并安全地设置参数（就像使用 ? 一样）。          这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中插入一个不转义的字符串。          比如，像 ORDER BY，你可以这样来使用：         \n\n```\nORDER BY ${columnName}\n```\n\n这里 MyBatis 不会修改或转义字符串。\n\n​          当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。          举个例子，如果你想通过任何一列从表中 `select` 数据时，不需要像下面这样写：           \n\n```\n@Select(\"select * from user where id = #{id}\")\nUser findById(@Param(\"id\") long id);\n\n@Select(\"select * from user where name = #{name}\")\nUser findByName(@Param(\"name\") String name);\n\n@Select(\"select * from user where email = #{email}\")\nUser findByEmail(@Param(\"email\") String email);\n\n// and more \"findByXxx\" method\n```\n\n​          可以只写这样一个方法：           \n\n```\n@Select(\"select * from user where ${column} = #{value}\")\nUser findByColumn(@Param(\"column\") String column, @Param(\"value\") String value);\n```\n\n其中 ${column}会被直接替换，而 #{value}会被使用?预处理.因此你就可以像下面这样来达到上述功能：           \n\n```\nUser userOfId1 = userMapper.findByColumn(\"id\", 1L);\nUser userOfNameKid = userMapper.findByColumn(\"name\", \"kid\");\nUser userOfEmail = userMapper.findByColumn(\"email\", \"noone@nowhere.com\");\n```\n\n这个想法也同样适用于用来替换表名的情况。         \n\n提示用这种方式接受用户的输入，并将其用于语句中的参数是不安全的，会导致潜在的 SQL          注入攻击，因此要么不允许用户输入这些字段，要么自行转义并检验。 \n\n- 多个参数\n\n多个参数会封装成一个map\n\n​\tkey：param1，param2，......，（参数索引也是可以的）\n\n​\tvalue：传入参数值，按顺序\n\n方法：\n\n```java\npublic Employee getByIdAndName(Integer id,String lastName);\n```\n\n取值：\n\n```xml\n<select id=\"getByIdAndName\" parameterType=\"com.mybatis.bean.Employee\">\n    select * from employee where id = #{id} and last_name=#{lastName}\n</select>\n```\n\n报错：\n\n```xml\norg.apache.ibatis.exceptions.PersistenceException: \nError querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]\nCause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]\n```\n\n**命名参数**：@Param明确指定\n\n使用`@Param`注解指定map中key，不使用[arg1, arg0, param1, param2]\n\nkey：使用`@Param`明确指定\n\nvalue：传入的值\n\n```java\npublic Employee getByIdAndName(@Param(\"id\")Integer id,@Param(\"lastName\")String lastName);\n```\n\n如果参数很多，建议封装为一个实体对象\n\nPOJO：\n如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo；\n\t#{属性名}：取出传入的pojo的属性值\t\n\nMap：\n如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map\n\t#{key}：取出map中对应的值\n\nTO：\n如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象\nPage{\n\tint index;\n\tint size;\n}\n\n例子：\n\n```java\npublic Employee getEmp(@Param(\"id\")Integer id,String lastName);\n\t//取值：id==>#{id/param1}   lastName==>#{param2}\n\npublic Employee getEmp(Integer id,@Param(\"e\")Employee emp);\n\t//取值：id==>#{param1}    lastName===>#{param2.lastName/e.lastName}\n\n//特别注意：如果是Collection（List、Set）类型或者是数组，\n\t\t //也会特殊处理。也是把传入的list或者数组封装在map中。\n\t\t\t//key：Collection（collection）,如果是List还可以使用这个key(list)\n\t\t\t\t//数组(array)\npublic Employee getEmpById(List<Integer> ids);\n\t//取值：取出第一个id的值：   #{list[0]}\n```\n\n总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；\n`#{key}`就可以取出map中的值；\n\n```java\n(@Param(\"id\")Integer id,@Param(\"lastName\")String lastName);\n// ParamNameResolver解析参数封装map的；\n```\n\n//1、names：{0=id, 1=lastName}；构造器的时候就确定好了\n\n> 确定流程：\n> 1.获取每个标了param注解的参数的@Param的值：id，lastName；  赋值给name;\n> 2.每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）\n> \tname的值：\n> \t\t标注了param注解：注解的值\n> \t\t没有标注：\n> \t\t\t1.全局配置：useActualParamName（jdk1.8）：name=参数名\n> \t\t\t2.name=map.size()；相当于当前元素的索引\n> {0=id, 1=lastName,2=2}\n\n\n\n\nargs【1，\"Tom\",'hello'】:\n\n```java\npublic Object getNamedParams(Object[] args) {\n    final int paramCount = names.size();\n    //1、参数为null直接返回\n    if (args == null || paramCount == 0) {\n      return null;\n//2、如果只有一个元素，并且没有Param注解；args[0]：单个参数直接返回\n} else if (!hasParamAnnotation && paramCount == 1) {\n  return args[names.firstKey()];\n  \n//3、多个元素或者有Param标注\n} else {\n  final Map<String, Object> param = new ParamMap<Object>();\n  int i = 0;\n  \n  //4、遍历names集合；{0=id, 1=lastName,2=2}\n  for (Map.Entry<Integer, String> entry : names.entrySet()) {\n  \n  \t//names集合的value作为key;  names集合的key又作为取值的参考args[0]:args【1，\"Tom\"】:\n  \t//eg:{id=args[0]:1,lastName=args[1]:Tom,2=args[2]}\n    param.put(entry.getValue(), args[entry.getKey()]);\n       \n        // add generic param names (param1, param2, ...)param\n        //额外的将每一个参数也保存到map中，使用新的key：param1...paramN\n        //效果：有Param注解可以#{指定的key}，或者#{param1}\n        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);\n        // ensure not to overwrite parameter named with @Param\n        if (!names.containsValue(genericParamName)) {\n          param.put(genericParamName, args[entry.getKey()]);\n        }\n        i++;\n      }\n      return param;\n    }\n  }\n}\n```\n\n- 参数值的获取\n\n`#{}`：可以获取map中的值或者pojo对象属性的值；\n`${}`：可以获取map中的值或者pojo对象属性的值；\n\n```sql\nselect * from tbl_employee where id=${id} and last_name=#{lastName}\nPreparing: select * from tbl_employee where id=2 and last_name=?\n```\n\n​\t区别：\n​\t\t#{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入\n​\t\t${}:取出的值直接拼装在sql语句中；会有安全问题；\n​\t\t大多情况下，我们取参数的值都应该去使用#{}；\n\n​\t\t原生jdbc不支持占位符的地方我们就可以使用${}进行取值\n​\t\t比如分表、排序。。。；按照年份分表拆分\t\t\n\n```sql\nselect * from ${year}_salary where xxx;\nselect * from tbl_employee order by ${f_name} ${order}\n```\n\n`#{}`:更丰富的用法：\n\t规定参数的一些规则：\n\tjavaType、 jdbcType、 mode（存储过程）、 numericScale、\n\tresultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；\n\n>jdbcType通常需要在某种特定的条件下被设置：\n>\t在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；\n>JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;\n\n```xml\n由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法\n1、#{email,jdbcType=OTHER};\n2、jdbcTypeForNull=NULL\n\t<setting name=\"jdbcTypeForNull\" value=\"NULL\"/>\n```\n\n\n\n**鉴别器：**\n\n```xml\n<!-- =======================鉴别器============================ -->\n<!-- <discriminator javaType=\"\"></discriminator>\n  鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为\n  封装Employee：\n   如果查出的是女生：就把部门信息查询出来，否则不查询；\n   如果是男生，把last_name这一列的值赋值给email;\n  -->\n<resultMap type=\"com.mybatis.bean.Employee\" id=\"MyEmpDis\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"last_name\" property=\"lastName\"/>\n    <result column=\"email\" property=\"email\"/>\n    <result column=\"gender\" property=\"gender\"/>\n    <!--\n    column：指定判定的列名\n    javaType：列值对应的java类型  -->\n    <discriminator javaType=\"string\" column=\"gender\">\n        <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->\n        <case value=\"0\" resultType=\"com.mybatis.bean.Employee\">\n            <association property=\"dept\" \n                         select=\"com.mybatis.dao.DepartmentMapper.getDeptById\"\n                         column=\"d_id\">\n            </association>\n        </case>\n        <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->\n        <case value=\"1\" resultType=\"com.mybatis.bean.Employee\">\n            <id column=\"id\" property=\"id\"/>\n            <result column=\"last_name\" property=\"lastName\"/>\n            <result column=\"last_name\" property=\"email\"/>\n            <result column=\"gender\" property=\"gender\"/>\n        </case>\n    </discriminator>\n</resultMap>\n```\n\n\n\n### 5、动态SQL\n\n动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。\n\n- if\n- choose (when, otherwise)\n- trim (where, set)\n- foreach\n\n#### 5.1、if\n\n动态 SQL 通常要做的事情是根据条件包含 where 子句的一部分。\n\n```xml\n<select id=\"getEmpsIf\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee\n    where\n    <if test=\"id!=null\">\n        id=#{id}\n    </if>\n    <if test=\"lastName!=null and lastName!=''\">\n        and last_name like #{lastName}\n    </if>\n</select>\n```\n\n发送的SQL语句：\n\n```sql\n-- 传入id,lastName\nselect * from employee where id=? and last_name like ?\n\n-- 传入id,没lastName\nselect * from employee where id=?\n```\n\n当然，这样是有问题的，如果没有传入id，则会报错，发送的SQL语句：\n\n```sql\nselect * from employee where and last_name like ?\n```\n\n有两种方法：\n\n- where后加上一个恒成立的条件，如：1=1，以后的条件都加上and\n\n```sql\n-- 传入id,lastName\nselect * from employee where 1=1 and id=? and last_name like ?\n\n-- 传入id,没lastName\nselect * from employee where 1=1 and last_name like ?\n```\n\n- mybatis使用where标签将所有的查询条件包括在内，mybatis会将where中条件拼装成SQL语句，多出来and或者or去掉\n\n```xml\n<select id=\"getEmpsIf\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee\n    <where>\n        <if test=\"id!=null\">\n            and id=#{id} <!--第一个可以不写-->\n        </if>\n        <if test=\"lastName!=null and lastName!=''\">\n            and last_name like #{lastName}\n        </if>\n    </where>\n</select>\n```\n\n发送SQL语句：\n\n```sql\nselect * from employee WHERE id=? and last_name like ?\n\nselect * from employee WHERE last_name like ?\n```\n\n注意：\n\n>如果我们将and写在字段后面，会有错误，where只会去掉前面多出来的and或者or\n\n```xml\n<select id=\"getEmpsIf\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee\n    <where>\n        <if test=\"id!=null\">\n            id=#{id} and\n        </if>\n        <if test=\"lastName!=null and lastName!=''\">\n            last_name like #{lastName}\n        </if>\n    </where>\n</select>\n```\n\n发送SQL语句\n\n```sql\n-- 传入id,lastName\nselect * from employee WHERE id=? and last_name like ?\n\n-- 传入id,没lastName\nselect * from employee WHERE id=? and\n```\n\nSo：注意规则。。。\n\nwhere*元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where 元素也会将它们去除。\n\n#### 5.2、choose\n\n分支选择，带了break的swtich-case选择，不想应用到所有的条件语句，而只想从中择其一项。\n\n```xml\n<!-- public List<Employee> getEmpsChoose(Employee employee) -->\n<select id=\"getEmpsChoose\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee\n    where\n    <choose>\n        <when test=\"id!=null\">\n            id=#{id}\n        </when>\n        <when test=\"lastName!=null and lastName!=''\">\n            last_name like #{lastName}\n        </when>\n        <when test=\"password!=null and password!=''\">\n            password=#{password}\n        </when>\n        <when test=\"email!=null and email!=''\">\n            email like #{email}\n        </when>\n    </choose>\n</select>\n```\n\n发送SQL语句：\n\n```sql\n-- 传入id\nselect * from employee where id=?\n\n-- 传入id，lastName\nselect * from employee where id=?\n```\n\n```xml\n<!-- public List<Employee> getEmpsChoose(Employee employee) -->\n<select id=\"getEmpsChoose\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee\n    where\n    <choose>\n        <when test=\"id!=null\">\n            id=#{id}\n        </when>\n        <when test=\"lastName!=null and lastName!=''\">\n            last_name like #{lastName}\n        </when>\n        <when test=\"password!=null and password!=''\">\n            password=#{password}\n        </when>\n        <when test=\"email!=null and email!=''\">\n            email like #{email}\n        </when>\n        <otherwise>\n            1=1\n        </otherwise>\n    </choose>\n</select>\n```\n\nwhen：条件；otherwise：所有条件都不成立时，选择otherwise，只会选择一个，由前到后。\n\n#### 5.3、trim \n\n后面多出的and或者or where标签不能解决 \nprefix=\"\":前缀：trim标签体中是整个字符串拼串 后的结果。\n\t \tprefix给拼串后的整个字符串加一个前缀 \nprefixOverrides=\"\":\n\t \t前缀覆盖： 去掉整个字符串前面多余的字符\nsuffix=\"\":后缀\n\t \tsuffix给拼串后的整个字符串加一个后缀 \nsuffixOverrides=\"\"\n\t \t后缀覆盖：去掉整个字符串后面多余的字符\n\n```xml\n<select id=\"getEmpsTrim\" resultType=\"com.mybatis.bean.Employee\">\n\t\tselect * from employee\n    <trim prefix=\"where\" suffixOverrides=\"and\">\n        <if test=\"id!=null\">\n            id=#{id} and\n        </if>\n        <if test=\"lastName!=null and lastName!=''\">\n            last_name like #{lastName}\n        </if>\n    </trim>\n</select>\n```\n\n- **set**\n\n```xml\n<!-- public void updateEmp(Employee employee) -->\n<update id=\"updateEmp\">\n    update employee\n    set\n    <if test=\"lastName!=null and lastName!=''\">\n        last_name=#{lastName},\n    </if>\n    <if test=\"password!=null and password!=''\">\n        password=#{password},\n    </if>\n    <if test=\"email!=null and email!=''\">\n        email=#{email}\n    </if>\n    where id=#{id}\n</update>\n```\n\n发送SQL语句：\n\n```sql\n-- id=3,lastName=admin\nupdate employee set last_name=?, where id=? -- 报错，多了‘，’\n```\n\n```xml\n<!-- public void updateEmp(Employee employee) -->\n<update id=\"updateEmp\">\n    update employee\n    <set>\n        <if test=\"lastName!=null and lastName!=''\">\n            last_name=#{lastName},\n        </if>\n        <if test=\"password!=null and password!=''\">\n            password=#{password},\n        </if>\n        <if test=\"email!=null and email!=''\">\n            email=#{email}\n        </if>\n    </set>\n    where id=#{id}\n</update>\n```\n\n发送SQL语句：\n\n```sql\n-- id=3,lastName=admin\nupdate employee set last_name=? where id=?\n```\n\n当然也可以使用之前说过的trim实现：\n\n```xml\n<!-- public void updateEmp(Employee employee) -->\n<update id=\"updateEmp\">\n    update employee\n    <trim prefix=\"set\" suffixOverrides=\",\">\n        <if test=\"lastName!=null and lastName!=''\">\n            last_name=#{lastName},\n        </if>\n        <if test=\"password!=null and password!=''\">\n            password=#{password},\n        </if>\n        <if test=\"email!=null and email!=''\">\n            email=#{email}\n        </if>\n    </trim>\n    where id=#{id}\n</update>\n```\n\n```sql\n-- Employee employee=new Employee(3,\"admin\",\"123456\",null);\nupdate employee set last_name=?, password=? where id=?\n```\n\n#### 5.4、foreach\n\n```xml\n<!-- public List<Employee> getEmpsForeach(List<Integer> list) -->\n<!--\n  collection：指定要遍历的集合：\n   list类型的参数会特殊处理封装在map中，map的key就叫list\n  item：将当前遍历出的元素赋值给指定的变量\n  separator:每个元素之间的分隔符\n  open：遍历出所有结果拼接一个开始的字符\n  close:遍历出所有结果拼接一个结束的字符\n  index:索引。遍历list的时候是index就是索引，item就是当前值\n          遍历map的时候index表示的就是map的key，item就是map的值\n  #{变量名}就能取出变量的值也就是当前遍历出的元素\n -->\n<select id=\"getEmpsForeach\" resultType=\"com.mybatis.bean.Employee\">\n    select * from employee where id in\n    <foreach collection=\"list\" item=\"item\" \n             open=\"(\" separator=\",\" close=\")\">\n        #{item}\n    </foreach>\n</select>\n```\n\n发送SQL语句：\n\n```sql\n-- List<Employee> employees=employeeDao.getEmpsForeach(Arrays.asList(1,2,3));\nselect * from employee where id in ( ? , ? , ? ) \n```\n\n可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象传递给 *foreach* 作为集合参数。当使用可迭代对象或者数组时，index 是当前迭代的次数，item 的值是本次迭代获取的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。\n\n- 批量操作\n\n1、mysql：mysql支持values(),(),()语法\n\n```xml\n<!-- public void addEmps(@Param(\"emps\")List<Employee> emps) -->\n<!--MySQL下批量保存：可以foreach遍历   -->\n<insert id=\"addEmps\">\n    insert into employee(id,last_name,password,email)\n    values\n    <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n        (#{emp.id},#{emp.lastName},#{emp.password},#{emp.email})\n    </foreach>\n</insert>\n```\n\n发送SQL语句：\n\n```sql\ninsert into employee(id,last_name,password,email) values(?,?,?,?) , values(?,?,?,?)\n```\n\n\n\n```xml\n<!-- 也可以使用这种形式：这种方式需要数据库连接属性allowMultiQueries=true；\n   这种分号分隔多个sql可以用于其他的批量操作（删除，修改） -->\n<insert id=\"addEmps\">\n    <foreach collection=\"emps\" item=\"emp\" separator=\";\">\n        insert into employee(id,last_name,password,email)\n        values(#{emp.id},#{emp.lastName},#{emp.password},#{emp.email})\n    </foreach>\n</insert>\n```\n\n发送SQL语句：\n\n```sql\ninsert into employee(id,last_name,password,email) values(?,?,?,?) ; insert into employee(id,last_name,password,email) values(?,?,?,?)\n```\n\n注意：allowMultiQueries=true；一定需要指定。。。\n\nurl=“jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true”\n\n2、Oracle：Oracle不支持values(),(),()语法\n\nOracle支持：\n\n1、多个insert放在begin - end里面\n\nSQL：\n\n```sql\nbegin\n\tinsert into employees(employee_id,last_name,email) \n\tvalues(employees_seq.nextval,'test_001','test_001@atguigu.com');\n\tinsert into employees(employee_id,last_name,email) \n\tvalues(employees_seq.nextval,'test_002','test_002@atguigu.com');\nend;\n```\n\nXML：\n\n```xml\n<insert id=\"addEmps\" databaseId=\"oracle\">\n    <!-- oracle第一种批量方式 -->\n    <foreach collection=\"emps\" item=\"emp\" open=\"begin\" close=\"end;\">\n        insert into employees(employee_id,last_name,email) \n        values(employees_seq.nextval,#{emp.lastName},#{emp.email});\n    </foreach>\n</insert>\n```\n\n2、利用中间表：\n\nSQL：\n\n```sql\ninsert into employees(employee_id,last_name,email)\n\tselect employees_seq.nextval,lastName,email from(\n\t\tselect 'test_a_01' lastName,'test_a_e01' email from dual\n\t\tunion\n\t\tselect 'test_a_02' lastName,'test_a_e02' email from dual\n\t\tunion\n\t\tselect 'test_a_03' lastName,'test_a_e03' email from dual\n\t)\t\n```\n\nXML：\n\n```xml\n<insert id=\"addEmps\" databaseId=\"oracle\">\n    <!-- oracle第二种批量方式  -->\n    insert into employees(\n    <!-- 引用外部定义的sql -->\n    <include refid=\"insertColumn\">\n        <property name=\"testColomn\" value=\"abc\"/>\n    </include>\n    )\n    <foreach collection=\"emps\" item=\"emp\" separator=\"union\"\n             open=\"select employees_seq.nextval,lastName,email from(\"\n             close=\")\">\n        select #{emp.lastName} lastName,#{emp.email} email from dual\n    </foreach>\n</insert>\n```\n\n- 两个内置参数\n\n两个内置参数：\n \t不只是方法传递过来的参数可以被用来判断，取值。。。\n \tmybatis默认还有两个内置参数：\n \t\\_parameter:代表整个参数\n \t\t单个参数：\\_parameter就是这个参数\n \t\t多个参数：参数会被封装为一个map；_parameter就是代表这个map\n \t\n \t_databaseId:如果配置了databaseIdProvider标签。\n \t\t_databaseId就是代表当前数据库的别名oracle\n\n```xml\n<select id=\"getEmpParameter\" resultType=\"com.mybatis.bean.Employee\">\n\tselect * from employee\n\t<if test=\"_parameter!=null\">\n\t\twhere last_name like #{lastName}\n\t</if>\n</select>\n```\n数据库别名，多数据库查询\n\n```xml\n<select id=\"getEmpParameter\" resultType=\"com.mybatis.bean.Employee\">\n    <if test=\"_databaseId=='mysql'\">\n        select * from employee\n        <if test=\"_parameter!=null\">\n            where last_name like #{lastName}\n        </if>\n    </if>\n    <if test=\"_databaseId=='oracle'\">\n        select * from employee\n        <if test=\"_parameter!=null\">\n            where last_name like #{_parameter.lastName}\n        </if>\n    </if>\n</select>\n```\n\n配置多数据库\n\n```xml\n<environments default=\"dev_mysql\"> <!--指定使用数据库-->\n    <environment id=\"dev_mysql\">\n        <transactionManager type=\"JDBC\"></transactionManager>\n        <dataSource type=\"POOLED\">\n            <property name=\"driver\" value=\"${jdbc.driver}\" />\n            <property name=\"url\" value=\"${jdbc.url}\" />\n            <property name=\"username\" value=\"${jdbc.username}\" />\n            <property name=\"password\" value=\"${jdbc.password}\" />\n        </dataSource>\n    </environment>\n\n    <environment id=\"dev_oracle\">\n        <transactionManager type=\"JDBC\" />\n        <dataSource type=\"POOLED\">\n            <property name=\"driver\" value=\"${orcl.driver}\" />\n            <property name=\"url\" value=\"${orcl.url}\" />\n            <property name=\"username\" value=\"${orcl.username}\" />\n            <property name=\"password\" value=\"${orcl.password}\" />\n        </dataSource>\n    </environment>\n</environments>\n\n<databaseIdProvider type=\"DB_VENDOR\">\n    <!-- 为不同的数据库厂商起别名 -->\n    <property name=\"MySQL\" value=\"mysql\"/>\n    <property name=\"Oracle\" value=\"oracle\"/>\n    <property name=\"SQL Server\" value=\"sqlserver\"/>\n</databaseIdProvider>\n```\n\n- bind\n\nbind元素可以从OGNL表达式中创建一个变量并将其绑定到上下文。\n\n```xml\n<select id=\"getEmps\" resultType=\"com.mybatis.bean.Employee\">\n    <bind name=\"_lastName\" value=\"'%' + lastName + '%'\" />\n    select * from employee\n    where last_name like #{_lastName}\n</select>\n```\n\n- sql\n\n抽取可重用的sql片段。方便后面引用 \n  \t1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用\n  \t2、include来引用已经抽取的sql：\n  \t3、include还可以自定义一些property，sql标签内部就能使用自定义的属性\n  \t\t\tinclude-property：取值的正确方式${prop},\n  \t\t\t#{不能使用这种方式}\n\n```xml\n<insert>\n    insert into employee(\n    <include refid=\"insertColumn\"></include>\n    ) values(......)\n</insert>\n```\n\n\n\n```xml\n\n  <sql id=\"insertColumn\">\n  \t\t<if test=\"_databaseId=='oracle'\">\n  \t\t\temployee_id,last_name,email\n  \t\t</if>\n  \t\t<if test=\"_databaseId=='mysql'\">\n  \t\t\tlast_name,email,gender,d_id\n  \t\t</if>\n  </sql>\n```\n### 6、mybatis缓存机制\n\n\n\n### 7、mybatis逆向工程\n\n[<http://www.mybatis.org/generator/index.html>](http://www.mybatis.org/generator/index.html)\n\n下载jar包：[<https://github.com/mybatis/generator/releases>](https://github.com/mybatis/generator/releases)\n\n#### 7.1、配置文件：\n\n[<http://www.mybatis.org/generator/configreference/xmlconfig.html>](http://www.mybatis.org/generator/configreference/xmlconfig.html)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n\n\t<!-- \n\t\ttargetRuntime=\"MyBatis3Simple\":生成简单版的CRUD\n\t\tMyBatis3:豪华版\n\t\n\t -->\n  <context id=\"DB2Tables\" targetRuntime=\"MyBatis3\">\n  \t<!-- jdbcConnection：指定如何连接到目标数据库 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n        connectionURL=\"jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true\"\n        userId=\"root\"\n        password=\"123456\">\n    </jdbcConnection>\n\n\t<!--  -->\n    <javaTypeResolver >\n      <property name=\"forceBigDecimals\" value=\"false\" />\n    </javaTypeResolver>\n\n\t<!-- javaModelGenerator：指定javaBean的生成策略 \n\ttargetPackage=\"test.model\"：目标包名\n\ttargetProject=\"\\MBGTestProject\\src\"：目标工程\n\t-->\n    <javaModelGenerator targetPackage=\"com.mybatis.bean\" \n    \t\ttargetProject=\".\\src\">\n      <property name=\"enableSubPackages\" value=\"true\" />\n      <property name=\"trimStrings\" value=\"true\" />\n    </javaModelGenerator>\n\n\t<!-- sqlMapGenerator：sql映射生成策略： -->\n    <sqlMapGenerator targetPackage=\"com.mybatis.dao\"  \n    \ttargetProject=\".\\conf\">\n      <property name=\"enableSubPackages\" value=\"true\" />\n    </sqlMapGenerator>\n\n\t<!-- javaClientGenerator:指定mapper接口所在的位置 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.mybatis.dao\"  \n    \ttargetProject=\".\\src\">\n      <property name=\"enableSubPackages\" value=\"true\" />\n    </javaClientGenerator>\n\n\t<!-- 指定要逆向分析哪些表：根据表要创建javaBean -->\n    <table tableName=\"employee\" domainObjectName=\"Employee\"></table>\n  </context>\n</generatorConfiguration>\n```\n\n#### 7.2、Running MyBatis Generator With Java\n\n```java\npublic void testSelectEmp() throws IOException {\n    SqlSessionFactory sessionFactory=getSqlSessionFactory();\n    SqlSession session=sessionFactory.openSession();\n    try {\n        EmployeeMapper empMapper=session.getMapper(EmployeeMapper.class);\n        Employee employee=empMapper.selectByPrimaryKey(1);\n        System.out.println(employee.toString());\n    } finally {\n        session.close();\n    }\n}\n```\n\n#### 7.3、自动生成的Mapper.xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.mybatis.dao.EmployeeMapper\">\n\t<resultMap id=\"BaseResultMap\" type=\"com.mybatis.bean.Employee\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\t<id column=\"id\" property=\"id\" jdbcType=\"INTEGER\" />\n\t\t<result column=\"last_name\" property=\"lastName\" jdbcType=\"VARCHAR\" />\n\t\t<result column=\"password\" property=\"password\" jdbcType=\"VARCHAR\" />\n\t\t<result column=\"email\" property=\"email\" jdbcType=\"VARCHAR\" />\n\t\t<result column=\"depart_id\" property=\"departId\" jdbcType=\"INTEGER\" />\n\t</resultMap>\n\t<sql id=\"Example_Where_Clause\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\t<where>\n\t\t\t<foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\">\n\t\t\t\t<if test=\"criteria.valid\">\n\t\t\t\t\t<trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\">\n\t\t\t\t\t\t<foreach collection=\"criteria.criteria\" item=\"criterion\">\n\t\t\t\t\t\t\t<choose>\n\t\t\t\t\t\t\t\t<when test=\"criterion.noValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.singleValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition} #{criterion.value}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.betweenValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition} #{criterion.value}\n\t\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\t\t#{criterion.secondValue}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.listValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition}\n\t\t\t\t\t\t\t\t\t<foreach collection=\"criterion.value\" item=\"listItem\"\n\t\t\t\t\t\t\t\t\t\topen=\"(\" close=\")\" separator=\",\">\n\t\t\t\t\t\t\t\t\t\t#{listItem}\n\t\t\t\t\t\t\t\t\t</foreach>\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t</choose>\n\t\t\t\t\t\t</foreach>\n\t\t\t\t\t</trim>\n\t\t\t\t</if>\n\t\t\t</foreach>\n\t\t</where>\n\t</sql>\n\t<sql id=\"Update_By_Example_Where_Clause\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\t<where>\n\t\t\t<foreach collection=\"example.oredCriteria\" item=\"criteria\"\n\t\t\t\tseparator=\"or\">\n\t\t\t\t<if test=\"criteria.valid\">\n\t\t\t\t\t<trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\">\n\t\t\t\t\t\t<foreach collection=\"criteria.criteria\" item=\"criterion\">\n\t\t\t\t\t\t\t<choose>\n\t\t\t\t\t\t\t\t<when test=\"criterion.noValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.singleValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition} #{criterion.value}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.betweenValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition} #{criterion.value}\n\t\t\t\t\t\t\t\t\tand\n\t\t\t\t\t\t\t\t\t#{criterion.secondValue}\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t\t<when test=\"criterion.listValue\">\n\t\t\t\t\t\t\t\t\tand ${criterion.condition}\n\t\t\t\t\t\t\t\t\t<foreach collection=\"criterion.value\" item=\"listItem\"\n\t\t\t\t\t\t\t\t\t\topen=\"(\" close=\")\" separator=\",\">\n\t\t\t\t\t\t\t\t\t\t#{listItem}\n\t\t\t\t\t\t\t\t\t</foreach>\n\t\t\t\t\t\t\t\t</when>\n\t\t\t\t\t\t\t</choose>\n\t\t\t\t\t\t</foreach>\n\t\t\t\t\t</trim>\n\t\t\t\t</if>\n\t\t\t</foreach>\n\t\t</where>\n\t</sql>\n\t<sql id=\"Base_Column_List\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tid, last_name, password, email, depart_id\n\t</sql>\n\t<select id=\"selectByExample\" resultMap=\"BaseResultMap\"\n\t\tparameterType=\"com.mybatis.bean.EmployeeExample\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tselect\n\t\t<if test=\"distinct\">\n\t\t\tdistinct\n\t\t</if>\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom employee\n\t\t<if test=\"_parameter != null\">\n\t\t\t<include refid=\"Example_Where_Clause\" />\n\t\t</if>\n\t\t<if test=\"orderByClause != null\">\n\t\t\torder by ${orderByClause}\n\t\t</if>\n\t</select>\n\t<select id=\"selectByPrimaryKey\" resultMap=\"BaseResultMap\"\n\t\tparameterType=\"java.lang.Integer\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tselect\n\t\t<include refid=\"Base_Column_List\" />\n\t\tfrom employee\n\t\twhere id = #{id,jdbcType=INTEGER}\n\t</select>\n\t<delete id=\"deleteByPrimaryKey\" parameterType=\"java.lang.Integer\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tdelete from employee\n\t\twhere id = #{id,jdbcType=INTEGER}\n\t</delete>\n\t<delete id=\"deleteByExample\" parameterType=\"com.mybatis.bean.EmployeeExample\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tdelete from employee\n\t\t<if test=\"_parameter != null\">\n\t\t\t<include refid=\"Example_Where_Clause\" />\n\t\t</if>\n\t</delete>\n\t<insert id=\"insert\" parameterType=\"com.mybatis.bean.Employee\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tinsert into employee (id, last_name, password,\n\t\temail, depart_id)\n\t\tvalues\n\t\t(#{id,jdbcType=INTEGER}, #{lastName,jdbcType=VARCHAR},\n\t\t#{password,jdbcType=VARCHAR},\n\t\t#{email,jdbcType=VARCHAR},\n\t\t#{departId,jdbcType=INTEGER})\n\t</insert>\n\t<insert id=\"insertSelective\" parameterType=\"com.mybatis.bean.Employee\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tinsert into employee\n\t\t<trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n\t\t\t<if test=\"id != null\">\n\t\t\t\tid,\n\t\t\t</if>\n\t\t\t<if test=\"lastName != null\">\n\t\t\t\tlast_name,\n\t\t\t</if>\n\t\t\t<if test=\"password != null\">\n\t\t\t\tpassword,\n\t\t\t</if>\n\t\t\t<if test=\"email != null\">\n\t\t\t\temail,\n\t\t\t</if>\n\t\t\t<if test=\"departId != null\">\n\t\t\t\tdepart_id,\n\t\t\t</if>\n\t\t</trim>\n\t\t<trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n\t\t\t<if test=\"id != null\">\n\t\t\t\t#{id,jdbcType=INTEGER},\n\t\t\t</if>\n\t\t\t<if test=\"lastName != null\">\n\t\t\t\t#{lastName,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"password != null\">\n\t\t\t\t#{password,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"email != null\">\n\t\t\t\t#{email,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"departId != null\">\n\t\t\t\t#{departId,jdbcType=INTEGER},\n\t\t\t</if>\n\t\t</trim>\n\t</insert>\n\t<select id=\"countByExample\" parameterType=\"com.mybatis.bean.EmployeeExample\"\n\t\tresultType=\"java.lang.Integer\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tselect count(*) from employee\n\t\t<if test=\"_parameter != null\">\n\t\t\t<include refid=\"Example_Where_Clause\" />\n\t\t</if>\n\t</select>\n\t<update id=\"updateByExampleSelective\" parameterType=\"map\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tupdate employee\n\t\t<set>\n\t\t\t<if test=\"record.id != null\">\n\t\t\t\tid = #{record.id,jdbcType=INTEGER},\n\t\t\t</if>\n\t\t\t<if test=\"record.lastName != null\">\n\t\t\t\tlast_name = #{record.lastName,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"record.password != null\">\n\t\t\t\tpassword = #{record.password,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"record.email != null\">\n\t\t\t\temail = #{record.email,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"record.departId != null\">\n\t\t\t\tdepart_id = #{record.departId,jdbcType=INTEGER},\n\t\t\t</if>\n\t\t</set>\n\t\t<if test=\"_parameter != null\">\n\t\t\t<include refid=\"Update_By_Example_Where_Clause\" />\n\t\t</if>\n\t</update>\n\t<update id=\"updateByExample\" parameterType=\"map\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tupdate employee\n\t\tset id = #{record.id,jdbcType=INTEGER},\n\t\tlast_name =\n\t\t#{record.lastName,jdbcType=VARCHAR},\n\t\tpassword =\n\t\t#{record.password,jdbcType=VARCHAR},\n\t\temail =\n\t\t#{record.email,jdbcType=VARCHAR},\n\t\tdepart_id =\n\t\t#{record.departId,jdbcType=INTEGER}\n\t\t<if test=\"_parameter != null\">\n\t\t\t<include refid=\"Update_By_Example_Where_Clause\" />\n\t\t</if>\n\t</update>\n\t<update id=\"updateByPrimaryKeySelective\" parameterType=\"com.mybatis.bean.Employee\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tupdate employee\n\t\t<set>\n\t\t\t<if test=\"lastName != null\">\n\t\t\t\tlast_name = #{lastName,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"password != null\">\n\t\t\t\tpassword = #{password,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"email != null\">\n\t\t\t\temail = #{email,jdbcType=VARCHAR},\n\t\t\t</if>\n\t\t\t<if test=\"departId != null\">\n\t\t\t\tdepart_id = #{departId,jdbcType=INTEGER},\n\t\t\t</if>\n\t\t</set>\n\t\twhere id = #{id,jdbcType=INTEGER}\n\t</update>\n\t<update id=\"updateByPrimaryKey\" parameterType=\"com.mybatis.bean.Employee\">\n\t\t<!-- WARNING - @mbggenerated This element is automatically generated by \n\t\t\tMyBatis Generator, do not modify. This element was generated on Tue Aug 13 \n\t\t\t21:49:23 CST 2019. -->\n\t\tupdate employee\n\t\tset last_name = #{lastName,jdbcType=VARCHAR},\n\t\tpassword =\n\t\t#{password,jdbcType=VARCHAR},\n\t\temail = #{email,jdbcType=VARCHAR},\n\t\tdepart_id = #{departId,jdbcType=INTEGER}\n\t\twhere id =\n\t\t#{id,jdbcType=INTEGER}\n\t</update>\n</mapper>\n```\n\n### 8、mybatis工作原理\n\n","tags":["MyBatis"],"categories":["MyBatis"]},{"title":"Redis基础","url":"%2F2019%2F07%2F22%2FRedis%E5%9F%BA%E7%A1%80.html","content":"\nRedis：Remote Dictionary Server(远程字典服务器)，作为基于键值对的NoSQL数据库，具有高性能、丰富的数据结构、持久化、高可用、分布式等特性，同时Redis非常稳定。\n\n<!--more-->\n\n### 1、Redis基础\n\n#### 1.1、安装\n\nRedis：Remote Dictionary Server(远程字典服务器)\n\n#### 1.2、配置\n\n### 2、命令\n\n- 启动Redis\n\n```shell\n[root@VM_0_15_centos ~]# redis-server\n```\n\n- 连接Redis\n\n```shell\n[root@VM_0_15_centos ~]# redis-cli\n127.0.0.1:6379>\n127.0.0.1:6379> PING\nPONG\n\n```\n\n执行**PING**命令，检查redis服务是否启动。\n\n- 远程服务\n\n```shell\n[root@VM_0_15_centos ~]# redis-cli -h host -p port -a password\n```\n\nport为端口号，password为redis服务的密码。\n\nRedis命令参考：<http://redisdoc.com/>\n\n### 3、键（key）\n\nRdis keys命令\n\n基本命令：<https://www.runoob.com/redis/redis-keys.html>\n\n常用命令：\n\n| 序号 | 命令               | 描述                                    |\n| ---- | ------------------ | --------------------------------------- |\n| 1    | DUMP key           | 序列化给定 key ，并返回被序列化的值     |\n| 2    | keys *             | 查看所有的key                           |\n| 3    | DEL key            | 在key存在时删除key                      |\n| 4    | EXISTS key         | 检查key是否存在                         |\n| 5    | EXPIRE key seconds | 设置key的过去时间（秒）                 |\n| 6    | PTTL key           | 返回 key 的剩余的过期时间（毫秒）       |\n| 7    | MOVE key db        | 将当前数据库的 key 移动到给定的数据库db |\n| 8    | TYPE key           | 查看key对应value的数据类型              |\n\n\n\n### 4、字符串（String）\n\nRedis String命令\n\n基本命令：<https://www.runoob.com/redis/redis-strings.html>\n\n常用命令：\n\n| 序号 | 命令                                      | 描述                                            |\n| ---- | ----------------------------------------- | ----------------------------------------------- |\n| 1    | SET/GET key                               | 设置/获取key的值                                |\n| 2    | APPEND key value                          | 追加value到key的末尾                            |\n| 3    | STRLEN key                                | 返回字符串长度                                  |\n| 4    | INCR/DECR key                             | vlaue增/减1，一定为数字                         |\n| 5    | INCRBY/DECRBY key increment               | vlaue增/减increment，一定为数字                 |\n| 6    | GETSRANGE/SETRANGE key  start end (value) | 设置/获取范围中的value                          |\n| 7    | SETEX key seconds value                   | key 的过期时间设为 seconds（秒）                |\n| 8    | SETNX key value                           | 只有在 key 不存在时设置 key 的值                |\n| 9    | MSET key value [key value ...]            | 设置多个key-value                               |\n| 10   | MGET key [key ...]                        | 获取多个value                                   |\n| 11   | MSETNX key value [key value ...]          | 只有在 key 不存在时设置 多个key 的值            |\n| 12   | GETSET key value                          | key 的值设为 value ，返回 key 的旧值(old value) |\n\n说明：\n\n- SET key value如果key存在，则覆盖原来的key-value\n- MSETNX key value [key value ...]，只要有存在的key，则全部设置不成功\n\n### 5、列表（List）\n\nRedis List命令\n\n基本命令：<https://www.runoob.com/redis/redis-hashes.html>\n\n常用命令：\n\n| 序号 | 命令                                 | 描述                                                         |\n| ---- | ------------------------------------ | ------------------------------------------------------------ |\n| 1    | LPUSH/RPUSH                          | 在列表中加入值                                               |\n| 2    | LRANGE key start stop                | 获取列表中范围内的元素                                       |\n| 3    | LPOP/RPOP key                        | pop出列表中的第一/最后一个值                                 |\n| 4    | LINDEX key index                     | 索引获取列表中的元素                                         |\n| 5    | LLEN key                             | 获取列表长度                                                 |\n| 6    | LREM key count value                 | 移除列表元素conut value                                      |\n| 7    | LTRIM key start stop                 | 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。 |\n| 8    | RPOPLPUSH source destination         | 移除列表的最后一个元素，并将该元素添加到另一个列表并返回     |\n| 9    | LSET key index value                 | 通过索引设置列表元素的值                                     |\n| 10   | LINSERT key BEFORE/AFTER pivot value | 在列表的元素前或者后插入元素                                 |\n\n### 6、哈希（Hash）\n\nRedis Hash命令\n\n基本命令：https://www.runoob.com/redis/redis-hashes.html\n\n常用命令：\n\n| 序号 | 命令                             | 描述                                   |\n| ---- | -------------------------------- | -------------------------------------- |\n| 1    | HSET/HGET key field value        | 设置/获取哈希表key中的字段field为value |\n| 2    | HMSET/HMGET key                  | 设置/获取哈希表key中多个字段           |\n| 3    | HVALS key                        | 获取哈希表中所有值                     |\n| 4    | HDEL key field [field ...]       | 删除key中的字段                        |\n| 5    | HLEN key                         | 获取哈希表中字段的数量                 |\n| 6    | HEXISTS key field                | 查看哈希表 key 中，指定的字段是否存在  |\n| 7    | HKEYS/HVALS key                  | 获取所有的字段名/值                    |\n| 8    | HINCRBY key field increment      | 字段值增加整数increment                |\n| 9    | HINCRBYFLOAT key field increment | 字段值增加浮点increment                |\n| 10   | HSETNX key field value           | 只有字段field不存在时，设置字段的值    |\n\nk-v模式不变，v是一个键值对\n\n### 7、集合（Set）\n\nRedis Set命令\n\n基本命令：https://www.runoob.com/redis/redis-sets.html\n\n常用命令：\n\n| 序号 | 命令                            | 描述                                                |\n| ---- | ------------------------------- | --------------------------------------------------- |\n| 1    | SADD key member [member ...]    | 添加一个或多个成员                                  |\n| 2    | SMEMBERS key                    | 返回集合中的所有成员                                |\n| 3    | SISMEMBER key member            | 判断元素是否在集合中                                |\n| 4    | SCARD key                       | 返回集合中的元素个数                                |\n| 5    | SREM key member [member ...]    | 移除集合中一个或多个元素                            |\n| 6    | SRANDMEMBER key [count]         | 返回集合中一个或多个随机数                          |\n| 7    | SPOP key [count]                | 移除并返回集合中的一个或多个随机元素                |\n| 8    | SMOVE source destination member | 将 member 元素从 source 集合移动到 destination 集合 |\n| 9    | SDIFF key [key ...]             | 差集                                                |\n| 10   | SINTER key [key ...]            | 交集                                                |\n| 11   | SUNION key [key ...]            | 并集                                                |\n\n### 8、有序集合Zset（Sorted Set）\n\n在set的基础上，加上一个score值，zset：key score1 value1 score2 value2......\n\nRedis Sorted Set命令\n\n基本命令：https://www.runoob.com/redis/redis-sorted-sets.html\n\n常用命令：\n\n| 序号 | 命令                                                         | 描述                                                         |\n| ---- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 1    | ZADD/ZRANGE                                                  | 增添/查询，withscores查询出score                             |\n| 2    | ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]  | 查询从min到max，‘（’不包含，                                 |\n| 3    | ZRANGE key start stop [WITHSCORES]                           | 移除有序集合中的一个或多个成员                               |\n| 4    | ZCARD/ZCOUNT key [min max]                                   | 获取有序集合的成员数                                         |\n| 5    | ZSCORE key member                                            | 返回有序集中，成员的分数值                                   |\n| 6    | ZREVRANK key member                                          | 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 |\n| 7    | ZREVRANGE key start stop [WITHSCORES]                        | 逆序返回                                                     |\n| 8    | ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count] | 返回有序集中指定分数区间内的成员，分数从高到低排序           |\n\n说明：  ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]，withscores：查询出带有score，‘（’：不包含，LIMIT offset count返回限制。\n\n```shell\n127.0.0.1:6379> ZRANGE zset 0 -1\n1) \"v1\"\n2) \"v2\"\n3) \"v3\"\n4) \"v4\"\n5) \"v5\"\n127.0.0.1:6379> ZRANGE zset 0 -1 WITHSCORES\n 1) \"v1\"\n 2) \"1\"\n 3) \"v2\"\n 4) \"2\"\n 5) \"v3\"\n 6) \"3\"\n 7) \"v4\"\n 8) \"4\"\n 9) \"v5\"\n10) \"5\"\n127.0.0.1:6379> ZRANGEBYSCORE zset (0 (5\n1) \"v1\"\n2) \"v2\"\n3) \"v3\"\n4) \"v4\"\n127.0.0.1:6379> ZRANGEBYSCORE zset 0 5 LIMIT 2 2\n1) \"v3\"\n2) \"v4\"\n```\n\n### 9、解析配置文件\n\n#### 9.1、Redis配置\n\nRedis的配置文件在Redis的安装目录下，文件名为redis.conf(windows上：redis.windows.conf)\n\n- 获取配置项\n\n```shell\nCONFIG GET 配置项名\n```\n\n- 获取所有配置项\n\n```shell\nCONFIG GET *\n```\n\n```shel\n127.0.0.1:6379> CONFIG GET *\n  1) \"dbfilename\"\n  2) \"dump.rdb\"\n  3) \"requirepass\"\n  4) \"\"\n  5) \"masterauth\"\n  6) \"\"\n  7) \"cluster-announce-ip\"\n  8) \"\"\n  9) \"unixsocket\"\n 10) \"\"\n 11) \"logfile\"\n 12) \"\"\n 13) \"pidfile\"\n 14) \"\"\n 15) \"slave-announce-ip\"\n 16) \"\"\n 17) \"replica-announce-ip\"\n 18) \"\"\n 19) \"maxmemory\"\n 20) \"0\"\n 21) \"proto-max-bulk-len\"\n 22) \"536870912\"\n 23) \"client-query-buffer-limit\"\n 24) \"1073741824\"\n 25) \"maxmemory-samples\"\n 26) \"5\"\n 27) \"lfu-log-factor\"\n 28) \"10\"\n 29) \"lfu-decay-time\"\n 30) \"1\"\n 31) \"timeout\"\n 32) \"0\"\n 33) \"active-defrag-threshold-lower\"\n 34) \"10\"\n 35) \"active-defrag-threshold-upper\"\n 36) \"100\"\n 37) \"active-defrag-ignore-bytes\"\n 38) \"104857600\"\n 39) \"active-defrag-cycle-min\"\n 40) \"5\"\n 41) \"active-defrag-cycle-max\"\n 42) \"75\"\n 43) \"active-defrag-max-scan-fields\"\n 44) \"1000\"\n 45) \"auto-aof-rewrite-percentage\"\n 46) \"100\"\n 47) \"auto-aof-rewrite-min-size\"\n 48) \"67108864\"\n 49) \"hash-max-ziplist-entries\"\n 50) \"512\"\n 51) \"hash-max-ziplist-value\"\n 52) \"64\"\n 53) \"stream-node-max-bytes\"\n 54) \"4096\"\n 55) \"stream-node-max-entries\"\n 56) \"100\"\n 57) \"list-max-ziplist-size\"\n 58) \"-2\"\n 59) \"list-compress-depth\"\n 60) \"0\"\n 61) \"set-max-intset-entries\"\n 62) \"512\"\n 63) \"zset-max-ziplist-entries\"\n 64) \"128\"\n 65) \"zset-max-ziplist-value\"\n 66) \"64\"\n 67) \"hll-sparse-max-bytes\"\n 68) \"3000\"\n 69) \"lua-time-limit\"\n 70) \"5000\"\n 71) \"slowlog-log-slower-than\"\n 72) \"10000\"\n 73) \"latency-monitor-threshold\"\n 74) \"0\"\n 75) \"slowlog-max-len\"\n 76) \"128\"\n 77) \"port\"\n 78) \"6379\"\n 79) \"cluster-announce-port\"\n 80) \"0\"\n 81) \"cluster-announce-bus-port\"\n 82) \"0\"\n 83) \"tcp-backlog\"\n 84) \"511\"\n 85) \"databases\"\n 86) \"16\"\n 87) \"repl-ping-slave-period\"\n 88) \"10\"\n 89) \"repl-ping-replica-period\"\n 90) \"10\"\n 91) \"repl-timeout\"\n 92) \"60\"\n 93) \"repl-backlog-size\"\n 94) \"1048576\"\n 95) \"repl-backlog-ttl\"\n 96) \"3600\"\n 97) \"maxclients\"\n 98) \"10000\"\n 99) \"watchdog-period\"\n100) \"0\"\n101) \"slave-priority\"\n102) \"100\"\n103) \"replica-priority\"\n104) \"100\"\n105) \"slave-announce-port\"\n106) \"0\"\n107) \"replica-announce-port\"\n108) \"0\"\n109) \"min-slaves-to-write\"\n110) \"0\"\n111) \"min-replicas-to-write\"\n112) \"0\"\n113) \"min-slaves-max-lag\"\n114) \"10\"\n115) \"min-replicas-max-lag\"\n116) \"10\"\n117) \"hz\"\n118) \"10\"\n119) \"cluster-node-timeout\"\n120) \"15000\"\n121) \"cluster-migration-barrier\"\n122) \"1\"\n123) \"cluster-slave-validity-factor\"\n124) \"10\"\n125) \"cluster-replica-validity-factor\"\n126) \"10\"\n127) \"repl-diskless-sync-delay\"\n128) \"5\"\n129) \"tcp-keepalive\"\n130) \"300\"\n131) \"cluster-require-full-coverage\"\n132) \"yes\"\n133) \"cluster-slave-no-failover\"\n134) \"no\"\n135) \"cluster-replica-no-failover\"\n136) \"no\"\n137) \"no-appendfsync-on-rewrite\"\n138) \"no\"\n139) \"slave-serve-stale-data\"\n140) \"yes\"\n141) \"replica-serve-stale-data\"\n142) \"yes\"\n143) \"slave-read-only\"\n144) \"yes\"\n145) \"replica-read-only\"\n146) \"yes\"\n147) \"slave-ignore-maxmemory\"\n148) \"yes\"\n149) \"replica-ignore-maxmemory\"\n150) \"yes\"\n151) \"stop-writes-on-bgsave-error\"\n152) \"yes\"\n153) \"daemonize\"\n154) \"no\"\n155) \"rdbcompression\"\n156) \"yes\"\n157) \"rdbchecksum\"\n158) \"yes\"\n159) \"activerehashing\"\n160) \"yes\"\n161) \"activedefrag\"\n162) \"no\"\n163) \"protected-mode\"\n164) \"yes\"\n165) \"repl-disable-tcp-nodelay\"\n166) \"no\"\n167) \"repl-diskless-sync\"\n168) \"no\"\n169) \"aof-rewrite-incremental-fsync\"\n170) \"yes\"\n171) \"rdb-save-incremental-fsync\"\n172) \"yes\"\n173) \"aof-load-truncated\"\n174) \"yes\"\n175) \"aof-use-rdb-preamble\"\n176) \"yes\"\n177) \"lazyfree-lazy-eviction\"\n178) \"no\"\n179) \"lazyfree-lazy-expire\"\n180) \"no\"\n181) \"lazyfree-lazy-server-del\"\n182) \"no\"\n183) \"slave-lazy-flush\"\n184) \"no\"\n185) \"replica-lazy-flush\"\n186) \"no\"\n187) \"dynamic-hz\"\n188) \"yes\"\n189) \"maxmemory-policy\"\n190) \"noeviction\"\n191) \"loglevel\"\n192) \"notice\"\n193) \"supervised\"\n194) \"no\"\n195) \"appendfsync\"\n196) \"everysec\"\n197) \"syslog-facility\"\n198) \"local0\"\n199) \"appendonly\"\n200) \"no\"\n201) \"dir\"\n202) \"/usr/local/redis/bin\"\n203) \"save\"\n204) \"3600 1 300 100 60 10000\"\n205) \"client-output-buffer-limit\"\n206) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n207) \"unixsocketperm\"\n208) \"0\"\n209) \"slaveof\"\n210) \"\"\n211) \"notify-keyspace-events\"\n212) \"\"\n213) \"bind\"\n214) \"\"\n```\n\n- 修改配置项\n\n```shell\nCONFIG SET 配置项名 属性\n```\n\n当然有些配置需要在配置文件中修改才会生效，保存\n\n#### 9.2、配置文件详解\n\n文件来自：https://www.cnblogs.com/zhang-ke/p/5981108.html\n\n```shell\n#redis.conf\n# Redis configuration file example.\n# ./redis-server /path/to/redis.conf\n\n################################## INCLUDES ###################################\n#这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。\n# include /path/to/local.conf\n# include /path/to/other.conf\n\n################################ GENERAL #####################################\n\n#是否在后台执行，yes：后台运行；no：不是后台运行（老版本默认）\ndaemonize yes\n\n  #3.2里的参数，是否开启保护模式，默认开启。要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。要是开启了密码   和bind，可以开启。否   则最好关闭，设置为no。\n  protected-mode yes\n#redis的进程文件\npidfile /var/run/redis/redis-server.pid\n\n#redis监听的端口号。\nport 6379\n\n#此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。\ntcp-backlog 511\n\n#指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求\nbind 127.0.0.1\n\n#配置unix socket来让redis支持监听本地连接。\n# unixsocket /var/run/redis/redis.sock\n#配置unix socket使用文件的权限\n# unixsocketperm 700\n\n# 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。\ntimeout 0\n\n#tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。\ntcp-keepalive 0\n\n#指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）\nloglevel notice\n\n#指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。\nlogfile /var/log/redis/redis-server.log\n\n#是否打开记录syslog功能\n# syslog-enabled no\n\n#syslog的标识符。\n# syslog-ident redis\n\n#日志的来源、设备\n# syslog-facility local0\n\n#数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db\ndatabases 16\n\n################################ SNAPSHOTTING ################################\n# 快照配置\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 设置sedis进行数据库镜像的频率。\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n\n#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误\nstop-writes-on-bgsave-error yes\n\n#使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n\n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n\n#rdb文件的名称\ndbfilename dump.rdb\n\n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /var/lib/redis\n\n################################# REPLICATION #################################\n#复制选项，slave复制对应的master。\n# slaveof <masterip> <masterport>\n\n#如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。\n# masterauth <master-password>\n\n#当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master in progress”。\nslave-serve-stale-data yes\n\n#作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。\nslave-read-only yes\n\n#是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。\nrepl-diskless-sync no\n\n#diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。\nrepl-diskless-sync-delay 5\n\n#slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。\n# repl-ping-slave-period 10\n\n#复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。\n# repl-timeout 60\n\n#是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。\nrepl-disable-tcp-nodelay no\n\n#复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。\n# repl-backlog-size 5mb\n\n#master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。\n# repl-backlog-ttl 3600\n\n#当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。\nslave-priority 100\n\n#redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。\n# min-slaves-to-write 3\n\n#延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。\n# min-slaves-max-lag 10\n\n# 设置1或另一个设置为0禁用这个特性。\n# Setting one or the other to 0 disables the feature.\n# By default min-slaves-to-write is set to 0 (feature disabled) and\n# min-slaves-max-lag is set to 10.\n\n################################## SECURITY ###################################\n#requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。\n# requirepass foobared\n\n#把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n\n#设置成一个空的值，可以禁止一个命令\n# rename-command CONFIG \"\"\n################################### LIMITS ####################################\n\n# 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。\n# maxclients 10000\n\n#redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。\n# maxmemory <bytes>\n\n#内存容量超过maxmemory后的处理策略。\n#volatile-lru：利用LRU算法移除设置过过期时间的key。\n#volatile-random：随机移除设置过过期时间的key。\n#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）\n#allkeys-lru：利用LRU算法移除任何key。\n#allkeys-random：随机移除任何key。\n#noeviction：不移除任何key，只是返回一个写错误。\n#上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。\n# maxmemory-policy noeviction\n\n#lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。\n# maxmemory-samples 5\n\n############################## APPEND ONLY MODE ###############################\n#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。\nappendonly no\n\n#aof文件名\nappendfilename \"appendonly.aof\"\n\n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n\n# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。\nno-appendfsync-on-rewrite no\n\n#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n\n#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。\naof-load-truncated yes\n\n################################ LUA SCRIPTING ###############################\n# 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。\nlua-time-limit 5000\n\n################################ REDIS CLUSTER ###############################\n#集群开关，默认是不开启集群模式。\n# cluster-enabled yes\n\n#集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突\n# cluster-config-file nodes-6379.conf\n\n#节点互连超时的阀值。集群节点超时毫秒数\n# cluster-node-timeout 15000\n\n#在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：\n#比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period\n#如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 \n# cluster-slave-validity-factor 10\n\n#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。\n# cluster-migration-barrier 1\n\n#默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。\n# cluster-require-full-coverage yes\n\n################################## SLOW LOG ###################################\n###slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。\n#执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。\nslowlog-log-slower-than 10000\n\n#慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。\nslowlog-max-len 128\n\n################################ LATENCY MONITOR ##############################\n#延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。\nlatency-monitor-threshold 0\n\n############################# EVENT NOTIFICATION ##############################\n#键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。\n#notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：\n##K 键空间通知，所有通知以 __keyspace@__ 为前缀\n##E 键事件通知，所有通知以 __keyevent@__ 为前缀\n##g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知\n##$ 字符串命令的通知\n##l 列表命令的通知\n##s 集合命令的通知\n##h 哈希命令的通知\n##z 有序集合命令的通知\n##x 过期事件：每当有过期键被删除时发送\n##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送\n##A 参数 g$lshzxe 的别名\n#输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications\n\nnotify-keyspace-events \"\"\n\n############################### ADVANCED CONFIG ###############################\n#数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash\nhash-max-ziplist-entries 512\n#value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。\nhash-max-ziplist-value 64\n\n#数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。\nlist-max-ziplist-entries 512\n#value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。\nlist-max-ziplist-value 64\n\n#数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。\nset-max-intset-entries 512\n\n#数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。\nzset-max-ziplist-entries 128\n#value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。\nzset-max-ziplist-value 64\n\n#value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。\nhll-sparse-max-bytes 3000\n\n#Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。\nactiverehashing yes\n\n##对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。\n#对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。\nclient-output-buffer-limit normal 0 0 0\n#对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit slave 256mb 64mb 60\n#对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n#redis执行任务的频率为1s除以hz。\nhz 10\n\n#在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。\naof-rewrite-incremental-fsync yes\n```\n\ntcp-keepalive：如果设置为0，则不会进行keepalive检查，建议设置为60，单位为秒。\n\nloglevel：指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice\n\n### 10、Redis的持久化\n\n- RDB(Redis DataBase)\n\n在指定的时间间隔内将内存中的数据集快照写入磁盘，（Snapshot快照），它恢复时将快照文件直接读入到内存里。\n\nRedis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化进程都结束了，再用这个临时文件替代上次持久化的文件。整个过程中，主进程是不进行任何IO操作的，这就保证了极高的性能。如需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，南无RDB方式要比AOF方式更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。\n\nFork的作用时复制一个与当前一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）数值都和原来进程一致，但是是一个全新的进程，并作为原进程的子进程。\n\nRDB保存的是dump.rdb文件\n\nSNAPSHOTTING快照：\n\n```shell\n################################ SNAPSHOTTING ################################\n# 快照配置\n# 注释掉“save”这一行配置项就可以让保存数据库功能失效\n# 设置sedis进行数据库镜像的频率。\n# 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） \n# 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） \n# 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）\nsave 900 1\nsave 300 10\nsave 60 10000\n\n#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误\nstop-writes-on-bgsave-error yes\n\n#使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间\nrdbcompression yes\n\n#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。\nrdbchecksum yes\n\n#rdb文件的名称\ndbfilename dump.rdb\n\n#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录\ndir /var/lib/redis\n```\n\nSHUTDOWN：关闭连接，redis迅速生成dump.rdb，一般需要备份好dump.rdb文件。cp dump.rdb dump_new.rdb(一般在不同机器)\n\nsave/bgsave：迅速备份，save只管保存，其他不管，全部阻塞。bgsave在后台异步进行快照操作，快照同时还可以响应客服请求，可以通过lastsave命令获取最后一次成功执行快照的时间。\n\nflushall：也会产生dump.rdb，但是为空，所以说。。。\n\n\n\n- AOF(Append Only File)\n\n以日志文件来记录每一个操作，将Redis执行过得所有写的指令记下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，也就是：redis重启的话就根据日志文件内容将写指令从前到后执行一次以完成数据的恢复工作。\n\n```shell\n############################## APPEND ONLY MODE ###############################\n#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。no不表示不使用，改为yes打开aof持久化\nappendonly no\n\n#aof文件名\nappendfilename \"appendonly.aof\"\n\n#aof持久化策略的配置\n#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。\n#always表示每次写入都执行fsync，以保证数据同步到磁盘。\n#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。\nappendfsync everysec\n\n# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。\nno-appendfsync-on-rewrite no\n\n#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。\nauto-aof-rewrite-percentage 100\n#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写\nauto-aof-rewrite-min-size 64mb\n\n#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。\naof-load-truncated yes\n```\n\nappendonly.aof与dump.rdb可以同时存在，优先选择appendonly.aof\n\n修复：当写入突然断网，大量数据，appendonly.aof出现错误，redis无法启动，可以使用redis-check-aof检查appendonly.aof，会去掉不符合语法部分。再次重新启动。\n\nRewrite：AOF采用文件追加方式，文件会越来越大，于是新增了重写机制，当AOF文件的大小超过所设置的阈值时，Redis就会自动启动AOF文件的内容压缩，只保留可以恢复数据的最小指令，可以使用bgrewriteaof。\n\n重写原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后在rename），遍历新进程的内存中的数据，每条记录有一条set语句，重写aof文件操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容命令的方式重写了一个新的aof文件，与快照类似。\n\n触发机制：Redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大于64M时触发。\n\n### 11、Redis的事务\n\n#### 11.1、事务介绍\n\nRedis中的事务(transaction)是一组命令的集合。事务同命令一样都是Redis最小的执行单位，一个事务中的命令要么都执行，要么都不执行。\n\n一个队列中，一次性执行，按照顺序，有顺序，排他性的执行一系列命令。\n\n| 序号 | 命令                | 描述                                                         |\n| ---- | ------------------- | ------------------------------------------------------------ |\n| 1    | MULTI               | 标记事务开始                                                 |\n| 2    | EXEC                | 执行所有事务块内的命令                                       |\n| 3    | DISCARD             | 取消事务，放弃执行事务块内的所有命令                         |\n| 4    | UNWATCH             | 取消 WATCH 命令对所有 key 的监视                             |\n| 5    | WATCH key [key ...] | 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断 |\n\n#### 11.2、Redis事务错误处理\n\n- 语法错误\n\n```shell\n127.0.0.1:6379> MULTI\nOK\n127.0.0.1:6379> set k3 v3\nQUEUED\n127.0.0.1:6379> set k4 v4\nQUEUED\n127.0.0.1:6379> sett k5 v5\n(error) ERR unknown command `sett`, with args beginning with: `k5`, `v5`, \n127.0.0.1:6379> EXEC\n(error) EXECABORT Transaction discarded because of previous errors.\n127.0.0.1:6379> keys *\n1) \"k2\"\n2) \"k1\"\n127.0.0.1:6379> get k3\n(nil)\n127.0.0.1:6379> \n```\n\n错误的命令导致事务中的其他命令都不执行了，可见事务中的所有命令式同呼吸共命运的。如果客户端在发送EXEC命令之前断线了，则服务器会清空事务队列，事务中的所有命令都不会被执行。而一旦客户端发送了EXEC命令之后，事务中的所有命令都会被执行，即使此后客户端断线也没关系，因为服务器已经保存了事务中的所有命令。\n\n- 运行错误\n\n```shell\n127.0.0.1:6379> MULTI\nOK\n127.0.0.1:6379> set k3 v3\nQUEUED\n127.0.0.1:6379> INCR k1\nQUEUED\n127.0.0.1:6379> set k4 v4\nQUEUED\n127.0.0.1:6379> EXEC\n1) OK\n2) (error) ERR value is not an integer or out of range\n3) OK\n127.0.0.1:6379> keys *\n1) \"k4\"\n2) \"k2\"\n3) \"k3\"\n4) \"k1\"\n127.0.0.1:6379> get k3\n\"v3\"\n127.0.0.1:6379> get k4\n\"v4\"\n127.0.0.1:6379> \n```\n\n运行错误在命令执行之前Redis是无法发现的，所以在事务里这样的命令会被Redis接受并执行。如果事务里有一条命令执行错误，其他命令依旧会执行（包括出错之后的命令）。\n\n悲观锁\n\n乐观锁\n\n一旦执行了EXEC，之前加的监控锁都会被取消。\n\n### 12、Redis的发布与订阅\n\n进程间的一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。消息中间件一般不使用redis，了解了解。\n\n常用命令：\n\n| 序号 | 命令                                       | 描述                             |\n| ---- | ------------------------------------------ | -------------------------------- |\n| 1    | SUBSCRIBE channel [channel ...]            | 订阅给定的一个或多个频道的信息   |\n| 2    | PSUBSCRIBE pattern [pattern ...]           | 订阅一个或多个符合给定模式的频道 |\n| 3    | PUBSUB subcommand [argument [argument ...] | 查看订阅与发布系统状态           |\n| 4    | PUBLISH channel message                    | 将信息发送到指定的频道           |\n| 5    | PUNSUBSCRIBE [pattern [pattern ...]        | 退订所有给定模式的频道           |\n| 6    | UNSUBSCRIBE [channel [channel ...]         | 指退订给定的频道                 |\n\n```shell\nPSUBSCRIBE new*  #可以使用通配符，类似正则表达式\n```\n\n### 13、Redis的复制\n\n主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slaver以读为主。\n\n#### 13.1、配置\n\n- 配从（库）不配主（库）\n\n### 14、客户端\n\n","tags":["Redis"],"categories":["Redis"]},{"title":"Git常用命令","url":"%2F2019%2F07%2F10%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","content":"![](/uploads/git.jpg)\n\n<!-- more -->\n\n# Git命令\n\n## 获取Git库\n\n你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：\n```xml\n$ git init\n```\n\n```console\n$ git add .\n$ git add file\n$ git commit -m 'first commit'\n```\n\n```console\n$ https://github.com/Tcrusher/python-algorithms\n```\n\n## 分支操作\n\n1. git branch 创建分支\n2. git branch -b 创建并切换到新建的分支上\n3. git checkout 切换分支\n4. git branch 查看分支列表\n5. git branch -v 查看所有分支的最后一次操作\n6. git branch -vv 查看当前分支\n7. git brabch -b 分支名 origin/分支名 创建远程分支到本地\n8. git branch --merged 查看别的分支和当前分支合并过的分支\n9. git branch --no-merged 查看未与当前分支合并的分支\n10. git branch -d 分支名 删除本地分支\n11. git branch -D 分支名 强行删除分支\n12. git branch origin :分支名 删除远处仓库分支\n13. git merge 分支名 合并分支到当前分支上\n\n## 暂存操作\n\n1. git stash 暂存当前修改\n2. git stash apply 恢复最近的一次暂存\n3. git stash pop 恢复暂存并删除暂存记录\n4. git stash list 查看暂存列表\n5. git stash drop 暂存名(例：stash@{0}) 移除某次暂存\n6. git stash clear 清除暂存\n\n## 回退操作\n\n1. git reset --hard HEAD^ 回退到上一个版本\n2. git reset --hard ahdhs1(commit_id) 回退到某个版本\n3. git checkout -- file撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)\n4. git reset HEAD file 撤回暂存区的文件修改到工作区\n\n## 标签操作\n\n1. git tag 标签名 添加标签(默认对当前版本)\n2. git tag 标签名 commit_id 对某一提交记录打标签\n3. git tag -a 标签名 -m '描述' 创建新标签并增加备注\n4. git tag 列出所有标签列表\n5. git show 标签名 查看标签信息\n6. git tag -d 标签名 删除本地标签\n7. git push origin 标签名 推送标签到远程仓库\n8. git push origin --tags 推送所有标签到远程仓库\n9. git push origin :refs/tags/标签名 从远程仓库中删除标签\n\n## 常规操作\n\n1. git push origin test 推送本地分支到远程仓库\n2. git rm -r --cached 文件/文件夹名字 取消文件被版本控制\n3. git reflog 获取执行过的命令\n4. git log --graph 查看分支合并图\n5. git merge --no-ff -m '合并描述' 分支名 不使用Fast forward方式合并，采用这种方式合并可以看到合并记录\n6. git check-ignore -v 文件名 查看忽略规则\n7. git add -f 文件名 强制将文件提交\n\n## git创建项目仓库\n\n1. git init 初始化\n2. git remote add origin url 关联远程仓库\n3. git pull\n4. git fetch 获取远程仓库中所有的分支到本地\n\n## 忽略已加入到版本库中的文件\n\n1. git update-index --assume-unchanged file 忽略单个文件\n2. git rm -r --cached 文件/文件夹名字 (. 忽略全部文件)\n\n## 取消忽略文件\n\n1. git update-index --no-assume-unchanged file\n\n## 拉取、上传免密码\n\n1. git config --global credential.helper store\n\n<hr />\n","tags":["GitHub"],"categories":["Git"]},{"title":"My first blog","url":"%2F2019%2F05%2F06%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html","content":"\n<p class=\"description\">这是摘要，描述，下面是image图片显示</p>\n\n![](/uploads/a1.jpg)\n\n<!--more-->\n\n这是`<!--more-->`后面的内容\n\n## 第一章\n\n### 1.1、部署环境\n1、下载git、node.js，安装git、node.js\n2、安装hexo，初始化、启动、浏览器访问测试\n### 1.2、基本命令\n1、npm install、hexo init、hexo server\n\n---\n\n## 第二章\n### 2.1、创建博客\n1、\n2、\n\n---\n\n## 第三章\n内容\n\n## 第四章\n\n### 介绍：\n\n- title: 标题\n\n- tags: 标签\n\n> tags: ['Programming Assignment','Hello world']\n\n- copyright: 是否显示版权信息\n\n- date: 创建博客时间\n\n> date: 2019-05-06 20:13:14\n\n- categories: 归档分类\n\n>categories:\n>\n>​\t\\- hello world\n>\n>​\t\\- categories\n\n- description: 摘要\n\n- image: 图片\n\n> !+[]+(图片地址)\n\nmathjax: 数学公式\n\n---","tags":["Programming Assignment"],"categories":["hello world"]},{"title":"Hello World","url":"%2F2019%2F05%2F06%2Fhello-world.html","content":"\nWelcome to [Hexo]()! This is your very first post. Check [documentation]() for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting]() or you can ask me on [GitHub](https://github.com).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["Programming Assignment"],"categories":["hello world"]}]