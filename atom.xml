<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tcrush</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tcrushes.github.io/"/>
  <updated>2021-01-06T11:30:41.748Z</updated>
  <id>https://tcrushes.github.io/</id>
  
  <author>
    <name>Tcrush</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>List详解</title>
    <link href="https://tcrushes.github.io/2021/01/06/List%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://tcrushes.github.io/2021/01/06/List详解.html</id>
    <published>2021-01-06T02:00:24.000Z</published>
    <updated>2021-01-06T11:30:41.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/a1.jpg" alt></p><a id="more"></a><h2 id="集合类的概述"><a href="#集合类的概述" class="headerlink" title="集合类的概述"></a>集合类的概述</h2><p>说到集合，就不得不说说数组，我们知道，数组初始化后，长度就确定了，不便扩展。而且数组的插入和删除操需要移动大量元素，以至于效率低。集合分为<code>Collection</code>和<code>Map</code>两种体系。首先来看看继承树。</p><p><img src="http://cdn.tcrush.fun/blog/20210106/EjpTKV5hG3yB.jpg" alt="mark"></p><p>图片来自《Java编程思想》</p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>我首先来看看Collection接口，Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</p><p>来看看方法</p><div class="table-container"><table><thead><tr><th style="text-align:left">Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td style="text-align:left"><code>boolean</code></td><td><code>add(E e)</code>  <br>Ensures that this collection contains the specified element  (optional operation).</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>addAll(Collection c)</code>  <br>Adds all of the elements in the specified collection to this  collection (optional operation).</td></tr><tr><td style="text-align:left"><code>void</code></td><td><code>clear()</code>  <br>Removes all of the elements from this collection (optional  operation).</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>contains(Object o)</code>  <br>Returns <code>true</code> if this collection contains the specified  element.</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>containsAll(Collection c)</code>  <br>Returns <code>true</code> if this collection contains all of the  elements in the specified collection.</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>equals(Object o)</code>  <br>Compares the specified object with this collection for  equality.</td></tr><tr><td style="text-align:left"><code>int</code></td><td><code>hashCode()</code>  <br>Returns the hash code value for this  collection.</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>isEmpty()</code>  <br>Returns <code>true</code> <br>if this collection contains no  elements.</td></tr><tr><td style="text-align:left"><code>Iterator</code></td><td><code>iterator()</code>  <br>Returns an iterator over the elements in this  collection.</td></tr><tr><td style="text-align:left"><code>default Stream</code></td><td><code>parallelStream()</code>  <br>Returns a possibly parallel <code>Stream</code> with this  collection as its source.</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>remove(Object o)</code>  <br>Removes a single instance of the specified element from this  collection, if it is present (optional operation).</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>removeAll(Collection c)</code>  <br>Removes all of this collection’s elements that are also  contained in the specified collection (optional operation).</td></tr><tr><td style="text-align:left"><code>default boolean</code></td><td><code>removeIf(Predicate filter)</code>  <br>Removes all of the elements of this collection that satisfy the  given predicate.</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td><code>retainAll(Collection c)</code>  <br>Retains only the elements in this collection that are contained  in the specified collection (optional operation).</td></tr><tr><td style="text-align:left"><code>int</code></td><td><code>size()</code>  <br>Returns the number of elements in this  collection.</td></tr><tr><td style="text-align:left"><code>default Spliterator</code></td><td><code>spliterator()</code>  <br>Creates a <code>Spliterator</code> over the  elements in this collection.</td></tr><tr><td style="text-align:left"><code>default Stream</code></td><td><code>stream()</code>  <br>Returns a sequential <code>Stream</code> with this collection  as its source.</td></tr><tr><td style="text-align:left"><code>Object[]</code></td><td><code>toArray()</code>  <br>Returns an array containing all of the elements in this  collection.</td></tr><tr><td style="text-align:left"><code>T[]</code></td><td><code>toArray(T[] a)</code>  <br>Returns an array containing all of the elements in this  collection; the runtime type of the returned array is that of the specified  array.</td></tr></tbody></table></div><p>常用方法：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>向集合添加元素e</td></tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)</td><td>把集合C中的元素全部添加到集合中</td></tr><tr><td>void clear()</td><td>清空所有集合元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断指定集合是否包含对象o</td></tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)</td><td>判断指定集合是否包含集合c的所有元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>boolean remove(Object o)</td><td>删除集合中的元素对象o，若集合有多个o元素，则只会删除第一个元素</td></tr><tr><td>boolean removeAll(Collection&lt;?&gt; c）</td><td>删除集合包含集合c的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; c)</td><td>从集合中保留包含集合c的元素，其他元素则删除</td></tr><tr><td>int size()</td><td>集合的元素个数</td></tr><tr><td>boolean equals(Object o)</td><td>判断集合是否相等</td></tr><tr><td>T[] toArray(T[] a)</td><td>将集合转换为T类型的数组</td></tr><tr><td>Iterator iterator()</td><td>返回集合的迭代器</td></tr></tbody></table></div><h2 id="Iterator迭代器接口"><a href="#Iterator迭代器接口" class="headerlink" title="Iterator迭代器接口"></a>Iterator迭代器接口</h2><p>Iterator迭代器主要用于Collection的遍历。</p><div class="table-container"><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>default void</code></td><td><code>forEachRemaining(Consumer action)</code>  <br>Performs the given action for each remaining element until all  elements have been processed or the action throws an exception.</td></tr><tr><td><code>boolean</code></td><td><code>hasNext()</code>  <br>Returns <code>true</code> if the iteration has more  elements.</td></tr><tr><td><code>E</code></td><td><code>next()</code>  <br>Returns the next element in the iteration.</td></tr><tr><td><code>default void</code></td><td><code>remove()</code>  <br>Removes from the underlying collection the last element  returned by this iterator (optional operation).</td></tr></tbody></table></div><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection.add(<span class="string">"AAA"</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">3.14</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Iterator iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//out</span></span><br><span class="line">AAA</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line">Wed Jan <span class="number">06</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">07</span> CST <span class="number">2021</span></span><br></pre></td></tr></table></figure><p>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且 下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection.add(<span class="string">"AAA"</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">3.14</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Iterator iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//out</span></span><br><span class="line">AAA</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line">Wed Jan <span class="number">06</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">44</span> CST <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">java.util.NoSuchElementException</span><br></pre></td></tr></table></figure><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p>List集合类中元素<strong>有序</strong>、且<strong>可重复</strong>，集合中的每个元素都有其对应的顺序索引</p><p>List接口的实现类常用的有：<strong>ArrayList</strong>、<strong>LinkedList</strong>和<strong>Vector</strong>，这里主要介绍着三个。</p><p>List接口继承与Collection，List接口拥有Collection的所有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index, Object ele)</td><td>在index位置插入ele元素</td></tr><tr><td>boolean addAll(int index, Collection eles)</td><td>从index位置开始将eles中 的所有元素添加进来</td></tr><tr><td>Object get(int index)</td><td>获取指定index位置的元素</td></tr><tr><td>int indexOf(Object obj)</td><td>返回obj在集合中首次出现的位置</td></tr><tr><td>int lastIndexOf(Object obj)</td><td>返回obj在当前集合中末次出现的位置</td></tr><tr><td>Object remove(int index)</td><td>移除指定index位置的元素，并返回此元素</td></tr><tr><td>Object set(int index, Object ele)</td><td>设置指定index位置的元素为ele</td></tr><tr><td>List subList(int fromIndex, int toIndex)</td><td>返回从fromIndex到toIndex 位置的子集合</td></tr></tbody></table></div><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>ArrayList继承于AbstractList，实现了List接口。它是一个底层是数组，提供了相关的添加、删除、修改、遍历等功能。</p><p>ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。</p><p>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p><p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p><ul><li>提供方法</li></ul><p><img src="http://cdn.tcrush.fun/blog/20210106/UcszDmXBQiOm.png" alt="mark"></p><ul><li>底层结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认的初始化数组长度10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态数组的实际大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><ul><li>构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带参的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//声明一个长度为initialCapacity的Object数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//声明空的Object数组&#123;&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//异常处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明空的Object数组&#123;&#125;</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用有参数的构造器，根据你的参数initialCapacity情况创建数组，长度大于0，创建一个长度为initialCapacity的Object数组，等于0，创建空的{}，即EMPTY_ELEMENTDATA，否则异常。</p><p>使用无参数的构造器，Object[] elementData初始化为{}，当添加元素后再创建数组</p><ul><li>添加元素</li></ul><p><code>boolean add(E e)</code>在集合末尾追加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void add(int index, E element)</code>在集合中指定index位置，添加新元素element，若index超过数组实际使用长度size，异常<code>IndexOutOfBoundsException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加元素，超过数组原本声明的长度，则需要进行扩容。</p><ul><li>扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity); <span class="comment">//复制数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）当ArrayList容量不足以容纳全部元素时，ArrayList会重新设置容量为原来的1.5倍<br>（2）Arrays的克隆函数，即是将全部元素克隆到一个数组中。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>LinkedList继承于AbstractSequentialList，实现了List接口。它是一个底层是双向链表，Node类型的first和last， 用于记录首末元素。</p><p>LinkedList实现了Deque，提供许多方法。</p><p><img src="http://cdn.tcrush.fun/blog/20210106/us2Oxv1yS75G.png" alt="mark"></p><p>LinkedList实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p><p>LinkedList实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。</p><ul><li>提供方法</li></ul><p><img src="http://cdn.tcrush.fun/blog/20210106/Uf9BAacn3ndg.png" alt="mark"></p><ul><li>底层结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素的个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向链表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next; <span class="comment">//后继指针</span></span><br><span class="line">        Node&lt;E&gt; prev; <span class="comment">//前驱指针</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分别提供了头插和尾插法增添元素。add默认是尾插法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>提供方法</li></ul><p><img src="http://cdn.tcrush.fun/blog/20210106/NaaJ0CAYMtmL.png" alt="mark"></p><ul><li>构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title="#"></a>#</h1><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/a1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="List" scheme="https://tcrushes.github.io/categories/List/"/>
    
      <category term="Java" scheme="https://tcrushes.github.io/categories/List/Java/"/>
    
    
      <category term="List" scheme="https://tcrushes.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>括号匹配——栈的应用</title>
    <link href="https://tcrushes.github.io/2020/10/24/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8.html"/>
    <id>https://tcrushes.github.io/2020/10/24/括号匹配——栈的应用.html</id>
    <published>2020-10-24T07:54:29.000Z</published>
    <updated>2020-10-24T07:59:53.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/data.jpg" alt></p><a id="more"></a><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p>括号匹配，是栈的一个重要的应用，在表达式求值中也应用十分广泛。就是检查左右括号是否匹配。</p><p>来看看一道LeetCode问题，你就明白是怎么回事了。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><blockquote><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p></blockquote><p><strong>示例 1:</strong></p><blockquote><p>输入: “()”<br>输出: true</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: “()[]{}”<br>输出: true</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p>输入: “(]”<br>输出: false</p></blockquote><p><strong>示例 4:</strong></p><blockquote><p>输入: “([)]”<br>输出: false</p></blockquote><p><strong>示例 5:</strong></p><blockquote><p>输入: “{[]}”<br>输出: true</p></blockquote><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="https://img-blog.csdnimg.cn/20201019211056915.png#pic_center" alt="在这里插入图片描述"><br>当第1个括号到达时，它期待第4个括号与它匹配，但第2个括号会先到达，因此第1个括号会暂时等待。第2个括号期待第3个括号，第3个括号到达后，与第2个括号匹配，消掉一对括号，如此循环匹配下去。</p><p>我们使用栈暂存待匹配的括号。<br>遇到左括号时，将其先压入栈；遇到右括号，从栈弹出一个元素，比较两是否匹配。</p><p>如上面的例子，初始化一个空栈，首先遇到<strong>{\</strong>，压入栈。<br><img src="https://img-blog.csdnimg.cn/20201019212518619.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201019211949778.png#pic_center" alt="在这里插入图片描述"><br>遇到<strong>[</strong>，压入栈<br><img src="https://img-blog.csdnimg.cn/20201019212157501.png#pic_center" alt="在这里插入图片描述"><br>遇到<strong>]</strong>，从弹出栈顶元素<strong>[</strong>，括号匹配</p><p><img src="https://img-blog.csdnimg.cn/20201019211949778.png#pic_center" alt="在这里插入图片描述"><br>遇到<strong>}</strong>，从弹出栈顶元素<strong>{</strong>，括号匹配</p><p><img src="https://img-blog.csdnimg.cn/20201019212518619.png#pic_center" alt="在这里插入图片描述"><br>栈为空，括号匹配成功。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bracketCheck</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"><span class="keyword">char</span> topElem;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">'('</span> || str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">s.push(str[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">topElem = s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">')'</span> &amp;&amp; topElem != <span class="string">'('</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">']'</span> &amp;&amp; topElem != <span class="string">'['</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">'&#125;'</span> &amp;&amp; topElem != <span class="string">'&#123;'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str[i];</span><br><span class="line"><span class="keyword">bool</span> flag = bracketCheck(str, n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>AC代码</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">char</span> topElem;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s) &#123;</span><br><span class="line">           <span class="keyword">if</span>(ch==<span class="string">'('</span>||ch==<span class="string">'['</span>||ch==<span class="string">'&#123;'</span>) &#123;</span><br><span class="line">               stk.push(ch);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(stk.empty()) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                topElem=stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">               <span class="keyword">if</span>(ch == <span class="string">')'</span> &amp;&amp; topElem != <span class="string">'('</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">']'</span> &amp;&amp; topElem != <span class="string">'['</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">'&#125;'</span> &amp;&amp; topElem != <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/data.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://tcrushes.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://tcrushes.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="https://tcrushes.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>生产者-消费者问题</title>
    <link href="https://tcrushes.github.io/2020/10/16/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98.html"/>
    <id>https://tcrushes.github.io/2020/10/16/生产者-消费者问题.html</id>
    <published>2020-10-16T14:11:03.000Z</published>
    <updated>2020-10-24T08:01:29.078Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/os.jpg" alt></p><a id="more"></a><h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h2><blockquote><p>生产者消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了两个共享固定大小缓冲区的线程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。<br>要解决该问题，就必须让生产者在缓冲区满时休眠（要么干脆就放弃数据），等到下次消费者消耗缓冲区中的数据的时候，生产者才能被唤醒，开始往缓冲区添加数据。同样，也可以让消费者在缓冲区空时进入休眠，等到生产者往缓冲区添加数据之后，再唤醒消费者。通常采用进程间通信的方法解决该问题，常用的方法有信号灯法等。如果解决方法不够完善，则容易出现死锁的情况。出现死锁时，两个线程都会陷入休眠，等待对方唤醒自己。该问题也能被推广到多个生产者和消费者的情形。 —-百度百科</p></blockquote><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul><li><p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。</p></li><li><p>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待。</p></li><li><p>缓冲区是临界资源，各进程必须互斥地访问。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200915183855302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYWlmYW5nMDYyMA==,size_1,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>缓冲区临界资源，互斥访问，一个进程访问，其他进程必须等待，缓冲区满或空与生产者/消费者关系如图：<br><img src="https://img-blog.csdnimg.cn/20200915184654582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYWlmYW5nMDYyMA==,size_1,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//互斥信号量，缓冲区的互斥访问</span></span><br><span class="line">semaphore empty = n; <span class="comment">//同步信号量，表示空闲缓冲区的数量</span></span><br><span class="line">semaphore full = <span class="number">0</span>; <span class="comment">//同步信号量，表示产品的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line">producer() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">生产一个产品;</span><br><span class="line">P(empty);</span><br><span class="line">P(mutex);</span><br><span class="line">把产品放入缓冲区;</span><br><span class="line">V(mutex);</span><br><span class="line">V(full);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line">consumer() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(full);</span><br><span class="line">P(mutex);</span><br><span class="line">从缓冲区取出一个产品;</span><br><span class="line">V(mutex);</span><br><span class="line">V(empty);</span><br><span class="line">使用产品;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="多生产者-多消费者问题"><a href="#多生产者-多消费者问题" class="headerlink" title="多生产者-多消费者问题"></a>多生产者-多消费者问题</h2><p>和之前的<strong>生产者-消费者问题</strong>不同，这里的多生产者和多消费者是指多种类型的生产者和消费者，而不是指多个生产者、消费者。不同的生产者会生产不同的产品放入缓冲区，不同的消费者从缓冲区取不同的产品。<br>不同生产者和不同消费者存在互斥关系。</p><p>例如：我们看一个多生产者-多消费者常见的问题</p><p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。<br><img src="https://img-blog.csdnimg.cn/20200919145213480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYWlmYW5nMDYyMA==,size_1,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爸爸和妈妈是不同类型的生产者，爸爸只生产苹果，妈妈只生产橘子，儿子和女儿是不同类型的消费者，儿子只吃橘子，女儿只吃苹果。</p><h2 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h2><p>爸爸放入苹果后，女儿才能取苹果<br>妈妈放入橘子后，儿子才能取橘子<br>只有盘子为空时，爸爸或妈妈才能放入水果</p><p><img src="https://img-blog.csdnimg.cn/20200919145702269.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//实现互斥访问盘子（缓冲区）</span></span><br><span class="line">semaphore apple = <span class="number">0</span>; <span class="comment">//盘子中有几个苹果</span></span><br><span class="line">semaphore orange = <span class="number">0</span>; <span class="comment">//盘子中有几个橘子</span></span><br><span class="line">semaphore plate = <span class="number">1</span>; <span class="comment">//盘子中还可以放多少个水果</span></span><br><span class="line"></span><br><span class="line">dad() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">准备一个苹果;</span><br><span class="line">P(plate);</span><br><span class="line">P(mutex);</span><br><span class="line">把苹果放入盘子;</span><br><span class="line">V(mutex);</span><br><span class="line">V(apple);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mom() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">准备一个橘子;</span><br><span class="line">P(plate);</span><br><span class="line">P(mutex);</span><br><span class="line">把橘子放入盘子;</span><br><span class="line">V(mutex);</span><br><span class="line">V(orange);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">daughter() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(apple);</span><br><span class="line">P(mutex);</span><br><span class="line">从盘中取出苹果;</span><br><span class="line">V(mutex);</span><br><span class="line">V(plate);</span><br><span class="line">吃掉苹果;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">son() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(orange);</span><br><span class="line">P(mutex);</span><br><span class="line">从盘中取出橘子;</span><br><span class="line">V(mutex);</span><br><span class="line">V(plate);</span><br><span class="line">吃掉橘子;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实：可以不用设置互斥访问盘子的互斥变量mutex，盘子容量为1，任何时刻，apple、orange、plate 三个同步信号量中最多只有一个是1。</p><p>【参考文献】<br><a href="https://www.bilibili.com/video/BV1YE411D7nH?from=search&amp;seid=9416521726351939812" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1YE411D7nH?from=search&amp;seid=9416521726351939812</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/os.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://tcrushes.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://tcrushes.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="死锁" scheme="https://tcrushes.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>读者-写者问题</title>
    <link href="https://tcrushes.github.io/2020/09/14/%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98.html"/>
    <id>https://tcrushes.github.io/2020/09/14/读者-写者问题.html</id>
    <published>2020-09-14T07:37:10.000Z</published>
    <updated>2020-10-24T08:01:06.396Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/os1.jpg" alt></p><a id="more"></a><h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><p>读者进程和写者进程共享一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。</p><p>1、允许多个读者可以同时对文件执行读操作<br>2、只允许一个写者往文件中写信息<br>3、任一写者在完成写操作之前不允许其他读者或写者工作<br>4、写者执行写操作前，应让已有的读者和写者全部退出</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>互斥关系：写者进程与写者进程，写者进程与读者进程<br>读者进程与读者进程不存在互斥关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">semaphore rw=<span class="number">1</span>; <span class="comment">//用于实现对共享文件的互斥访问</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//记录当前有几个读进程在访问文件</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>;<span class="comment">//用于保证对count变量的互斥访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(rw); <span class="comment">//写之前“加锁”</span></span><br><span class="line">写文件…</span><br><span class="line">V(rw); <span class="comment">//写完了“解锁”</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(mutex); <span class="comment">//各读进程互斥访问count</span></span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">0</span>) <span class="comment">//由第一个读进程负责</span></span><br><span class="line">P(rw); <span class="comment">//读之前“加锁”</span></span><br><span class="line">count++; <span class="comment">//访问文件的读进程数+1</span></span><br><span class="line">V(mutex);</span><br><span class="line">读文件…</span><br><span class="line">P(mutex); <span class="comment">//各读进程互斥访问count</span></span><br><span class="line">count--; <span class="comment">//访问文件的读进程数-1</span></span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">0</span>) <span class="comment">//由最后一个读进程负责</span></span><br><span class="line">V(rw); <span class="comment">//读完了“解锁”</span></span><br><span class="line">V(mutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>潜在的问题：只要有读进程还在读，写进程就要一直阻塞等待，可能“饿死”。因此，这种算法中，读者进程是优先的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">semaphore rw=<span class="number">1</span>; <span class="comment">//用于实现对共享文件的互斥访问</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//记录当前有几个读进程在访问文件</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//用于保证对count变</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(w);</span><br><span class="line">P(rw);</span><br><span class="line">写文件…</span><br><span class="line">V(rw);</span><br><span class="line">V(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P(w);</span><br><span class="line">P(mutex);</span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">P(rw);</span><br><span class="line">count++;</span><br><span class="line">V(mutex);</span><br><span class="line">V(w);</span><br><span class="line">读文件…</span><br><span class="line">P(mutex);</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">V(rw);</span><br><span class="line">V(mutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种算法中，连续进入的多个读者可以同时读文件；写者和其他进程不能同时访问文件；写者不会饥饿，相对公平的先来先服务原则。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/os1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://tcrushes.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://tcrushes.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="死锁" scheme="https://tcrushes.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>哲学家进餐问题</title>
    <link href="https://tcrushes.github.io/2020/09/14/%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98.html"/>
    <id>https://tcrushes.github.io/2020/09/14/哲学家进餐问题.html</id>
    <published>2020-09-14T07:32:08.000Z</published>
    <updated>2020-10-24T08:01:51.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/a1.jpg" alt></p><a id="more"></a><h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p>一张圆桌上坐着5名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一火锅。哲学家们有思考和进餐两个动作，哲学家在思考时，并不影响他人。只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根地拿起）。如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p><p><img src="https://img-blog.csdnimg.cn/20200914145037601.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYWlmYW5nMDYyMA==,size_1,color_FFFFFF,t_0#pic_center" alt="在这里插入图片描述"><br>图片源于网络，侵则删。</p><p><strong>分析：</strong></p><p>5位哲学家，对应是5个进程，当然也可以更多了，为了方便分析我们假设为5，每只筷子都是临界资源。每位哲学家需要获得两只筷子（两个临界资源）才能进餐。左右相邻的哲学家对中间的筷子访问应该是互斥的。</p><p>定义互斥信号量数组chopstick[5]={1,1,1,1,1} 用于实现对5个筷子的互斥访问。并对哲学家与筷子进餐编号。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//哲学家想进餐时，先拿左边的筷子，再拿右边</span></span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">...吃饭...</span><br><span class="line"><span class="comment">//哲学家进餐完成后，先放下左边的筷子，再放下右边</span></span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>上述可能会产生死锁</strong>，假设5位哲学家同时想进餐，依次拿起自己左边的筷子，当想拿起右边的筷子时，发现右边的筷子都被拿起了，5个chopsticks都为0，陷入了无限等待。</p><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li><strong>方法一</strong></li></ul><p>至多只允许有4位哲学家同时去拿左边的筷子，最终能保证至少有以为哲学家能进餐，并在用完后释放他用过的两只筷子，从而是更多的哲学家能够进餐。可以设置count信号量，初始值为4，只允许4位哲学家，保证至少有1位哲学家能进餐。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">semaphore count=<span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//哲学家想进餐时，先拿左边的筷子，再拿右边</span></span><br><span class="line">wait(count);</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">...吃饭...</span><br><span class="line"><span class="comment">//哲学家进餐完成后，先放下左边的筷子，再放下右边</span></span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">signal(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>方法二</strong></li></ul><p>仅仅当哲学家的左右两只筷子均可用时，才允许他拿起筷子。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">semaphore mutex <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//哲学家想进餐时，先拿左边的筷子，再拿右边</span></span><br><span class="line">wait(mutex);</span><br><span class="line">wait(chopstick[i]);</span><br><span class="line">wait(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">signal(mutex);</span><br><span class="line">...吃饭...</span><br><span class="line"><span class="comment">//哲学家进餐完成后，先放下左边的筷子，再放下右边</span></span><br><span class="line">signal(chopstick[i]);</span><br><span class="line">signal(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>方法三</strong></li></ul><p>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">//偶数哲学家，先拿右边的筷子，再拿左边</span></span><br><span class="line">wait(chopstick[(i + <span class="number">1</span>)%<span class="number">5</span>]) ;</span><br><span class="line">wait(chopstick[i]) ;</span><br><span class="line">...吃饭...</span><br><span class="line">signal(chopstick[(i + <span class="number">1</span>)%<span class="number">5</span>]) ;</span><br><span class="line">signal(chopstick[i]) ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//奇数哲学家，先拿左边的筷子，再拿右边</span></span><br><span class="line">wait(chopstick[i]) ;</span><br><span class="line">wait(chopstick[(i + <span class="number">1</span>)%<span class="number">5</span>]) ;</span><br><span class="line">...吃饭...</span><br><span class="line">signal(chopstick[i]) ;</span><br><span class="line">signal(chopstick[(i + <span class="number">1</span>)%<span class="number">5</span>]) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/a1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://tcrushes.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://tcrushes.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="死锁" scheme="https://tcrushes.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://tcrushes.github.io/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"/>
    <id>https://tcrushes.github.io/2020/07/08/计算机网络.html</id>
    <published>2020-07-08T09:10:48.000Z</published>
    <updated>2020-10-14T13:25:03.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/internet.jpg" alt></p><a id="more"></a><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h1 id><a href="#" class="headerlink" title="#"></a>#</h1><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/internet.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>堪称神器的浏览器插件</title>
    <link href="https://tcrushes.github.io/2020/05/16/%E5%A0%AA%E7%A7%B0%E7%A5%9E%E5%99%A8%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6.html"/>
    <id>https://tcrushes.github.io/2020/05/16/堪称神器的浏览器插件.html</id>
    <published>2020-05-15T16:33:34.000Z</published>
    <updated>2020-07-02T09:31:29.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/chrome.jpg" alt></p><a id="more"></a><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>目前，市面上的浏览器众多，推荐使用Chrome，Mozilla Firefox也不错</p><p>下载地址：<a href="https://www.google.cn/chrome/?standalone=1&amp;platform=win64" target="_blank" rel="noopener">https://www.google.cn/chrome/?standalone=1&amp;platform=win64</a></p><p>安装就不赘述了。</p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>Chrome浏览器插件非常多，很实用，让你的浏览器更强大，这里介绍一下自己常用的几个插件。</p><p>第一个是油猴，会以它为例，来说说插件是如何安装的？</p><ul><li>方式一</li></ul><p>如果你不能翻墙的话，可以使用国内的网站<a href="https://chrome.zzzmh.cn/" target="_blank" rel="noopener">https://chrome.zzzmh.cn/</a>里面有很多的插件，</p><p><img src="https://i.loli.net/2020/05/16/PYy9eKkEuVMFx24.png" alt="image1.png"></p><p>找到自己想要下载的插件，我们就找到<code>油猴(Tampermonkey)</code></p><p><img src="https://i.loli.net/2020/05/16/38xsojgafuXLYDG.png" alt="image2.png"></p><p>直接点击推荐下载，下载成功后减压</p><p>我们再打开Chrome浏览器</p><p><code>更多工具</code>  -&gt;  <code>扩展程序</code></p><p><img src="https://i.loli.net/2020/05/16/4cMXhxeGQZ8oLps.png" alt="image3.png"></p><p>打开<code>开发者模式</code></p><p><img src="https://i.loli.net/2020/05/16/G9TUYuj8CvE5MNx.png" alt="image4.png"></p><p>点击已解压的扩展程序，将解压好的插件加入到Chrome中</p><p>然后你的Chrome就会多出<code>油猴插件</code></p><ul><li>方式二</li></ul><p>如果你可以访问google商店，直接在google商店下载就好</p><p><code>找到油猴</code>  -&gt;  <code>添加到扩展程序</code></p><p><img src="https://i.loli.net/2020/05/16/vgDmPUp6IKazcZs.png" alt="image7.png"></p><p>点击添加扩展程序，我这里已经添加了的</p><ul><li>油猴脚本</li></ul><p>油猴是一个脚本管理器，几乎什么都能干，可以为你的浏览器加载各种各样的脚本，对你正在访问的指定网站进行修改，例如：<code>百度网盘助手</code>,<code>HTML5视频播放器增强脚本</code></p><p><img src="https://i.loli.net/2020/05/16/obtzOW6AYyfRUwP.png" alt="image5.png"></p><p>下面我们说说如何给油猴添加脚本：</p><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a>国内油猴脚本的下载地，常用脚本都有。</p><p><img src="https://i.loli.net/2020/05/16/qdihogSH2NYDPQv.png" alt="image6.png"></p><ol><li>当找到脚本之后，点击安装即可，然后在相关网站，就会有效果了</li><li>在相应页面点击油猴扩展，可以查看脚本，可以禁用。也可以卸载安装过的脚本。</li></ol><p>也可以直接打开油猴的<code>管理面板</code> -&gt; <code>新建用户脚本（+）</code> -&gt; <code>Ctrl+s保存</code></p><p>到这里，就安装好了插件</p><ul><li>Microsoft Edge</li></ul><p>Microsoft Edge更新了，安利一波。</p><p>首先更新Microsoft Edge，下载地址：<a href="https://www.microsoft.com/zh-cn/edge" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/edge</a></p><p>更新完成后，有上角点击==…==，选择==扩展==</p><p><img src="https://i.loli.net/2020/07/02/MBfVkRbvGsuDYhX.png" alt="(AJ_DH9VOUXYI1X){MYBX4J.png"></p><p>然后选择==获取 Microsoft Edge 扩展==</p><p><img src="https://i.loli.net/2020/07/02/i26HjSwN9sEvbfR.png" alt="ALF96MNUL1XU]33%E5YYYUU.png"></p><p>搜索插件，安装即可。。。</p><h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><ul><li>Adblock Plus - 免费的广告拦截器</li></ul><p>这款插件可以帮助你屏蔽几乎大部分网页广告，让你的浏览器更清净，必装。</p><ul><li>沙拉查词-聚合词典划词翻译</li></ul><p>划词翻译，非常强大，慢慢探索</p><ul><li>一键管理扩展</li></ul><p>当你的插件安装很多的时候，不方便管理，打开关闭，这款插件解决了，它很好的管理了你的插件，一键打开，一键关闭</p><ul><li>右键搜</li></ul><p>功能就是如它的扩展名一样，对于浏览网页时的图片，链接等，右键点击，提供很多扩展功能</p><ul><li>Imagus</li></ul><p>图片放大镜的功能！预览图片。提供很多功能选项进行设置。</p><ul><li>Octotree</li></ul><p>GitHub神器，会在旁边以文件树的形式展现GitHub项目的文件，加载很快。</p><ul><li>FeHelper(前端助手)</li></ul><p>JSON自动格式化、手动格式化，支持排序、解码、下载等，更多功能可在配置页按需安装！</p><ul><li>IDM Integration Module</li></ul><p>配合上<code>油猴</code>和<code>IDM下载器</code>可以使用百度网盘下载不限速哦，你确定不试一试。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/chrome.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="https://tcrushes.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>注册美区Apple ID</title>
    <link href="https://tcrushes.github.io/2020/05/13/%E6%B3%A8%E5%86%8C%E7%BE%8E%E5%8C%BAApple-ID.html"/>
    <id>https://tcrushes.github.io/2020/05/13/注册美区Apple-ID.html</id>
    <published>2020-05-13T12:56:01.000Z</published>
    <updated>2020-05-15T17:21:48.311Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/apple.jpg" alt></p><a id="more"></a><h2 id="Apple官网注册"><a href="#Apple官网注册" class="headerlink" title="Apple官网注册"></a>Apple官网注册</h2><p>官网：<a href="https://appleid.apple.com/" target="_blank" rel="noopener">https://appleid.apple.com/</a></p><p>进入Apple官网，Create Your Apple ID，注意国家选择美国。邮箱国内的也行。</p><p>填写个人收货地址和付款方式</p><p>美国身份生成网址：<a href="http://shenfendaquan.com/" target="_blank" rel="noopener">http://shenfendaquan.com/</a></p><p>美国的电话：<a href="https://smsreceivefree.com/" target="_blank" rel="noopener">https://smsreceivefree.com/</a>，进入网站，进行注册即可</p><p>根据提示填写信息即可，付款方式选择无</p><p>梯子……</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/apple.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="翻墙" scheme="https://tcrushes.github.io/categories/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="Apple ID" scheme="https://tcrushes.github.io/categories/%E7%BF%BB%E5%A2%99/Apple-ID/"/>
    
    
      <category term="翻墙" scheme="https://tcrushes.github.io/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="Apple ID" scheme="https://tcrushes.github.io/tags/Apple-ID/"/>
    
  </entry>
  
  <entry>
    <title>PAT练习题</title>
    <link href="https://tcrushes.github.io/2020/03/15/PAT%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://tcrushes.github.io/2020/03/15/PAT练习题.html</id>
    <published>2020-03-15T03:02:16.000Z</published>
    <updated>2020-03-15T03:07:00.155Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/pat.jpg" alt></p><a id="more"></a><h1 id="PAT乙级练习"><a href="#PAT乙级练习" class="headerlink" title="PAT乙级练习"></a>PAT乙级练习</h1><div class="table-container"><table><thead><tr><th>题号</th><th>题目</th></tr></thead><tbody><tr><td>1001</td><td><a href="https://www.nowcoder.com/pat/2/problem/249" target="_blank" rel="noopener">采花生</a></td></tr><tr><td>1002</td><td><a href="https://www.nowcoder.com/pat/2/problem/250" target="_blank" rel="noopener">NowCoder数列</a></td></tr><tr><td>1003</td><td><a href="https://www.nowcoder.com/pat/2/problem/251" target="_blank" rel="noopener">养兔子</a></td></tr><tr><td>1004</td><td><a href="https://www.nowcoder.com/pat/2/problem/252" target="_blank" rel="noopener">客似云来</a></td></tr><tr><td>1005</td><td><a href="https://www.nowcoder.com/pat/2/problem/253" target="_blank" rel="noopener">斐波那契凤尾</a></td></tr><tr><td>1006</td><td><a href="https://www.nowcoder.com/pat/2/problem/254" target="_blank" rel="noopener">星际密码</a></td></tr><tr><td>1007</td><td><a href="https://www.nowcoder.com/pat/2/problem/255" target="_blank" rel="noopener">母牛的故事</a></td></tr><tr><td>1008</td><td><a href="https://www.nowcoder.com/pat/2/problem/256" target="_blank" rel="noopener">童年生活二三事</a></td></tr><tr><td>1009</td><td><a href="https://www.nowcoder.com/pat/2/problem/257" target="_blank" rel="noopener">蜜蜂寻路</a></td></tr><tr><td>1010</td><td><a href="https://www.nowcoder.com/pat/2/problem/258" target="_blank" rel="noopener">骨牌铺方格</a></td></tr><tr><td>1011</td><td><a href="https://www.nowcoder.com/pat/2/problem/259" target="_blank" rel="noopener">NowCoder小定律</a></td></tr><tr><td>1012</td><td><a href="https://www.nowcoder.com/pat/2/problem/261" target="_blank" rel="noopener">分数运算</a></td></tr><tr><td>1013</td><td><a href="https://www.nowcoder.com/pat/2/problem/262" target="_blank" rel="noopener">分解因数</a></td></tr><tr><td>1014</td><td><a href="https://www.nowcoder.com/pat/2/problem/264" target="_blank" rel="noopener">因子个数</a></td></tr><tr><td>1015</td><td><a href="https://www.nowcoder.com/pat/2/problem/266" target="_blank" rel="noopener">skew数</a></td></tr><tr><td>1016</td><td><a href="https://www.nowcoder.com/pat/2/problem/267" target="_blank" rel="noopener">一的个数</a></td></tr><tr><td>1017</td><td><a href="https://www.nowcoder.com/pat/2/problem/268" target="_blank" rel="noopener">外星人的语言</a></td></tr><tr><td>1018</td><td><a href="https://www.nowcoder.com/pat/2/problem/270" target="_blank" rel="noopener">数位和</a></td></tr><tr><td>1019</td><td><a href="https://www.nowcoder.com/pat/2/problem/272" target="_blank" rel="noopener">进制回文数</a></td></tr><tr><td>1020</td><td><a href="https://www.nowcoder.com/pat/2/problem/274" target="_blank" rel="noopener">发邮件</a></td></tr><tr><td>1021</td><td><a href="https://www.nowcoder.com/pat/2/problem/275" target="_blank" rel="noopener">年会抽奖</a></td></tr><tr><td>1022</td><td><a href="https://www.nowcoder.com/pat/2/problem/276" target="_blank" rel="noopener">有假币</a></td></tr><tr><td>1023</td><td><a href="https://www.nowcoder.com/pat/2/problem/279" target="_blank" rel="noopener">考新郎</a></td></tr><tr><td>1024</td><td><a href="https://www.nowcoder.com/pat/2/problem/280" target="_blank" rel="noopener">蟠桃记</a></td></tr><tr><td>1025</td><td><a href="https://www.nowcoder.com/pat/2/problem/281" target="_blank" rel="noopener">三角形</a></td></tr><tr><td>1026</td><td><a href="https://www.nowcoder.com/pat/2/problem/282" target="_blank" rel="noopener">圆周率</a></td></tr><tr><td>1027</td><td><a href="https://www.nowcoder.com/pat/2/problem/287" target="_blank" rel="noopener">送外卖</a></td></tr><tr><td>1028</td><td><a href="https://www.nowcoder.com/pat/2/problem/313" target="_blank" rel="noopener">乒乓球筐</a></td></tr><tr><td>1029</td><td><a href="https://www.nowcoder.com/pat/2/problem/359" target="_blank" rel="noopener">不吉利的日期</a></td></tr><tr><td>1030</td><td><a href="https://www.nowcoder.com/pat/2/problem/367" target="_blank" rel="noopener">最难的问题</a></td></tr><tr><td>1031</td><td><a href="https://www.nowcoder.com/pat/2/problem/370" target="_blank" rel="noopener">直方图</a></td></tr><tr><td>1032</td><td><a href="https://www.nowcoder.com/pat/2/problem/373" target="_blank" rel="noopener">选大王</a></td></tr><tr><td>1033</td><td><a href="https://www.nowcoder.com/pat/2/problem/4067" target="_blank" rel="noopener">害死人不偿命的(3n+1)猜想 (15)</a></td></tr><tr><td>1034</td><td><a href="https://www.nowcoder.com/pat/2/problem/4068" target="_blank" rel="noopener">写出这个数 (20)</a></td></tr><tr><td>1035</td><td><a href="https://www.nowcoder.com/pat/2/problem/4069" target="_blank" rel="noopener">1003. 我要通过！(20)</a></td></tr><tr><td>1036</td><td><a href="https://www.nowcoder.com/pat/2/problem/4070" target="_blank" rel="noopener">成绩排名 (20)</a></td></tr><tr><td>1037</td><td><a href="https://www.nowcoder.com/pat/2/problem/4071" target="_blank" rel="noopener">继续(3n+1)猜想 (25)</a></td></tr><tr><td>1038</td><td><a href="https://www.nowcoder.com/pat/2/problem/4072" target="_blank" rel="noopener">换个格式输出整数 (15)</a></td></tr><tr><td>1039</td><td><a href="https://www.nowcoder.com/pat/2/problem/4073" target="_blank" rel="noopener">素数对猜想 (20)</a></td></tr><tr><td>1040</td><td><a href="https://www.nowcoder.com/pat/2/problem/4074" target="_blank" rel="noopener">数组元素循环右移问题 (20)</a></td></tr><tr><td>1041</td><td><a href="https://www.nowcoder.com/pat/2/problem/4075" target="_blank" rel="noopener">说反话 (20)</a></td></tr><tr><td>1042</td><td><a href="https://www.nowcoder.com/pat/2/problem/4076" target="_blank" rel="noopener">一元多项式求导 (25)</a></td></tr></tbody></table></div><h2 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h2><h2 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h2><h2 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h2><ul><li>C++</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">81</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    a[<span class="number">0</span>]=a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">81</span>;i++) &#123;</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&lt;n;i++) &#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            n,m=map(int,input().split())</span><br><span class="line">            a=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,m+<span class="number">1</span>):</span><br><span class="line">                a.append(a[<span class="number">-1</span>]+a[<span class="number">-2</span>])</span><br><span class="line">            s=sum(a[n<span class="number">-1</span>:m])</span><br><span class="line">            print(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'__name__'</span>==main():</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100001</span>):</span><br><span class="line">        a.append((a[<span class="number">-1</span>]+a[<span class="number">-2</span>])%<span class="number">1000000</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            n=int(input())</span><br><span class="line">            <span class="keyword">if</span> n&lt;<span class="number">37</span>:</span><br><span class="line">                print(a[n]%<span class="number">1000000</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'%.6d'</span> % (a[n]%<span class="number">1000000</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'__name__'</span>==main():</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h2><ul><li>思考<ul><li>n=1时，矩阵为：<br><code>|1 1|</code><br><code>|1 0|</code><br>所以左上角数字为1</li><li>n=2时，矩阵为<br><code>|1 1| * |1 1| =&gt; |2 1|</code><br><code>|1 0|   |1 0|       |1 1|</code><br>所以左上角数字为2<br>…<br> n的取值：1 2 3 4 5 6 ….<br> 左上角值：1 2 3 5 8 13 ….<br>斐波那契数列。。。</li></ul></li><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,f[<span class="number">10001</span>];</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">10001</span>;i++)</span><br><span class="line">f[i]=(f[i<span class="number">-1</span>]%<span class="number">10000</span>+f[i<span class="number">-2</span>]%<span class="number">10000</span>)%<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">      <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%04d"</span>,f[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007"><a href="#1007" class="headerlink" title="1007"></a>1007</h2><ul><li>思考</li></ul><p>假设现在是第n年，有m头牛，求n+1年？n+1年一定会有第n年的m头牛，关键的为题是有多少头牛会生小牛，每头小母牛从第四个年头开始，每年年初也生一头小母牛，因此会n-3年所有牛都会生小牛。因此：</p><blockquote><p>第n+1年=第n-1年+第n-3年</p></blockquote><ul><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a[<span class="number">56</span>],n;</span><br><span class="line"> a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"> a[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"> a[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line"> a[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;<span class="number">56</span>;i++) &#123;</span><br><span class="line">  a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-3</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a[n<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h2><ul><li>思考</li></ul><p>这是一个斐波拉契。</p><ul><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">91</span>];</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"> a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"> a[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">91</span>;i++) &#123;</span><br><span class="line">  a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a[n<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/pat.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://tcrushes.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://tcrushes.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://tcrushes.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell常用命令</title>
    <link href="https://tcrushes.github.io/2020/02/09/Linux-shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://tcrushes.github.io/2020/02/09/Linux-shell常用命令.html</id>
    <published>2020-02-09T04:06:31.000Z</published>
    <updated>2020-03-23T08:18:23.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/linux.jpg" alt></p><a id="more"></a><h2 id="文件、目录操作"><a href="#文件、目录操作" class="headerlink" title="文件、目录操作"></a>文件、目录操作</h2><ul><li><p>ls命令<br>查看目录下的文件。<br>常用选项：<br><code>-l</code>：以表格形式显示文件，显示详细信息<br><code>-a</code>：显示所有文件，包括隐藏文件</p></li><li><p>cd命令<br>切换目录，可以使用绝对路径或者相对路径<br>常用：<br><code>cd ~</code>或者<code>cd</code>：回到家目录<br><code>cd ..</code>：回到当前目录的上一级目录</p></li><li><p>pwd命令<br>显示当前工作目录的绝对路径</p></li><li><p>cp命令<br>拷贝文件到指定目录<br>常用选项：<br><code>-r</code>：递归复制整个文件夹</p></li><li><p>rm命令<br>移除（）删除）文件或目录<br>常用选项：<br><code>-r</code>：递归删除整个文件夹<br><code>-f</code>：强制删除不提示</p></li><li><p>mv命令<br>移动文件与目录或重命名</p><blockquote><p>mv    oldNameFile newNameFile    (功能描述：重命名)<br>mv /temp/movefile /home (功能描述：移动文件)</p></blockquote></li><li><p>mkdir命令<br>创建目录<br>常用选项：<br><code>-p</code>：递归创建目录</p></li><li><p>rmdir命令<br>删除目录<br>rmdir删除的是空目录，如果目录下有内容时无法删除的。推荐使用<code>rm</code></p></li><li><p>touch命令<br>创建空文件</p></li><li><p>cat命令</p><p>查看文件内容，是以只读的方式打开</p><p>常用选项：</p><p><code>-n</code>：显示行号</p><blockquote><p>cat 文件名 | more [分页浏览]</p></blockquote></li><li></li></ul><h1 id><a href="#" class="headerlink" title="#"></a>#</h1><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1><h1 id="-2"><a href="#-2" class="headerlink" title="#"></a>#</h1><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/linux.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://tcrushes.github.io/categories/Linux/"/>
    
      <category term="shell命令" scheme="https://tcrushes.github.io/categories/Linux/shell%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux" scheme="https://tcrushes.github.io/tags/Linux/"/>
    
      <category term="shell命令" scheme="https://tcrushes.github.io/tags/shell%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>宝塔连接服务器</title>
    <link href="https://tcrushes.github.io/2020/02/04/%E5%AE%9D%E5%A1%94%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>https://tcrushes.github.io/2020/02/04/宝塔连接服务器.html</id>
    <published>2020-02-04T07:45:03.000Z</published>
    <updated>2020-02-15T02:50:40.129Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/cmg.jpg" alt></p><a id="more"></a><h1 id="宝塔连接服务器"><a href="#宝塔连接服务器" class="headerlink" title="宝塔连接服务器"></a>宝塔连接服务器</h1><p>宝塔,让运维简单高效。面板支持Linux与Windows系统。一键配置:LAMP/LNMP、网站、数据库、FTP、SSL,通过Web端轻松管理服务器。下面以阿里云为例</p><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p>在阿里云租赁服务器，使用xshell连接服务器（或者直接使用ssh连接。。。）。</p><p>宝塔面板：<a href="https://www.bt.cn/" target="_blank" rel="noopener"><a href="https://www.bt.cn/" target="_blank" rel="noopener">https://www.bt.cn/</a></a></p><p>安装连接：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener"><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></a></p><p>对应自己的服务器，选择相应的命令，我这里选用的是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>执行，等待几分钟安装成功。</p><p><img src="https://i.loli.net/2020/02/04/G6d2Z8jnV4kvwuW.png" alt="image1.png"></p><h2 id="连接宝塔面板"><a href="#连接宝塔面板" class="headerlink" title="连接宝塔面板"></a>连接宝塔面板</h2><p>安装成功后有Bt-Panel、username、password。打开浏览器输入Bt-Panel后的地址，输入用户名和密码登录。</p><h2 id="失败问题"><a href="#失败问题" class="headerlink" title="失败问题"></a>失败问题</h2><p>服务器的安全组没有设置宝塔的端口号8888</p><p><img src="https://i.loli.net/2020/02/04/3QTCGr6bwIgiq1f.png" alt="image2.png"></p><p>点击快速创建规则</p><p>填写规则信息，端口填 8888/8888，授权对象 0.0.0.0/0代表所有对象都可以使用</p><p><img src="https://i.loli.net/2020/02/04/hLCViwdupyaAvjX.png" alt="image3.png"></p><p>保存，再次连接就OK了</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/cmg.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://tcrushes.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tcrushes.github.io/tags/Linux/"/>
    
      <category term="宝塔面板" scheme="https://tcrushes.github.io/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js基础</title>
    <link href="https://tcrushes.github.io/2020/02/03/Vue-js%E5%9F%BA%E7%A1%80.html"/>
    <id>https://tcrushes.github.io/2020/02/03/Vue-js基础.html</id>
    <published>2020-02-03T11:37:25.000Z</published>
    <updated>2020-04-23T04:23:43.860Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/vue.png" alt></p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>官方文档：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener"><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></a></p><p><a href="https://vuejs.bootcss.com/guide/" target="_blank" rel="noopener"><a href="https://vuejs.bootcss.com/guide/" target="_blank" rel="noopener">https://vuejs.bootcss.com/guide/</a></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Vue-js-是什么"><a href="#Vue-js-是什么" class="headerlink" title="Vue.js 是什么"></a>Vue.js 是什么</h3><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接引入Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以下载vue文件，将vue.js文件引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>使用npm</p><ul><li>安装node.js</li></ul><p>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener"><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></a></p><p>按照提示一步一步安装，这里就不赘述了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  npm  install  -g  cnpm  --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>可以使用cnpm 命令来安装模块了</p><ul><li>项目初始化</li></ul><p>安装<code>vue-cli</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-cli -g  //全局安装</span><br><span class="line">vue list //是否安装成功</span><br></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack  ”项目名称“</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>运行项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><p>默认是在8080端口启动，当然也是可以更改的</p><p><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>这样就成功了，开始学习旅程。。。</p></li></ul><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var app = new Vue(&#123; // 创建Vue实例</span></span><br><span class="line"><span class="undefined">            el: '#app', // 表示控制的区域</span></span><br><span class="line"><span class="undefined">            data: &#123; // 存放el要用到的数据</span></span><br><span class="line"><span class="undefined">                message: 'Hello Vue!'</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            //methods://实例方法&#123;&#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-3"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>可以看到我吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。<code>v-if</code>表示条件选择</p><p>v-if 的特点：每次都会重新删除或创建元素<br>v-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 </p><p>v-if 有较高的切换性能消耗<br>v-show 有较高的初始渲染消耗</p><p>如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show<br>如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if</p><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">            &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app-4'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        todos: [</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'学习 JavaScript'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'学习 Vue'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'整个牛项目'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-clock、v-text、v-html"><a href="#v-clock、v-text、v-html" class="headerlink" title="v-clock、v-text、v-html"></a>v-clock、v-text、v-html</h3><ul><li>v-clock</li></ul><p>使用<code>v-cloak</code>可以解决插值表达式闪烁的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    [v-cloak] &#123;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 与上面类似 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-text</li></ul><p><code>v-text</code>是没有闪烁问题的</p><p><code>v-text</code>会覆盖元素中原本的内容，但是<code>插值表达式</code>只会替换自己的这个占位符，不会把 整个元素的内容清空，<code>渲染的字符串，不会渲染HTML组件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>这是原来内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-html</li></ul><p>与<code>v-text</code>类似，会渲染<code>HTML</code>组件</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ol><li>直接使用指令<code>v-bind</code></li><li>使用简化指令<code>:</code></li><li>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></li></ol><p>v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定<br>注意： v-model 只能运用在 表单元素中</p><h3 id="vue中的样式"><a href="#vue中的样式" class="headerlink" title="vue中的样式"></a>vue中的样式</h3><ul><li>第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class="['样式1', '样式2']"</span><br></pre></td></tr></table></figure><ul><li>在数组中使用三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class="['样式', '。。。', flag?'':'']" <span class="comment">&lt;!-- 三元式 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在数组中使用 对象来代替三元表达式，提高代码的可读性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class="['。。。', '。。。', &#123;'。。。':flag&#125; ]"</span><br></pre></td></tr></table></figure><ul><li>在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class="classObj"</span><br></pre></td></tr></table></figure><ul><li>对象就是无序键值对的集合 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style="styleObj1"</span><br></pre></td></tr></table></figure><p><code>vue：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        styleObj1: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="number">200</span> &#125;,</span><br><span class="line">        styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>和其他语言类似，<code>v-if、v-else-if、v-else、</code></p><p>首先来看<code>v-if</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>你可以看到我吗？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            flag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中不会显示<code>你可以看到我吗？</code>，将flag改为<code>true</code>，就显出出来了。</p><p>条件渲染就是通过判断v-if的值，来渲染页面</p><p>v-else</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>你可以看到我吗？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>这是else部分。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            flag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-else-if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">        A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">        B</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">        C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        Not A/B/C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="string">"A"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-show也可以实现条件渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>你可以看到我吗？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            flag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><p><code>v-if</code> vs <code>v-show</code></p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            items: [</span></span><br><span class="line"><span class="javascript">                <span class="string">"one"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"two"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"three"</span></span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in student"</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125;--&#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app3"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            student: &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">"Tcrush"</span>,</span></span><br><span class="line"><span class="undefined">                age: 20,</span></span><br><span class="line"><span class="javascript">                sex: <span class="string">"男"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个名为 button-counter 的新组件</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                    count: 0</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="xml">            template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>You clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#components-demo'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个组件都有一个独立的count，相互不影响，每次使用到组件，vue就会创建一个新的实例</p><p>我们看到这里不像之前是使用对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而是使用函数，<strong>组件的 data 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="取消eslint-loader"><a href="#取消eslint-loader" class="headerlink" title="取消eslint-loader"></a>取消eslint-loader</h3><p><code>eslint-loader</code>是vue对代码格式进行检查。</p><p>取消<code>eslint-loader</code></p><p>找到<code>build</code> —&gt; <code>webpack.base.conf.js</code></p><p>注释掉内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createLintingRule = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// test: /\.(js|vue)$/,</span></span><br><span class="line">  <span class="comment">// loader: 'eslint-loader',</span></span><br><span class="line">  <span class="comment">// enforce: 'pre',</span></span><br><span class="line">  <span class="comment">// include: [resolve('src'), resolve('test')],</span></span><br><span class="line">  <span class="comment">// options: &#123;</span></span><br><span class="line">  <span class="comment">//   formatter: require('eslint-friendly-formatter'),</span></span><br><span class="line">  <span class="comment">//   emitWarning: !config.dev.showEslintErrorsInOverlay</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h3><ul><li>父组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data() &#123; <span class="comment">//传递数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        menus: [</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用Menu组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:menus</span>=<span class="string">"menus"</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span> <span class="comment">&lt;!-- :menus="menus"传递数据，可以多个 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'Menu'</span>,</span></span><br><span class="line"><span class="xml">    props: ['menus'] <span class="comment">&lt;!-- props 选项将其包含在该组件可接受的 prop 列表中,多个 --&gt;</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"Menu in menus"</span> <span class="attr">:key</span>=<span class="string">"Menu.id"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"Menu.url"</span>&gt;</span>&#123;&#123; Menu.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父子组件方法传递"><a href="#父子组件方法传递" class="headerlink" title="父子组件方法传递"></a>父子组件方法传递</h3><ul><li>子组件调用</li></ul><p><code>父组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:menus</span>=<span class="string">"menus"</span> <span class="attr">:addMenu</span>=<span class="string">"addMenu"</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span> <span class="comment">&lt;!-- :addMenu="addMenu"传递 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./components/Menu'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Menu,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      menus: [</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    addMenu(menu) &#123; <span class="comment">//方法定义</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.menus.push(menu)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>子组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'Menu'</span>,</span></span><br><span class="line"><span class="javascript">    props: &#123; <span class="comment">//获取</span></span></span><br><span class="line"><span class="undefined">        menus: &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="built_in">Object</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        addMenu: &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="built_in">Function</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            content: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        add() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> menu=&#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="keyword">this</span>.content,<span class="attr">url</span>:<span class="string">"http://"</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.addMenu(menu) <span class="comment">//调用</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>第二种：</code></p><p><code>父组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:menus</span>=<span class="string">"menus"</span> @<span class="attr">addMenu</span>=<span class="string">"addMenu"</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        addMenu(menu) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.menus.push(menu)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>子组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">            add() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> menu=&#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="keyword">this</span>.content,<span class="attr">url</span>:<span class="string">"http://"</span>&#125;;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'addMenu'</span>,menu);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>父组件调用</li></ul><p><code>父组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">ref</span>=<span class="string">"Menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        clearContent() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.Menu.clear()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>子组件：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">        clear() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.content=<span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/vue.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="https://tcrushes.github.io/categories/Vue-js/"/>
    
    
      <category term="Vue.js" scheme="https://tcrushes.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机</title>
    <link href="https://tcrushes.github.io/2020/01/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA.html"/>
    <id>https://tcrushes.github.io/2020/01/12/深入理解Java虚拟机.html</id>
    <published>2020-01-12T07:09:41.000Z</published>
    <updated>2020-02-03T11:35:00.016Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/a3.png" alt></p><a id="more"></a><h2 id="走近Java"><a href="#走近Java" class="headerlink" title="走近Java"></a>走近Java</h2><h2 id="Java内存区域与内存溢出异常"><a href="#Java内存区域与内存溢出异常" class="headerlink" title="Java内存区域与内存溢出异常"></a>Java内存区域与内存溢出异常</h2><h2 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/a3.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://tcrushes.github.io/categories/JVM/"/>
    
      <category term="Java虚拟机" scheme="https://tcrushes.github.io/categories/JVM/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="https://tcrushes.github.io/tags/JVM/"/>
    
      <category term="Java虚拟机" scheme="https://tcrushes.github.io/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础</title>
    <link href="https://tcrushes.github.io/2019/12/04/Docker%E5%9F%BA%E7%A1%80.html"/>
    <id>https://tcrushes.github.io/2019/12/04/Docker基础.html</id>
    <published>2019-12-04T00:32:45.000Z</published>
    <updated>2021-01-12T02:30:50.598Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/fork.png" alt></p><a id="more"></a><h2 id="一-Docker介绍"><a href="#一-Docker介绍" class="headerlink" title="一. Docker介绍"></a>一. Docker介绍</h2><h3 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h3><p>我本地运行没问题啊。</p><p> 环境不一致<br>哪个哥们又写死循环了，怎么这么卡？</p><p> 在多用户的操作系统下，会互相影响。<br>淘宝在双11的时候，用户量暴增。</p><p> 运维成本过高的问题。<br>学习一门技术，学习安装成本过高。</p><p> 关于安装软件成本过高。</p><h3 id="1-2-Docker的由来"><a href="#1-2-Docker的由来" class="headerlink" title="1.2 Docker的由来"></a>1.2 Docker的由来</h3><p>一帮年轻人创业，创办了一家公司，2010年的专门做PAAS平台。</p><p>到了2013年的时候，像亚马逊、微软、Google都开始做PAAS平台。</p><p>2013年，将公司内的核心技术对外开源，核心技术就是Docker。</p><p>到了2014年的时候，得到了C轮融资，$4000W</p><p>到了2015年的时候，得到了D轮融资，$9500W</p><p>全神贯注的维护Docker。</p><p>所罗门主要作者之一。</p><h3 id="1-3-Docker的思想"><a href="#1-3-Docker的思想" class="headerlink" title="1.3 Docker的思想"></a>1.3 Docker的思想</h3><ol><li>集装箱：<ol><li>会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到这个集装箱就可以了</li></ol></li><li>标准化：<ol><li>运输的标准化：Docker有一个码头，所有上传的集装箱都放在了这个码头上，当谁需要某一个环境，就直接指派大海豚去搬运这个集装箱就可以了。</li><li>命令的标准化：Docker提供了一系列的命令，帮助我们去获取集装箱等等操作。</li><li>提供了REST的API：衍生出了很多图形化界面，Rancher。</li></ol></li><li>隔离性：<ol><li>Docker在运行集装箱内的内容时，会在LInux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序。</li></ol></li></ol><ul><li>注册中心。（超级码头，上面放的就是集装箱）</li><li>镜像。（集装箱）</li><li>容器。（运行起来的镜像）</li></ul><h2 id="二-Docker的基本操作"><a href="#二-Docker的基本操作" class="headerlink" title="二. Docker的基本操作"></a>二. Docker的基本操作</h2><h3 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载关于Docker的依赖环境</span></span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 设置一下下载Docker的镜像源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 安装Docker</span></span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 启动，并设置为开机自动启动，测试</span></span><br><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 设置关闭自动启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> docker.service</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="2-2-Docker的中央仓库"><a href="#2-2-Docker的中央仓库" class="headerlink" title="2.2 Docker的中央仓库"></a>2.2 Docker的中央仓库</h3><ol><li><p>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度很慢。<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a></p></li><li><p>国内的镜像网站：网易蜂巢、daoCloud…</p><p><a href="https://c.163yun.com/hub#/home" target="_blank" rel="noopener">https://c.163yun.com/hub#/home</a></p><p><a href="http://hub.daocloud.io/" target="_blank" rel="noopener">http://hub.daocloud.io</a> (推荐使用)</p></li><li><p>在公司内部会采用私服的方式拉取镜像。（添加配置）</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 需要在/etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>:[<span class="string">"https://registry.docker-cn.com"</span>],</span><br><span class="line">    <span class="attr">"insecure-registries"</span>:[<span class="string">"ip:port"</span>]</span><br><span class="line">&#125;</span><br><span class="line"># 重启两个服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="2-3-镜像的操作"><a href="#2-3-镜像的操作" class="headerlink" title="2.3 镜像的操作"></a>2.3 镜像的操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line">docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看全部本地的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 删除本地镜像</span></span><br><span class="line">docker rmi 镜像的标识</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 镜像的导入导出（不规范）</span></span><br><span class="line"><span class="comment"># 将本地的镜像导出</span></span><br><span class="line">docker save -o 导出的路径 镜像id</span><br><span class="line"><span class="comment"># 加载本地的镜像文件</span></span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">docker tag 镜像id 新镜像名称:版本</span><br></pre></td></tr></table></figure><h3 id="2-4-容器的操作"><a href="#2-4-容器的操作" class="headerlink" title="2.4 容器的操作"></a>2.4 容器的操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 运行容器</span></span><br><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">docker run 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># 常用的参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># -d：代表后台运行容器</span></span><br><span class="line"><span class="comment"># -p 宿主机端口:容器端口：为了映射当前Linux端口和容器端口</span></span><br><span class="line"><span class="comment"># --name 容器名称：指定容器的名称</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看正在运行的容器</span></span><br><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment"># -a：查看全部的容器，包括没有运行</span></span><br><span class="line"><span class="comment"># -p：只查看容器得到标识</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 查看容器的日志</span></span><br><span class="line">docker logs -f 容器id</span><br><span class="line"><span class="comment"># -f：可以滚动查看日志的最后几行</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 进入到容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id bash</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 删除容器（删除容器前，需要停止容器）</span></span><br><span class="line"><span class="comment"># 停止指定的容器</span></span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="comment"># 停止全部容器</span></span><br><span class="line">docker stop $(docker pa -qa)</span><br><span class="line"><span class="comment"># 删除指定的容器</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm $(docker pa -qa)</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6. 启动容器</span></span><br><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure><h2 id="三-Docker应用"><a href="#三-Docker应用" class="headerlink" title="三. Docker应用"></a>三. Docker应用</h2><h3 id="3-1-准备SSM工程"><a href="#3-1-准备SSM工程" class="headerlink" title="3.1 准备SSM工程"></a>3.1 准备SSM工程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL数据库的连接用户名和密码改变了，修改db.properties</span></span><br></pre></td></tr></table></figure><h3 id="3-2-准备MySQL容器"><a href="#3-2-准备MySQL容器" class="headerlink" title="3.2 准备MySQL容器"></a>3.2 准备MySQL容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行MySQL容器</span></span><br><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4</span><br></pre></td></tr></table></figure><h3 id="3-3-准备Tomcat容器"><a href="#3-3-准备Tomcat容器" class="headerlink" title="3.3 准备Tomcat容器"></a>3.3 准备Tomcat容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行Tomcat容器，前面已经搞定，只需要将SSM项目的war包部署到Tomcat容器内部即可</span></span><br><span class="line"><span class="comment"># 可以通过命令将宿主机的内容服务到容器内部</span></span><br><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br><span class="line"><span class="comment"># 举个例子</span></span><br><span class="line">docker cp ssm.war fe:/usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><h3 id="3-4-数据卷"><a href="#3-4-数据卷" class="headerlink" title="3.4 数据卷"></a>3.4 数据卷</h3><blockquote><p>为了部署SSM的工程，需要使用到cp命令将宿主机内的ssm.war文件复制到容器内部。</p><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建数据卷</span></span><br><span class="line">docker volume create 数据卷名称</span><br><span class="line"><span class="comment"># 创建数据卷之后，默认会存放在一个目录下 /war/lib/docker/volumes/数据卷名称/_data</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看数据卷的详细信息</span></span><br><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 查看全部数据卷</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 删除数据卷</span></span><br><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 应用数据卷</span></span><br><span class="line"><span class="comment"># 当你映射数据卷时，如果数据卷不存在，Docker会自动帮你创建，会将容器内部自带的文件，存储在默认的存放路径中</span></span><br><span class="line">docker run -v 数据卷名称:容器内部的路径 镜像id</span><br><span class="line"><span class="comment"># 直接指定一个路径作为数据卷的存放位置，这个路径下是空的。</span></span><br><span class="line">docker run -v 路径:容器内部的路径 镜像id</span><br></pre></td></tr></table></figure><hr><h2 id="四-Docker自定义镜像"><a href="#四-Docker自定义镜像" class="headerlink" title="四. Docker自定义镜像"></a>四. Docker自定义镜像</h2><blockquote><p> 中央仓库上的镜像，也是Docker的用户自己上传过去的。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个Dockerfile文件，并且指定自定义镜像信息</span></span><br><span class="line"><span class="comment"># Dockerfile文件中常用的内容</span></span><br><span class="line">from：指定当前自定义镜像依赖的环境</span><br><span class="line">copy：将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir：声明镜像的默认工作目录</span><br><span class="line">cmd：需要执行的命令（在workdir下执行的，cmd可以写多的，只以最后一个为准）</span><br><span class="line"><span class="comment"># 举个例子，自定义一个Tomcat镜像，并且将ssm.war部署到Tomcat中</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 将准备好的Dockerfile和相应的文件拖拽到Linux操作系统中，通过Docker的命令制作镜像</span></span><br><span class="line">docker build -t 镜像名称:[tag] .</span><br></pre></td></tr></table></figure><h2 id="五-Docker-Compose"><a href="#五-Docker-Compose" class="headerlink" title="五. Docker-Compose"></a>五. Docker-Compose</h2><blockquote><p>之前运行一个镜像，需要添加大量的参数。</p><p>可以通过Docker-Compose编写这些参数。</p><p>Docker-Compose可以帮助我们批量的管理容器。</p><p>只需要通过一个docker-compose.yml文件去维护即可。</p></blockquote><h3 id="5-1-下载Docker-Compose"><a href="#5-1-下载Docker-Compose" class="headerlink" title="5.1 下载Docker-Compose"></a>5.1 下载Docker-Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 去GitHub官网搜索docker-compose，下载最新版本的Docker-Compose</span></span><br><span class="line"><span class="comment"># 2. 将下载好的文件，拖拽到Linux操作系统中</span></span><br><span class="line"><span class="comment"># 3. 需要将Docker-Compose文件名称修改一下，给予DockerCompose文件一个可执行的权限</span></span><br><span class="line">mv docker-compose-Linux-x86_64 docker-compose</span><br><span class="line">chmod 777 docker-compose</span><br><span class="line"><span class="comment"># 4. 方便后期操作，配置一个环境变量</span></span><br><span class="line"><span class="comment"># 将docker-compose文件移动到/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到PATH中</span></span><br><span class="line">mv docker-compose /usr/<span class="built_in">local</span>/bin</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 5. 测试一下</span></span><br><span class="line"><span class="comment"># 在任意目录下输入docker-compose</span></span><br></pre></td></tr></table></figure><h3 id="5-2-Docker-Compose管理MySQL和Tomcat容器"><a href="#5-2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="5.2 Docker-Compose管理MySQL和Tomcat容器"></a>5.2 Docker-Compose管理MySQL和Tomcat容器</h3><blockquote><p> yml文件以key:value方式指定配置信息</p><p> 多个配置信息以换行+缩进的方式来区分</p><p> 在docker-compose.yml文件中，不要使用制表符</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span><span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mysql:</span>                     <span class="comment"># 服务的名称</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">daocloud.io/library/mysql:5.7.4</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mysql</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line"><span class="attr">      TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/opt/docker_mysql-tomcat/mysql_data:/var/lib/mysql</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line"><span class="attr">  tomcat:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">tomcat</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:8080</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line"><span class="attr">      TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_logs:/usr/local/tomcat/logs</span>        <span class="comment"># 映射数据卷</span></span><br></pre></td></tr></table></figure><h3 id="5-3-使用Docker-Compose命令管理容器"><a href="#5-3-使用Docker-Compose命令管理容器" class="headerlink" title="5.3 使用Docker-Compose命令管理容器"></a>5.3 使用Docker-Compose命令管理容器</h3><blockquote><p> 在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 基于docker-compose.yml启动管理的容器</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 开启|关闭|重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h3 id="5-4-docker-compose配置Dockerfile使用"><a href="#5-4-docker-compose配置Dockerfile使用" class="headerlink" title="5.4 docker-compose配置Dockerfile使用"></a>5.4 docker-compose配置Dockerfile使用</h3><blockquote><p> 使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p></blockquote><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yml文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  ssm:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    build:</span>                           <span class="comment"># 构建自定义镜像</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">../</span>                   <span class="comment"># 指定Dockerfile文件所在路径</span></span><br><span class="line"><span class="attr">      dockerfile:</span> <span class="string">Dockerfile</span>         <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">ssm:1.0.1</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">ssm</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line">      <span class="number">8081</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><hr><h4 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span></span><br><span class="line"><span class="comment"># 重新构建的话</span></span><br><span class="line"><span class="comment"># 重新构建自定义镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment"># 运行前，重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><hr><h2 id="六-Docker-DI、CD"><a href="#六-Docker-DI、CD" class="headerlink" title="六. Docker DI、CD"></a>六. Docker DI、CD</h2><h3 id="6-1-引言"><a href="#6-1-引言" class="headerlink" title="6.1 引言"></a>6.1 引言</h3><blockquote><p> 项目部署</p><ol><li>将项目通过maven进行编译打包</li><li>将文件上传到指定的服务器中</li><li>将war包放到tomcat的目录中</li><li>通过Dockerfile将Tomcat和war包转成一个镜像，由DockerCompose去运行容器</li></ol><p>项目更新了</p><p> 将上述流程再次的从头到尾的执行一次</p></blockquote><h3 id="6-2-CI介绍"><a href="#6-2-CI介绍" class="headerlink" title="6.2 CI介绍"></a>6.2 CI介绍</h3><blockquote><p>CI（ continuous intergration ）持续集成</p><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试</p><ul><li>快速发现错误</li><li>防止代码偏离主分支</li></ul></blockquote><h3 id="6-3-实现持续集成"><a href="#6-3-实现持续集成" class="headerlink" title="6.3 实现持续集成"></a>6.3 实现持续集成</h3><h4 id="6-3-1-搭建GItLab服务器"><a href="#6-3-1-搭建GItLab服务器" class="headerlink" title="6.3.1 搭建GItLab服务器"></a>6.3.1 搭建GItLab服务器</h4><blockquote><p> 1、创建一个全新的虚拟机，并且至少指定4G的运行内存</p><p> 2、安装docker以及docker-compose</p><p> 3、将ssh的默认22端口，修改为60022端口</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">PORT 22 -&gt; 60022</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><blockquote><p> 4、docker-compose.yml问价去安装GitLab</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  gitlab:</span> </span><br><span class="line"><span class="attr">   image:</span> <span class="string">'twang2218/gitlab-ce-zh:11.1.4'</span></span><br><span class="line"><span class="attr">   container_name:</span> <span class="string">"gitlab"</span></span><br><span class="line"><span class="attr">   restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">   privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">   hostname:</span> <span class="string">'gitlab'</span></span><br><span class="line"><span class="attr">   environment:</span> </span><br><span class="line"><span class="attr">     TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line"><span class="attr">     GITLAB_OMNIBUS_CONFIG:</span> </span><br><span class="line">       <span class="string">external_url</span> <span class="string">'http://192.168.199.110'</span></span><br><span class="line">       <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">       <span class="string">gitlab_rails['smtp_enable']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">22</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">'22:22'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/config:/etc/gitlab</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/data:/var/opt/gitlab</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-搭建GitLab-Runner"><a href="#6-3-2-搭建GitLab-Runner" class="headerlink" title="6.3.2 搭建GitLab-Runner"></a>6.3.2 搭建GitLab-Runner</h4><blockquote><p> 查看资料中的gitlab-runner文件即可安装</p></blockquote><h4 id="6-3-3-整合项目入门测试"><a href="#6-3-3-整合项目入门测试" class="headerlink" title="6.3.3 整合项目入门测试"></a>6.3.3 整合项目入门测试</h4><blockquote><p> 1、创建maven工程，添加web.xml文件，编写html页面</p><p> 2、编写gitlab-ci.yml文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span> </span><br><span class="line"><span class="bullet"> -</span> <span class="string">test</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span> </span><br><span class="line"><span class="bullet">   -</span> <span class="string">echo</span> <span class="string">first</span> <span class="string">test</span> <span class="string">ci</span> <span class="comment"># 输入的命令</span></span><br></pre></td></tr></table></figure><blockquote><p> 3、将maven工程推送到Gitlab中</p><p> 4、可以在Gitlab中查看到gitlab-ci.yml编写的内容</p></blockquote><h4 id="6-3-4-编写gitlab-ci-yml文件"><a href="#6-3-4-编写gitlab-ci-yml文件" class="headerlink" title="6.3.4 编写gitlab-ci.yml文件"></a>6.3.4 编写gitlab-ci.yml文件</h4><blockquote><p> 1、编写gitlab-ci.yml测试命令使用</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span> </span><br><span class="line"><span class="bullet"> -</span> <span class="string">test</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span> </span><br><span class="line"><span class="bullet">   -</span> <span class="string">echo</span> <span class="string">first</span> <span class="string">test</span> <span class="string">ci</span> <span class="comment"># 输入的命令</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">/usr/local/maven/apache-maven-3.6.3/bin/mvn</span> <span class="string">package</span></span><br></pre></td></tr></table></figure><blockquote><p> 2、编写关于Dockerfile以及docker-compose文件的具体内容</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. Dockerfile</span></span><br><span class="line">FROM daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">COPY testci.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">  testci:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">docker</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">testci</span></span><br><span class="line"><span class="attr">    ports:</span> </span><br><span class="line"><span class="bullet">     -</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><blockquote><p> 3、测试</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/fork.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://tcrushes.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://tcrushes.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>U盘文件夹变成exe应用程序</title>
    <link href="https://tcrushes.github.io/2019/10/20/U%E7%9B%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%98%E6%88%90exe%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F.html"/>
    <id>https://tcrushes.github.io/2019/10/20/U盘文件夹变成exe应用程序.html</id>
    <published>2019-10-20T04:19:16.000Z</published>
    <updated>2019-12-04T01:02:43.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/a2.png" alt></p><a id="more"></a><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>在日常使用中，你可能会遇到：U盘的文件夹都变成了exe应用程序，或者文件夹直接不见了，但查看U盘的内存可是已经用掉了。是因为U盘中了 <strong>Autorun</strong> 病毒。可以百度、Google下这个病毒，都有详细介绍。</p><h2 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h2><p>下载杀毒软件，对U盘、计算机进行杀毒。听说：计算机裸奔才是最安全的，因此，这里就不介绍这种方法了。</p><h2 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h2><p><strong>基本步骤</strong></p><ol><li><p>先打开计算机的查看方式，把文件扩展名，隐藏的项目选项勾上，其实不做也是可以的。</p></li><li><p>在U盘中新建两个.txt文件，命名随意，这里就命名为a.txt和b.txt</p><ul><li>在a中增添如下代码：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00 </span><br><span class="line">[HKEY_LOCAL_ MACHINE \SOFTWARE\Microsoft\Windows\CurrentVersion</span><br><span class="line">\Explorer\Advanced\Folder\Hidden</span><br><span class="line">\SHOWALL] "CheckedValue"=dword:00000001</span><br></pre></td></tr></table></figure><ul><li>在b中增添如下代码：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /f "delims=" %%i in ('dir /ah /s/b') do attrib "%%i" -s -h</span><br></pre></td></tr></table></figure></li><li><p>将a的扩展名改为reg，将b的扩展名改为bat</p></li><li><p>依次执行a，b</p></li></ol><p>然后文件就会出现了。把exe删掉</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/a2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="https://tcrushes.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="U盘" scheme="https://tcrushes.github.io/tags/U%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>@RequestMapping详解</title>
    <link href="https://tcrushes.github.io/2019/09/22/RequestMapping%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://tcrushes.github.io/2019/09/22/RequestMapping详解.html</id>
    <published>2019-09-22T03:51:26.000Z</published>
    <updated>2020-01-19T15:18:52.692Z</updated>
    
    <content type="html"><![CDATA[<p><code>@RequestMapping</code>是Spring Web应用程序中最常见的注解之一，她将HTTP请求映射到mvc和rest控制的处理方法上，大大减小我们的工作量，下面对<code>@RequestMapping</code>进行介绍。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>@RequestMapping</code>可以修饰类，也可以修饰方法。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="1、value，method"><a href="#1、value，method" class="headerlink" title="1、value，method"></a>1、value，method</h3><h3 id="2、params，headers"><a href="#2、params，headers" class="headerlink" title="2、params，headers"></a>2、params，headers</h3><h3 id="3、consumes，produces"><a href="#3、consumes，produces" class="headerlink" title="3、consumes，produces"></a>3、consumes，produces</h3><h1 id><a href="#" class="headerlink" title="#"></a>#</h1><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;是Spring Web应用程序中最常见的注解之一，她将HTTP请求映射到mvc和rest控制的处理方法上，大大减小我们的工作量，下面对&lt;code&gt;@RequestMapping&lt;/code&gt;进行介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tcrushes.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://tcrushes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言</title>
    <link href="https://tcrushes.github.io/2019/09/07/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80.html"/>
    <id>https://tcrushes.github.io/2019/09/07/汇编语言.html</id>
    <published>2019-09-07T10:40:20.000Z</published>
    <updated>2019-09-21T14:47:51.541Z</updated>
    
    <content type="html"><![CDATA[<p>机器语言编写程序绝对是让人一件头疼的事情，为了避免使用0和1的组合来编写程序。汇编语言使用短语（缩写）来表示指令，使用变量名称来表示存储空间的位置。汇编语言指令与机器语言指令之间存在着一对一的关系。</p><p>汇编语言的学习，一点笔记。。。</p><a id="more"></a><h2 id="1、汇编语言介绍"><a href="#1、汇编语言介绍" class="headerlink" title="1、汇编语言介绍"></a>1、汇编语言介绍</h2><p>汇编语言（assembly language）是一种用于<strong>电子计算机</strong>、<strong>微处理器</strong>、<strong>微控制器</strong>或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用<strong>助记符</strong>代替<strong>机器指令</strong>的<strong>操作码</strong>，用地址符号或标号代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言<strong>指令集</strong>，通过汇编过程转换成机器指令。特定的汇编语言和特定的机器语言指令集是一一对应的，不同平台之间不可直接移植</p><p>—-来自百度百科</p><h2 id="2、变量、寄存器与数据移动"><a href="#2、变量、寄存器与数据移动" class="headerlink" title="2、变量、寄存器与数据移动"></a>2、变量、寄存器与数据移动</h2><h3 id="2-1、Hello-World"><a href="#2-1、Hello-World" class="headerlink" title="2.1、Hello World"></a>2.1、Hello World</h3><h3 id="2-2、变量声明"><a href="#2-2、变量声明" class="headerlink" title="2.2、变量声明"></a>2.2、变量声明</h3><p>变量名必须以字母打头，其后可以跟着字母数字，可以包含‘_’，’@’，’$’特殊符号，但是通常避免使用特殊符号。<strong>变量名不区分大小写，最大长度为247个字符，通常变量名有1~10个字符组成。</strong></p><div class="table-container"><table><thead><tr><th>类型</th><th>占比特位数</th><th>表示范围（包含）</th></tr></thead><tbody><tr><td>sdword</td><td>32</td><td></td></tr><tr><td>dword</td><td>32</td><td></td></tr><tr><td>sword</td><td>16</td><td></td></tr><tr><td>word</td><td>16</td><td></td></tr><tr><td>sbyte</td><td>8</td><td>-128~127</td></tr><tr><td>byte</td><td>8</td><td>0~255</td></tr></tbody></table></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num=<span class="number">5</span>; <span class="comment">//c语言</span></span><br><span class="line">num sdword <span class="number">5</span> ; num被初始化为<span class="number">5</span>，汇编语言;表示注释</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> grade;</span><br><span class="line">grade byte ? ;?表示汇编程序不对其进行初始化操作</span><br><span class="line"></span><br><span class="line">grades byte <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span> ; 声明字节数组</span><br><span class="line"></span><br><span class="line">name byte 'abc' ; 声明整体字符串</span><br><span class="line"></span><br><span class="line">name byte 'abc',0 ; 字符串结尾通常带有二进制0，占用1个字节，用于表示字符串结束</span><br></pre></td></tr></table></figure><h3 id="2-3、立即数"><a href="#2-3、立即数" class="headerlink" title="2.3、立即数"></a>2.3、立即数</h3><p>mov指令将右边操作数值指派给左边的操作数，右边的操作数称为源操作数，左边的操作数称为目的操作数。</p><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th></tr></thead><tbody><tr><td>mov mem, imm</td><td>将立即数存储到内存中</td></tr><tr><td>mov reg, imm</td><td>将内存单元的值存储到寄存器中</td></tr><tr><td>mov mem, reg</td><td>将寄存器中的内容存储到内存单元中</td></tr><tr><td>mov reg, imm</td><td>将立即数存储到寄存器中</td></tr><tr><td>mov reg, reg</td><td>将源（第二）寄存器中的内容存储到目的（第一）寄存器中</td></tr></tbody></table></div><p>imm：immediate</p><p>mem：memory</p><p>reg：register</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov num1, 5 ; num1地址，5立即数</span><br></pre></td></tr></table></figure><h3 id="2-4、寄存器"><a href="#2-4、寄存器" class="headerlink" title="2.4、寄存器"></a>2.4、寄存器</h3><p>数据不能直接从一个内存单元移动到另一个内存单元中。</p><p>先把随机数存储器（RAM）当中某一个存储单元的内容复制或装载到中央处理器（CPU）中，然后再从中央处理器中把这个内容复制或存储回随机存储器的某一个单元中。在CPU中实现上述快速地、临时性的存储空间作用的部件称为<strong>存储器</strong>，也称累加器</p><h3 id="2-5、数据移动"><a href="#2-5、数据移动" class="headerlink" title="2.5、数据移动"></a>2.5、数据移动</h3><p>如果实现num2=num1；因为不能从一个内存单元移动数据到另一个内存单元，因此不能写成mov num2, num1；必须需要把num1的内容复制到寄存器中，然后将寄存器中的内容复制到num2中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;num1, num2</span><br><span class="line">mov eax, num1 ;将num1的值装载到寄存器eax中</span><br><span class="line">mov num2, eax ;将寄存器eax的值装载到num2中</span><br></pre></td></tr></table></figure><h3 id="2-6、字符数据"><a href="#2-6、字符数据" class="headerlink" title="2.6、字符数据"></a>2.6、字符数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1,str2;</span><br><span class="line">str1=<span class="string">'A'</span>;</span><br><span class="line">str2=str1;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str1byte?</span><br><span class="line">str1byte?</span><br><span class="line">.code</span><br><span class="line">mov str1, &apos;A&apos; ;将‘A’存储到str1中</span><br><span class="line">mov al, str1 ;将str1的值存储到寄存器中</span><br><span class="line">mov str2, al ;将寄存器的值存储到str2中</span><br></pre></td></tr></table></figure><h2 id="3、输入与输出"><a href="#3、输入与输出" class="headerlink" title="3、输入与输出"></a>3、输入与输出</h2><h3 id="3-1、Hello-World"><a href="#3-1、Hello-World" class="headerlink" title="3.1、Hello World"></a>3.1、Hello World</h3><h3 id="3-2、整数输出"><a href="#3-2、整数输出" class="headerlink" title="3.2、整数输出"></a>3.2、整数输出</h3><h3 id="3-3、整数输入"><a href="#3-3、整数输入" class="headerlink" title="3.3、整数输入"></a>3.3、整数输入</h3><h2 id="4、算术运算指令"><a href="#4、算术运算指令" class="headerlink" title="4、算术运算指令"></a>4、算术运算指令</h2><h3 id="4-1、加法与减法运算"><a href="#4-1、加法与减法运算" class="headerlink" title="4.1、加法与减法运算"></a>4.1、加法与减法运算</h3><ul><li>加法指令</li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th></tr></thead><tbody><tr><td>add mem, imm</td><td>将内存单元的数值与立即数的值相加，结果值放到内存单元中</td></tr><tr><td>add reg, mem</td><td>将寄存器中的值加上内存单元中的值，结果值放到寄存器中</td></tr><tr><td>add mem, reg</td><td>将内存单元中的值加上寄存器中的值，结果值放到内存单元中</td></tr><tr><td>add reg, imm</td><td>将寄存器中的值加上立即数的值，结果值放到寄存器中</td></tr><tr><td>add reg, reg</td><td>将目的(第一个)寄存器的值加上源(第二个)寄存器的值，结果值放到目的寄存器中</td></tr></tbody></table></div><ul><li>减法指令</li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th></tr></thead><tbody><tr><td>sub mem, imm</td><td>将内存单元的数值减去立即数的值，结果值放到内存单元中</td></tr><tr><td>sub reg, mem</td><td>将寄存器中的值减去内存单元中的值，结果值放到寄存器中</td></tr><tr><td>sub mem, reg</td><td>将内存单元中的值减去寄存器中的值，结果值放到内存单元中</td></tr><tr><td>sub reg, imm</td><td>将寄存器中的值减去立即数的值，结果值放到寄存器中</td></tr><tr><td>sub reg, reg</td><td>将目的(第一个)寄存器的值减去源(第二个)寄存器的值，结果值放到目的寄存器中</td></tr></tbody></table></div><h3 id="4-2、乘法与除法运算"><a href="#4-2、乘法与除法运算" class="headerlink" title="4.2、乘法与除法运算"></a>4.2、乘法与除法运算</h3><ul><li>乘法指令</li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th></tr></thead><tbody><tr><td>imul reg</td><td>将寄存器eax的值与寄存器中的整数值相乘</td></tr><tr><td>imul mem</td><td>将内存单元中的整数值与寄存器eax中的值相乘</td></tr></tbody></table></div><ul><li>idiv指令-除法指令</li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th></tr></thead><tbody><tr><td>idiv reg</td><td>将寄存器中的值拆分开存储带寄存器对edx:eax中</td></tr><tr><td>idiv mem</td><td>将内存中的值拆分开存储到寄存器对edx:eax中</td></tr></tbody></table></div><ul><li>转化指令</li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>意义</th><th>描述</th></tr></thead><tbody><tr><td>cbw</td><td>字节转化为字</td><td>寄存器al的内容扩展到寄存器ax</td></tr><tr><td>cwb</td><td>字转化为双字</td><td>寄存器ax的内容扩展到寄存器eax</td></tr><tr><td>cbq</td><td>双字转化为4个字</td><td>寄存器eax的内容扩展到寄存器对edx:eax</td></tr></tbody></table></div><h3 id="4-3、一元运算"><a href="#4-3、一元运算" class="headerlink" title="4.3、一元运算"></a>4.3、一元运算</h3><h3 id="4-4、优先级"><a href="#4-4、优先级" class="headerlink" title="4.4、优先级"></a>4.4、优先级</h3><h2 id="5、选择结构"><a href="#5、选择结构" class="headerlink" title="5、选择结构"></a>5、选择结构</h2><h3 id="5-1、if-then结构"><a href="#5-1、if-then结构" class="headerlink" title="5.1、if-then结构"></a>5.1、if-then结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1)</span></span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">    num--;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2)</span></span><br><span class="line"><span class="keyword">if</span>(amount!=<span class="number">1</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    amount=amount+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">; 1)</span><br><span class="line">.if num==0</span><br><span class="line">dec num</span><br><span class="line">.endif</span><br><span class="line"></span><br><span class="line">; 2)</span><br><span class="line">.if amount!=1</span><br><span class="line">inc count</span><br><span class="line">add amount, 2</span><br><span class="line">.endif</span><br></pre></td></tr></table></figure><h3 id="5-2、if-then-else结构"><a href="#5-2、if-then-else结构" class="headerlink" title="5.2、if-then-else结构"></a>5.2、if-then-else结构</h3><p>else使用<code>.else</code>汇编指令实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x&gt;=y)</span><br><span class="line">    x--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    y++;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; if(x&gt;=y)</span><br><span class="line">mov eax, x ;将x的值存储寄存器eax中，因为不能直接比较两个内存单元的值</span><br><span class="line">.if eax&gt;=y</span><br><span class="line">dec x</span><br><span class="line">.else</span><br><span class="line">inc y</span><br><span class="line">.endif</span><br></pre></td></tr></table></figure><h3 id="5-3、嵌套if结构"><a href="#5-3、嵌套if结构" class="headerlink" title="5.3、嵌套if结构"></a>5.3、嵌套if结构</h3><p>使用多个<code>.endif</code>结束if结构</p><h3 id="5-4、case结构"><a href="#5-4、case结构" class="headerlink" title="5.4、case结构"></a>5.4、case结构</h3><p>使用je指令实现case结构</p><h3 id="5-5、字符与逻辑运算符"><a href="#5-5、字符与逻辑运算符" class="headerlink" title="5.5、字符与逻辑运算符"></a>5.5、字符与逻辑运算符</h3><h2 id="6、迭代结构"><a href="#6、迭代结构" class="headerlink" title="6、迭代结构"></a>6、迭代结构</h2><h3 id="6-1、前置检测循环while"><a href="#6-1、前置检测循环while" class="headerlink" title="6.1、前置检测循环while"></a>6.1、前置检测循环while</h3><p><code>.while</code>和<code>.endw</code>汇编指令实现while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">3</span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov i, 1</span><br><span class="line">.while i&lt;=3</span><br><span class="line">inc i</span><br><span class="line">.endw</span><br></pre></td></tr></table></figure><p>当然也可以使用if-then=else中无条件跳转命令，类似goto语句</p><h3 id="6-2、后置检测循环do-while"><a href="#6-2、后置检测循环do-while" class="headerlink" title="6.2、后置检测循环do-while"></a>6.2、后置检测循环do-while</h3><p><code>.repeat</code>和<code>until</code>汇编指令实现do-while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span>(i&lt;=<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov i, 1</span><br><span class="line">.repeat</span><br><span class="line">inc i</span><br><span class="line">.until i&gt;3</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>.until i&gt;3替换了i&lt;=3，repeat-until循环是直到i&gt;3时，循环才不执行。</p></blockquote><h3 id="6-3、固定迭代循环for"><a href="#6-3、固定迭代循环for" class="headerlink" title="6.3、固定迭代循环for"></a>6.3、固定迭代循环for</h3><p><code>.repeat</code>和<code>.untilcxz</code>汇编指令实现</p><p><code>.repeat</code>和<code>.untilcxz</code>指令使用ecx寄存器作为计数器，<code>.untilcxz</code>完成两个任务，把寄存器ecx的值减1，然后当寄存器ecx的值不为0时，它将跳转到<code>.repeat</code>指令处执行，也就是：当寄存器ecx的值为0时（cxz），循环停止执行。for循环是前置循环，而<code>.</code>repeat和<code>.untilcxz</code>指令是后置循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax, 3</span><br><span class="line">.repeat</span><br><span class="line">; 循环体</span><br><span class="line">.untilcxz</span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>首先，将需要执行的次数装载到寄存器ecx中，然后。untilcxz执行一次，寄存器ecx的值减1，同时与0比较，如果不为0，继续循环，为0，则程序控制流跳转到.untilcxz之后开始执行</p></blockquote><h3 id="6-4、循环与输出输入"><a href="#6-4、循环与输出输入" class="headerlink" title="6.4、循环与输出输入"></a>6.4、循环与输出输入</h3><p>INVOKE指令会破坏寄存器eax、ecx和edx的值，<code>.repeat</code>-<code>.untilcxz</code>指令需要使用到寄存器eax的值，因此在输出输入的时候，需要存储寄存器eax的值。注意这里的使用。</p><h3 id="6-5、嵌套循环"><a href="#6-5、嵌套循环" class="headerlink" title="6.5、嵌套循环"></a>6.5、嵌套循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">2</span>) &#123;</span><br><span class="line">    j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=<span class="number">3</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov i, 1</span><br><span class="line">.while i&lt;=2</span><br><span class="line">mov j, 1</span><br><span class="line">.while j&lt;=3</span><br><span class="line">inc j</span><br><span class="line">.endw</span><br><span class="line">inc i</span><br><span class="line">.endw</span><br></pre></td></tr></table></figure><h2 id="7、运算指令"><a href="#7、运算指令" class="headerlink" title="7、运算指令"></a>7、运算指令</h2><h3 id="7-1、逻辑运算指令"><a href="#7-1、逻辑运算指令" class="headerlink" title="7.1、逻辑运算指令"></a>7.1、逻辑运算指令</h3><h3 id="7-2、逻辑移位指令"><a href="#7-2、逻辑移位指令" class="headerlink" title="7.2、逻辑移位指令"></a>7.2、逻辑移位指令</h3><h3 id="7-3、算术移位指令"><a href="#7-3、算术移位指令" class="headerlink" title="7.3、算术移位指令"></a>7.3、算术移位指令</h3><h3 id="7-4、循环移位指令"><a href="#7-4、循环移位指令" class="headerlink" title="7.4、循环移位指令"></a>7.4、循环移位指令</h3><h3 id="7-5、堆栈操作"><a href="#7-5、堆栈操作" class="headerlink" title="7.5、堆栈操作"></a>7.5、堆栈操作</h3><h3 id="7-6、数据交换"><a href="#7-6、数据交换" class="headerlink" title="7.6、数据交换"></a>7.6、数据交换</h3><h2 id="8、过程与宏"><a href="#8、过程与宏" class="headerlink" title="8、过程与宏"></a>8、过程与宏</h2><h3 id="8-1、过程"><a href="#8-1、过程" class="headerlink" title="8.1、过程"></a>8.1、过程</h3><p>调用过程的指令为call，call指令只有一个操作数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; pname为过程名，汇编指令proc指出过程</span><br><span class="line">pname proc</span><br><span class="line">; 过程体，后需要有ret指令</span><br><span class="line">ret</span><br><span class="line">pname endp ；结束</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sample proc</span><br><span class="line">add eax,ebx</span><br><span class="line">add eax,ecx</span><br><span class="line">add eax,edx</span><br><span class="line">ret</span><br><span class="line">sample endp</span><br></pre></td></tr></table></figure><p>调用过程：</p><p>call sample</p><h3 id="8-2、宏"><a href="#8-2、宏" class="headerlink" title="8.2、宏"></a>8.2、宏</h3><p>使用<code>macro</code>定义宏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mname macro</span><br><span class="line">; 宏体</span><br><span class="line">endm</span><br></pre></td></tr></table></figure><p>调用过程需要使用call，调用宏直接写出宏的名字即可。</p><ul><li>宏传递参数</li></ul><p>命名参数是一个代替参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swap macro p1,p2 ;p1，p2是命名参数</span><br><span class="line">    mov ebx,p1</span><br><span class="line">    xchg ebx,p2 ;交换ebx和p2的值</span><br><span class="line">    mov p1,ebx</span><br><span class="line">    endm</span><br></pre></td></tr></table></figure><p>使用注释来文档化宏定义，又不希望在宏扩展中看到注释，可以使用（;;）代替（;）进行注释</p><h2 id="9、数组"><a href="#9、数组" class="headerlink" title="9、数组"></a>9、数组</h2><h3 id="9-1、数组声明与编制"><a href="#9-1、数组声明与编制" class="headerlink" title="9.1、数组声明与编制"></a>9.1、数组声明与编制</h3><p>数组是连续的，因此声明数组最简单的方法就是按照内存位置依次罗列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">num1 sdword 2</span><br><span class="line">num2 sdword 3</span><br><span class="line">num3 sdword 4</span><br></pre></td></tr></table></figure><p>当然，这种办法很不现实</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numary  sdword 2</span><br><span class="line">sdword 3</span><br><span class="line">sdword 4</span><br></pre></td></tr></table></figure><p>在MASM中有更简单的方法，<code>sdword</code>只需要出现一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numary sdword 2,3,4</span><br><span class="line"></span><br><span class="line">empary sdword ?,?,? ;不初始化数组</span><br></pre></td></tr></table></figure><p>也许你发现了问题，如果有几百个元素，那不是需要写很多，如果更多，就更加糟糕了。</p><p>当然有简单方法了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numary sdword 3 dup(0)</span><br><span class="line">empary sdword 3 dup(?) ;未初始化</span><br></pre></td></tr></table></figure><h3 id="9-2、数组索引"><a href="#9-2、数组索引" class="headerlink" title="9.2、数组索引"></a>9.2、数组索引</h3><p>看一个示例，在C语言中，我们常常会求一个数组的和。eg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    sum+=num[i];</span><br></pre></td></tr></table></figure><p>我们从上面看到求数组的和，即遍历索引数组元素，然后相加。因此需要使用循环，如果你忘记了，可以向前翻一翻哦。这里就不写初始化变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov sum,0</span><br><span class="line">mov ecx,3</span><br><span class="line">mov ebx,0</span><br><span class="line">.repeat</span><br><span class="line">mov eax,num[ebx]</span><br><span class="line">add sum,eax</span><br><span class="line">add ebx,4 ;寄存器ebx的值加上4，跳到下一个元素</span><br><span class="line">.untilcxz</span><br></pre></td></tr></table></figure><p>你不防试一试使用for循环求解。</p><h3 id="9-3、使用esi和edi寄存器索引"><a href="#9-3、使用esi和edi寄存器索引" class="headerlink" title="9.3、使用esi和edi寄存器索引"></a>9.3、使用esi和edi寄存器索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ebx,4</span><br><span class="line">mov eax,num[ebx]</span><br></pre></td></tr></table></figure><p>寄存器加上4，指向下一个元素的地址，然后将地址上的值装载到寄存器eax中。下面看看寄存器esi是如何的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esi,offset num+4</span><br><span class="line">mov eax,[esi]</span><br></pre></td></tr></table></figure><p>这里不是把num+4中的内容装载到寄存器esi中，这里offset的操作是将内存位置num+4的地址值装载到寄存器esi中。注意后面的装载，没有num。</p><p>我们前面知道了，不能直接将一个内存位置复制到另一个内存位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax,num1</span><br><span class="line">mov num2,eax</span><br></pre></td></tr></table></figure><p>看看另一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lea esi,num1 ;将num1的地址装载到寄存器esi中</span><br><span class="line">lea edi,num2</span><br><span class="line">mov eax,[esi] ;将寄存器esi所指内存地址中的内容装载到寄存器eax</span><br><span class="line">mov [edi],eax ;将寄存器eax的内容装载到寄存器edi所指向的地址中</span><br></pre></td></tr></table></figure><h3 id="9-4、lengthof和sizeof"><a href="#9-4、lengthof和sizeof" class="headerlink" title="9.4、lengthof和sizeof"></a>9.4、lengthof和sizeof</h3><p>在C语言中，知道一个数组的长度和大小是多么重要，汇编也不例外</p><p>lengthof操作符确定数组中有多少个元素，sizeof操作符确定数组多少个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ecx,lengthof num</span><br><span class="line">mov eax,sizeof num</span><br></pre></td></tr></table></figure><h2 id="10、字符串"><a href="#10、字符串" class="headerlink" title="10、字符串"></a>10、字符串</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器语言编写程序绝对是让人一件头疼的事情，为了避免使用0和1的组合来编写程序。汇编语言使用短语（缩写）来表示指令，使用变量名称来表示存储空间的位置。汇编语言指令与机器语言指令之间存在着一对一的关系。&lt;/p&gt;
&lt;p&gt;汇编语言的学习，一点笔记。。。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编语言" scheme="https://tcrushes.github.io/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="汇编语言" scheme="https://tcrushes.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis笔记</title>
    <link href="https://tcrushes.github.io/2019/08/01/MyBatis%E7%AC%94%E8%AE%B0.html"/>
    <id>https://tcrushes.github.io/2019/08/01/MyBatis笔记.html</id>
    <published>2019-08-01T05:14:20.000Z</published>
    <updated>2020-01-20T14:20:05.116Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集。MyBatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的 POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。</p><a id="more"></a><p>官方文档中文版：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></p><p>官方文档英文版：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p><h3 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h3><p>下载：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></p><p>使用maven构建项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、入门"><a href="#2、入门" class="headerlink" title="2、入门"></a>2、入门</h3><ul><li>从XML中构建SqlSessionFactory</li></ul><p>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的Configuration 的实例构建出 SqlSessionFactory 的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><p>XML 配置文件中包含了对 MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）。mybatis-config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"EmployeeMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不使用 XML 构建 SqlSessionFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();</span><br><span class="line">TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">Environment environment = <span class="keyword">new</span> Environment(<span class="string">"development"</span>, transactionFactory, dataSource);</span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">configuration.addMapper(BlogMapper.class);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br></pre></td></tr></table></figure><p>注意该例中，configuration 添加了一个映射器类（mapper class）。映射器类是Java 类，它们包含 SQL 映射语句的注解从而避免依赖 XML 文件。不过，由于Java 注解的一些限制以及某些 MyBatis 映射的复杂性，要使用大多数高级映射（比如：嵌套联合映射），仍然需要使用 XML配置。有鉴于此，如果存在一个同名XML 配置文件，MyBatis 会自动查找并加载它（在这个例子中，基于类路径和 BlogMapper.class 的类名，会加载BlogMapper.xml）。</p><ul><li>从 SqlSessionFactory 中获取 SqlSession</li></ul><p>SqlSession完全包含了面向数据库执行 SQL 命令所需的所有方法。你可以通过SqlSession 实例来直接执行已映射的 SQL 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  Blog blog = (Blog) session.selectOne(<span class="string">"org.mybatis.example.BlogMapper.selectBlog"</span>, <span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>探究已映射的 SQL 语句</li></ul><p>​         在上面提到的例子中，一个语句既可以通过 XML 定义，也可以通过注解定义。我们先看看XML 定义语句的方式，事实上 MyBatis 提供的全部特性都可以利用基于 XML 的映射语言来实现，这使得MyBatis 在过去的数年间得以流行。如果你以前用过 MyBatis，你应该对这个概念比较熟悉。不过自那以后，XML 的配置也改进了许多，我们稍后还会再提到。这里给出一个基于 XML映射语句的示例，它应该可以满足上述示例中 SqlSession 的调用。       </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.example.BlogMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​         在一个 XML 映射文件中，可以定义无数个映射语句，这样一来，XML头部和文档类型声明占去的部分就显得微不足道了。而文件的剩余部分具备自解释性，很容易理解。在命名空间 “org.mybatis.example.BlogMapper” 中定义了一个名为 “selectBlog”的映射语句，允许你使用指定的完全限定名    “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句，就像上面例子中那样：       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog blog = (Blog) session.selectOne(<span class="string">"org.mybatis.example.BlogMapper.selectBlog"</span>, <span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>​         你可能注意到这和使用完全限定名调用 Java 对象的方法类似。这样，该命名就可以直接映射到在命名空间中同名的 Mapper 类，并将已映射的 select 语句中的名字、参数和返回类型匹配成方法。因此你就可以像上面那样很容易地调用这个对应 Mapper接口的方法，就像下面这样：       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>​         第二种方法有很多优势，首先它不依赖于字符串字面值，会更安全一点；其次，如果你的 IDE 有代码补全功能，那么代码补全可以帮你快速选择已映射的 SQL语句。       </p><p><strong>提示：</strong>对命名空间的一点说明</p><p>​         在之前版本的 MyBatis中，<strong>命名空间（Namespaces）</strong>的作用并不大，是可选的。但现在，随着命名空间越发重要，你必须指定命名空间。       </p><p>​         命名空间的作用有两个，一个是利用更长的完全限定名来将不同的语句隔离开来，同时也实现了你上面见到的接口绑定。就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。       </p><p>​         <strong>命名解析：</strong>为了减少输入量，MyBatis对所有的命名配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。       </p><ul><li>完全限定名（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。         </li><li>短名称（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。         如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和         “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用完全限定名。         </li></ul><p>​         对于像 BlogMapper 这样的映射器类来说，还有另一种方法来处理映射。它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML示例可被替换如下：       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"SELECT * FROM blog WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​         使用注解来映射简单语句会使代码显得更加简洁，然而对于稍微复杂一点的语句，Java  注解就力不从心了，并且会显得更加混乱。因此，如果你需要完成很复杂的事情，那么最好使用 XML 来映射语句。       </p><p>​         选择何种方式来配置映射，以及认为映射语句定义的一致性是否重要，这些完全取决于你和你的团队。         换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML         的语句映射方式间自由移植和切换。 </p><ul><li>作用域（Scope）和生命周期</li></ul><p><strong>SqlSessionFactoryBuilder</strong></p><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。你可以重用SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory实例，但是最好还是不要让其一直存在，以保证所有的XML 解析资源可以被释放给更重要的事情。         </p><p><strong>SqlSessionFactory</strong></p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。           使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏味道（bad smell）”。因此SqlSessionFactory 的最佳作用域是应用作用域。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。         </p><p><strong>SqlSession</strong></p><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的HttpSession。如果你现在正在使用一种 Web 框架，要考虑 SqlSession 放在一个和 HTTP 请求对象相似的作用域中。换句话说，每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。下面的示例就是一个确保SqlSession 关闭的标准模式：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="comment">// 你的应用逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你的所有的代码中一致地使用这种模式来保证所有数据库资源都能被正确地关闭。</p><h3 id="3、XML配置"><a href="#3、XML配置" class="headerlink" title="3、XML配置"></a>3、XML配置</h3><h4 id="3-1、properties"><a href="#3-1、properties" class="headerlink" title="3.1、properties"></a>3.1、properties</h4><h4 id="3-2、settings"><a href="#3-2、settings" class="headerlink" title="3.2、settings"></a>3.2、settings</h4><p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#settings</a></p><div class="table-container"><table><thead><tr><th style="text-align:center">设置名</th><th style="text-align:left">描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:center">cacheEnabled</td><td style="text-align:left">全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。</td><td>true \</td><td>false</td><td>true</td></tr><tr><td style="text-align:center">lazyLoadingEnabled</td><td style="text-align:left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true \</td><td>false</td><td>false</td></tr><tr><td style="text-align:center">aggressiveLazyLoading</td><td style="text-align:left">当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td>true \</td><td>false</td><td>false （在 3.4.1 及之前的版本默认值为 true）</td></tr><tr><td style="text-align:center">multipleResultSetsEnabled</td><td style="text-align:left">是否允许单一语句返回多结果集（需要驱动支持）</td><td>true \</td><td>false</td><td>true</td></tr><tr><td style="text-align:center">useColumnLabel</td><td style="text-align:left">使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</td><td>true \</td><td>false</td><td>true</td></tr><tr><td style="text-align:center">useGeneratedKeys</td><td style="text-align:left">允许 JDBC 支持自动生成主键，需要驱动支持。如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。</td><td>true \</td><td>false</td><td>False</td></tr><tr><td style="text-align:center">autoMappingBehavior</td><td style="text-align:left">指定 MyBatis 应如何自动映射列到字段或属性。NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td style="text-align:center">autoMappingUnknownColumnBehavior</td><td style="text-align:left">指定发现自动映射目标未知列（或者未知属性类型）的行为。 <code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出提醒日志 (<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code>                   的日志等级必须设置为 <code>WARN</code>) <code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td>NONE, WARNING, FAILING</td><td>NONE</td></tr><tr><td style="text-align:center">defaultExecutorType</td><td style="text-align:left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。</td><td>SIMPLE                 REUSE                BATCH</td><td>SIMPLE</td></tr></tbody></table></div><p>设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- settings包含多个setting</span></span><br><span class="line"><span class="comment">  &lt;setting name="" value=""/&gt;</span></span><br><span class="line"><span class="comment">  name：setting名（设置名）</span></span><br><span class="line"><span class="comment">  value：setting值（设置值）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"True"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、typeAliases"><a href="#3-3、typeAliases" class="headerlink" title="3.3、typeAliases"></a>3.3、typeAliases</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3、typeAliases可以给java类型起别名（别名不区分大小写） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- typeAlias：为某个类起别名</span></span><br><span class="line"><span class="comment">   type：指定需要起别名的java类型（com.mybatis.bean.Employee），默认为类名小写（employee）</span></span><br><span class="line"><span class="comment">   alias：指定别名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.mybatis.bean.Employee"</span> <span class="attr">alias</span>=<span class="string">"employee"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- package：为某个包下所有类起别名</span></span><br><span class="line"><span class="comment">   name：指定报名（为当前包以及下面所有的后代包每一个类都起一个默认别名（类名小写:employee））</span></span><br><span class="line"><span class="comment">   &lt;package name="com.mybatis.bean"/&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @Alias("employee")：包与子包的类名冲突，可以@Alias取别名，在类前加上注解@Alias，默认为类名小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis为java类型起好别名：<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#settings</a></p><p>取别名需要与这些别名不同。。。</p><h4 id="3-4、typeHandlers"><a href="#3-4、typeHandlers" class="headerlink" title="3.4、typeHandlers"></a>3.4、typeHandlers</h4><h4 id="3-5、objectFactory"><a href="#3-5、objectFactory" class="headerlink" title="3.5、objectFactory"></a>3.5、objectFactory</h4><h4 id="3-6、plugins"><a href="#3-6、plugins" class="headerlink" title="3.6、plugins"></a>3.6、plugins</h4><h4 id="3-7、environments"><a href="#3-7、environments" class="headerlink" title="3.7、environments"></a>3.7、environments</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- environments：环境配置，可以配置多种环境</span></span><br><span class="line"><span class="comment">        environment：配置一种具体环境,id:唯一标识符</span></span><br><span class="line"><span class="comment">        transactionManager：事务管理器</span></span><br><span class="line"><span class="comment">          type：事务管理器类型：[JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)]</span></span><br><span class="line"><span class="comment">            自定义：实现TransactionFactory接口</span></span><br><span class="line"><span class="comment">        dataSource:数据源</span></span><br><span class="line"><span class="comment">          type：数据源类型：[UNPOOLED(UnpooledDataSourceFactory)</span></span><br><span class="line"><span class="comment">               |POOLED(PooledDataSourceFactory)</span></span><br><span class="line"><span class="comment">               |JNDI(JndiDataSourceFactory)]</span></span><br><span class="line"><span class="comment">            自定义：实现DataSourceFactory接口</span></span><br><span class="line"><span class="comment">        &lt;environment id=""&gt;</span></span><br><span class="line"><span class="comment">    &lt;transactionManager type=""&gt;&lt;/transactionManager&gt;</span></span><br><span class="line"><span class="comment">    &lt;dataSource type=""&gt;&lt;/dataSource&gt;</span></span><br><span class="line"><span class="comment">   &lt;/environment&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-8、databaseIdProvider"><a href="#3-8、databaseIdProvider" class="headerlink" title="3.8、databaseIdProvider"></a>3.8、databaseIdProvider</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_oracle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5、databaseIdProvider：支持多数据库厂商的；</span></span><br><span class="line"><span class="comment">   type="DB_VENDOR"：VendorDatabaseIdProvider</span></span><br><span class="line"><span class="comment">    作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;</span></span><br><span class="line"><span class="comment">    MySQL，Oracle，SQL Server,xxxx</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增删改的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">    select EMPLOYEE_ID id,LAST_NAMElastName,EMAIL email </span><br><span class="line">    from employees where EMPLOYEE_ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-9、mappers"><a href="#3-9、mappers" class="headerlink" title="3.9、mappers"></a>3.9、mappers</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局mybatis配置文件，数据库驱动，url，username，password 其他sql映射文件需要在此处注册</span></span><br><span class="line"><span class="comment">  将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 6、mappers：将sql映射注册到全局配置中 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    mapper:注册一个sql映射 </span></span><br><span class="line"><span class="comment">     注册配置文件</span></span><br><span class="line"><span class="comment">     resource：引用类路径下的sql映射文件</span></span><br><span class="line"><span class="comment">      mybatis/mapper/EmployeeMapper.xml</span></span><br><span class="line"><span class="comment">     url：引用网路路径或者磁盘路径下的sql映射文件</span></span><br><span class="line"><span class="comment">      file:///var/mappers/AuthorMapper.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     注册接口</span></span><br><span class="line"><span class="comment">     class：引用（注册）接口，</span></span><br><span class="line"><span class="comment">      1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</span></span><br><span class="line"><span class="comment">      2、没有sql映射文件，所有的sql都是利用注解写在接口上;</span></span><br><span class="line"><span class="comment">@Select("select * from user where id=#&#123;id&#125;")</span></span><br><span class="line"><span class="comment">      推荐：</span></span><br><span class="line"><span class="comment">       比较重要的，复杂的Dao接口我们来写sql映射文件</span></span><br><span class="line"><span class="comment">       不重要，简单的Dao接口为了开发快速可以使用注解；</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper resource="mybatis/mapper/EmployeeMapper.xml"/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper class="com.mybatis.dao.EmployeeMapperAnnotation"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量注册：</span></span><br><span class="line"><span class="comment">    &lt;package name="com.mybatis.dao"/&gt; </span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本顺序：(properties?, settings?, typeAliases?, typeHandlers?, objectFactory?,<br> objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?,<br> mappers?)</p><h3 id="4、XML映射文件"><a href="#4、XML映射文件" class="headerlink" title="4、XML映射文件"></a>4、XML映射文件</h3><h4 id="4-1、select"><a href="#4-1、select" class="headerlink" title="4.1、select"></a>4.1、select</h4><h4 id="4-2、insert-update-和-delete"><a href="#4-2、insert-update-和-delete" class="headerlink" title="4.2、insert, update 和 delete"></a>4.2、insert, update 和 delete</h4><h4 id="4-3、参数"><a href="#4-3、参数" class="headerlink" title="4.3、参数"></a>4.3、参数</h4><ul><li>单个参数</li></ul><p>使用的简单参数。实际上参数是 MyBatis非常强大的元素。：         </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像 MyBatis 的其他部分一样，参数也可以指定一个特殊的数据类型。         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br></pre></td></tr></table></figure><p>​          像 MyBatis 的其它部分一样，javaType 几乎总是可以根据参数对象的类型确定下来，除非该对象是一个           <code>HashMap</code>。这个时候，你需要显式指定 <code>javaType</code> 来确保正确的类型处理器（<code>TypeHandler</code>）被使用。         </p><p>提示 JDBC 要求，如果一个列允许 null 值，并且会传递值 null 的参数，就必须要指定 JDBC Type。阅读         <code>PreparedStatement.setNull()</code>的 JavaDoc 文档来获取更多信息。         </p><p>​          要更进一步地自定义类型处理方式，你也可以指定一个特殊的类型处理器类（或别名），比如：         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler&#125;</span><br></pre></td></tr></table></figure><p>尽管看起来配置变得越来越繁琐，但实际上，很少需要如此繁琐的配置。</p><p>对于数值类型，还有一个小数保留位数的设置，来指定小数点后保留的位数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;height,javaType=double,jdbcType=NUMERIC,numericScale=2&#125;</span><br></pre></td></tr></table></figure><p>​          最后，mode 属性允许你指定 <code>IN</code>，<code>OUT</code> 或  <code>INOUT</code> 参数。如果参数的 <code>mode</code> 为 <code>OUT</code>  或 <code>IOUT</code>，就像你在指定输出参数时所期望的行为那样，参数对象的属性实际值将会被改变。如果 <code>mode</code> 为 <code>OUT</code>（或 <code>INOUT</code>），而且           <code>jdbcType</code> 为 <code>CURSOR</code>（也就是 Oracle 的REFCURSOR），你必须指定一个 <code>resultMap</code> 引用来将结果集           <code>ResultMap</code> 映射到参数的类型上。要注意这里的<code>javaType</code> 属性是可选的，如果留空并且 jdbcType 是           <code>CURSOR</code>，它会被自动地被设为 <code>ResultMap</code>。         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap&#125;</span><br></pre></td></tr></table></figure><p>​          MyBatis 也支持很多高级的数据类型，比如结构体（structs），但是当使用 out          参数时，你必须显式设置类型的名称。比如（再次提示，在实际中要像这样不能换行）：         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap&#125;</span><br></pre></td></tr></table></figure><p>​          尽管所有这些选项很强大，但大多时候你只须简单地指定属性名，其他的事情          MyBatis 会自己去推断，顶多要为可能为空的列指定 <code>jdbcType</code>。         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#&#123;firstName&#125;</span><br><span class="line">#&#123;middleInitial,jdbcType=VARCHAR&#125;</span><br><span class="line">#&#123;lastName&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串替换</li></ul><p>​          默认情况下,使用 <code>#{}</code>          格式的语法会导致 MyBatis 创建 <code>PreparedStatement</code>          参数占位符并安全地设置参数（就像使用 ? 一样）。          这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中插入一个不转义的字符串。          比如，像 ORDER BY，你可以这样来使用：         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><p>这里 MyBatis 不会修改或转义字符串。</p><p>​          当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。          举个例子，如果你想通过任何一列从表中 <code>select</code> 数据时，不需要像下面这样写：           </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br><span class="line">User findById(@Param(&quot;id&quot;) long id);</span><br><span class="line"></span><br><span class="line">@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)</span><br><span class="line">User findByName(@Param(&quot;name&quot;) String name);</span><br><span class="line"></span><br><span class="line">@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span><br><span class="line">User findByEmail(@Param(&quot;email&quot;) String email);</span><br><span class="line"></span><br><span class="line">// and more &quot;findByXxx&quot; method</span><br></pre></td></tr></table></figure><p>​          可以只写这样一个方法：           </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span><br><span class="line">User findByColumn(@Param(&quot;column&quot;) String column, @Param(&quot;value&quot;) String value);</span><br></pre></td></tr></table></figure><p>其中 ${column}会被直接替换，而 #{value}会被使用?预处理.因此你就可以像下面这样来达到上述功能：           </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User userOfId1 = userMapper.findByColumn(&quot;id&quot;, 1L);</span><br><span class="line">User userOfNameKid = userMapper.findByColumn(&quot;name&quot;, &quot;kid&quot;);</span><br><span class="line">User userOfEmail = userMapper.findByColumn(&quot;email&quot;, &quot;noone@nowhere.com&quot;);</span><br></pre></td></tr></table></figure><p>这个想法也同样适用于用来替换表名的情况。         </p><p>提示用这种方式接受用户的输入，并将其用于语句中的参数是不安全的，会导致潜在的 SQL          注入攻击，因此要么不允许用户输入这些字段，要么自行转义并检验。 </p><ul><li>多个参数</li></ul><p>多个参数会封装成一个map</p><p>​    key：param1，param2，……，（参数索引也是可以的）</p><p>​    value：传入参数值，按顺序</p><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getByIdAndName</span><span class="params">(Integer id,String lastName)</span></span>;</span><br></pre></td></tr></table></figure><p>取值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByIdAndName"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]</span><br><span class="line">Cause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]</span><br></pre></td></tr></table></figure><p><strong>命名参数</strong>：@Param明确指定</p><p>使用<code>@Param</code>注解指定map中key，不使用[arg1, arg0, param1, param2]</p><p>key：使用<code>@Param</code>明确指定</p><p>value：传入的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getByIdAndName</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span>String lastName)</span>;</span><br></pre></td></tr></table></figure><p>如果参数很多，建议封装为一个实体对象</p><p>POJO：<br>如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo；</p><pre><code>#{属性名}：取出传入的pojo的属性值    </code></pre><p>Map：<br>如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map</p><pre><code>#{key}：取出map中对应的值</code></pre><p>TO：<br>如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象<br>Page{<br>    int index;<br>    int size;<br>}</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,String lastName)</span>;</span><br><span class="line"><span class="comment">//取值：id==&gt;#&#123;id/param1&#125;   lastName==&gt;#&#123;param2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id,@Param(<span class="string">"e"</span>)</span>Employee emp)</span>;</span><br><span class="line"><span class="comment">//取值：id==&gt;#&#123;param1&#125;    lastName===&gt;#&#123;param2.lastName/e.lastName&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特别注意：如果是Collection（List、Set）类型或者是数组，</span></span><br><span class="line"> <span class="comment">//也会特殊处理。也是把传入的list或者数组封装在map中。</span></span><br><span class="line"><span class="comment">//key：Collection（collection）,如果是List还可以使用这个key(list)</span></span><br><span class="line"><span class="comment">//数组(array)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line"><span class="comment">//取值：取出第一个id的值：   #&#123;list[0]&#125;</span></span><br></pre></td></tr></table></figure><p>总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；<br><code>#{key}</code>就可以取出map中的值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="meta">@Param</span>(<span class="string">"id"</span>)Integer id,<span class="meta">@Param</span>(<span class="string">"lastName"</span>)String lastName);</span><br><span class="line"><span class="comment">// ParamNameResolver解析参数封装map的；</span></span><br></pre></td></tr></table></figure><p>//1、names：{0=id, 1=lastName}；构造器的时候就确定好了</p><blockquote><p>确定流程：<br>1.获取每个标了param注解的参数的@Param的值：id，lastName；  赋值给name;<br>2.每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）<br>    name的值：<br>        标注了param注解：注解的值<br>        没有标注：<br>            1.全局配置：useActualParamName（jdk1.8）：name=参数名<br>            2.name=map.size()；相当于当前元素的索引<br>{0=id, 1=lastName,2=2}</p></blockquote><p>args【1，”Tom”,’hello’】:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getNamedParams</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> paramCount = names.size();</span><br><span class="line">    <span class="comment">//1、参数为null直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//2、如果只有一个元素，并且没有Param注解；args[0]：单个参数直接返回</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args[names.firstKey()];</span><br><span class="line">  </span><br><span class="line"><span class="comment">//3、多个元素或者有Param标注</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> ParamMap&lt;Object&gt;();</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//4、遍历names集合；&#123;0=id, 1=lastName,2=2&#125;</span></span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//names集合的value作为key;  names集合的key又作为取值的参考args[0]:args【1，"Tom"】:</span></span><br><span class="line">  <span class="comment">//eg:&#123;id=args[0]:1,lastName=args[1]:Tom,2=args[2]&#125;</span></span><br><span class="line">    param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// add generic param names (param1, param2, ...)param</span></span><br><span class="line">        <span class="comment">//额外的将每一个参数也保存到map中，使用新的key：param1...paramN</span></span><br><span class="line">        <span class="comment">//效果：有Param注解可以#&#123;指定的key&#125;，或者#&#123;param1&#125;</span></span><br><span class="line">        <span class="keyword">final</span> String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">        <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数值的获取</li></ul><p><code>#{}</code>：可以获取map中的值或者pojo对象属性的值；<br><code>${}</code>：可以获取map中的值或者pojo对象属性的值；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> <span class="keyword">id</span>=$&#123;<span class="keyword">id</span>&#125; <span class="keyword">and</span> last_name=<span class="comment">#&#123;lastName&#125;</span></span><br><span class="line">Preparing: <span class="keyword">select</span> * <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span> <span class="keyword">and</span> last_name=?</span><br></pre></td></tr></table></figure><p>​    区别：<br>​        #{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入<br>​        ${}:取出的值直接拼装在sql语句中；会有安全问题；<br>​        大多情况下，我们取参数的值都应该去使用#{}；</p><p>​        原生jdbc不支持占位符的地方我们就可以使用${}进行取值<br>​        比如分表、排序。。。；按照年份分表拆分        </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> $&#123;<span class="keyword">year</span>&#125;_salary <span class="keyword">where</span> xxx;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_employee <span class="keyword">order</span> <span class="keyword">by</span> $&#123;f_name&#125; $&#123;<span class="keyword">order</span>&#125;</span><br></pre></td></tr></table></figure><p><code>#{}</code>:更丰富的用法：<br>    规定参数的一些规则：<br>    javaType、 jdbcType、 mode（存储过程）、 numericScale、<br>    resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；</p><blockquote><p>jdbcType通常需要在某种特定的条件下被设置：<br>   在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；<br>JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法</span><br><span class="line">1、#&#123;email,jdbcType=OTHER&#125;;</span><br><span class="line">2、jdbcTypeForNull=NULL</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>鉴别器：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =======================鉴别器============================ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;discriminator javaType=""&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment">  鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment">  封装Employee：</span></span><br><span class="line"><span class="comment">   如果查出的是女生：就把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment">   如果是男生，把last_name这一列的值赋值给email;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.mybatis.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    column：指定判定的列名</span></span><br><span class="line"><span class="comment">    javaType：列值对应的java类型  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">                         <span class="attr">select</span>=<span class="string">"com.mybatis.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">column</span>=<span class="string">"d_id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、动态SQL"><a href="#5、动态SQL" class="headerlink" title="5、动态SQL"></a>5、动态SQL</h3><p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h4 id="5-1、if"><a href="#5-1、if" class="headerlink" title="5.1、if"></a>5.1、if</h4><p>动态 SQL 通常要做的事情是根据条件包含 where 子句的一部分。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsIf"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">        id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">        and last_name like #&#123;lastName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传入id,lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span>=? <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入id,没lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure><p>当然，这样是有问题的，如果没有传入id，则会报错，发送的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure><p>有两种方法：</p><ul><li>where后加上一个恒成立的条件，如：1=1，以后的条件都加上and</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传入id,lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">id</span>=? <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入id,没lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure><ul><li>mybatis使用where标签将所有的查询条件包括在内，mybatis会将where中条件拼装成SQL语句，多出来and或者or去掉</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsIf"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125; <span class="comment">&lt;!--第一个可以不写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            and last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> <span class="keyword">id</span>=? <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> last_name <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>如果我们将and写在字段后面，会有错误，where只会去掉前面多出来的and或者or</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsIf"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传入id,lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> <span class="keyword">id</span>=? <span class="keyword">and</span> last_name <span class="keyword">like</span> ?</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入id,没lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> <span class="keyword">id</span>=? <span class="keyword">and</span></span><br></pre></td></tr></table></figure><p>So：注意规则。。。</p><p>where*元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where 元素也会将它们去除。</p><h4 id="5-2、choose"><a href="#5-2、choose" class="headerlink" title="5.2、choose"></a>5.2、choose</h4><p>分支选择，带了break的swtich-case选择，不想应用到所有的条件语句，而只想从中择其一项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"password!=null and password!=''"</span>&gt;</span></span><br><span class="line">            password=#&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null and email!=''"</span>&gt;</span></span><br><span class="line">            email like #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传入id</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 传入id，lastName</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"password!=null and password!=''"</span>&gt;</span></span><br><span class="line">            password=#&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null and email!=''"</span>&gt;</span></span><br><span class="line">            email like #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>when：条件；otherwise：所有条件都不成立时，选择otherwise，只会选择一个，由前到后。</p><h4 id="5-3、trim"><a href="#5-3、trim" class="headerlink" title="5.3、trim"></a>5.3、trim</h4><p>后面多出的and或者or where标签不能解决<br>prefix=””:前缀：trim标签体中是整个字符串拼串 后的结果。<br>         prefix给拼串后的整个字符串加一个前缀<br>prefixOverrides=””:<br>         前缀覆盖： 去掉整个字符串前面多余的字符<br>suffix=””:后缀<br>         suffix给拼串后的整个字符串加一个后缀<br>suffixOverrides=””<br>         后缀覆盖：去掉整个字符串后面多余的字符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsTrim"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>set</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void updateEmp(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">    update employee</span><br><span class="line">    set</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">        last_name=#&#123;lastName&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and password!=''"</span>&gt;</span></span><br><span class="line">        password=#&#123;password&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email!=''"</span>&gt;</span></span><br><span class="line">        email=#&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- id=3,lastName=admin</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> last_name=?, <span class="keyword">where</span> <span class="keyword">id</span>=? <span class="comment">-- 报错，多了‘，’</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void updateEmp(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">    update employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and password!=''"</span>&gt;</span></span><br><span class="line">            password=#&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email!=''"</span>&gt;</span></span><br><span class="line">            email=#&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- id=3,lastName=admin</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> last_name=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure><p>当然也可以使用之前说过的trim实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void updateEmp(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">    update employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null and lastName!=''"</span>&gt;</span></span><br><span class="line">            last_name=#&#123;lastName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and password!=''"</span>&gt;</span></span><br><span class="line">            password=#&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email!=''"</span>&gt;</span></span><br><span class="line">            email=#&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Employee employee=new Employee(3,"admin","123456",null);</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> last_name=?, <span class="keyword">password</span>=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure><h4 id="5-4、foreach"><a href="#5-4、foreach" class="headerlink" title="5.4、foreach"></a>5.4、foreach</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsForeach(List&lt;Integer&gt; list) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  collection：指定要遍历的集合：</span></span><br><span class="line"><span class="comment">   list类型的参数会特殊处理封装在map中，map的key就叫list</span></span><br><span class="line"><span class="comment">  item：将当前遍历出的元素赋值给指定的变量</span></span><br><span class="line"><span class="comment">  separator:每个元素之间的分隔符</span></span><br><span class="line"><span class="comment">  open：遍历出所有结果拼接一个开始的字符</span></span><br><span class="line"><span class="comment">  close:遍历出所有结果拼接一个结束的字符</span></span><br><span class="line"><span class="comment">  index:索引。遍历list的时候是index就是索引，item就是当前值</span></span><br><span class="line"><span class="comment">          遍历map的时候index表示的就是map的key，item就是map的值</span></span><br><span class="line"><span class="comment">  #&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsForeach"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from employee where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- List&lt;Employee&gt; employees=employeeDao.getEmpsForeach(Arrays.asList(1,2,3));</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ( ? , ? , ? )</span><br></pre></td></tr></table></figure><p>可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象传递给 <em>foreach</em> 作为集合参数。当使用可迭代对象或者数组时，index 是当前迭代的次数，item 的值是本次迭代获取的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><ul><li>批量操作</li></ul><p>1、mysql：mysql支持values(),(),()语法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void addEmps(@Param("emps")List&lt;Employee&gt; emps) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">    insert into employee(id,last_name,password,email)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.password&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(<span class="keyword">id</span>,last_name,<span class="keyword">password</span>,email) <span class="keyword">values</span>(?,?,?,?) , <span class="keyword">values</span>(?,?,?,?)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 也可以使用这种形式：这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment">   这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">        insert into employee(id,last_name,password,email)</span><br><span class="line">        values(#&#123;emp.id&#125;,#&#123;emp.lastName&#125;,#&#123;emp.password&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(<span class="keyword">id</span>,last_name,<span class="keyword">password</span>,email) <span class="keyword">values</span>(?,?,?,?) ; <span class="keyword">insert</span> <span class="keyword">into</span> employee(<span class="keyword">id</span>,last_name,<span class="keyword">password</span>,email) <span class="keyword">values</span>(?,?,?,?)</span><br></pre></td></tr></table></figure><p>注意：allowMultiQueries=true；一定需要指定。。。</p><p>url=“jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true”</p><p>2、Oracle：Oracle不支持values(),(),()语法</p><p>Oracle支持：</p><p>1、多个insert放在begin - end里面</p><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email) </span><br><span class="line"><span class="keyword">values</span>(employees_seq.nextval,<span class="string">'test_001'</span>,<span class="string">'test_001@atguigu.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email) </span><br><span class="line"><span class="keyword">values</span>(employees_seq.nextval,<span class="string">'test_002'</span>,<span class="string">'test_002@atguigu.com'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- oracle第一种批量方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">open</span>=<span class="string">"begin"</span> <span class="attr">close</span>=<span class="string">"end;"</span>&gt;</span></span><br><span class="line">        insert into employees(employee_id,last_name,email) </span><br><span class="line">        values(employees_seq.nextval,#&#123;emp.lastName&#125;,#&#123;emp.email&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、利用中间表：</p><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email)</span><br><span class="line"><span class="keyword">select</span> employees_seq.nextval,lastName,email <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="string">'test_a_01'</span> lastName,<span class="string">'test_a_e01'</span> email <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'test_a_02'</span> lastName,<span class="string">'test_a_e02'</span> email <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'test_a_03'</span> lastName,<span class="string">'test_a_e03'</span> email <span class="keyword">from</span> dual</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- oracle第二种批量方式  --&gt;</span></span><br><span class="line">    insert into employees(</span><br><span class="line">    <span class="comment">&lt;!-- 引用外部定义的sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testColomn"</span> <span class="attr">value</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">"union"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">"select employees_seq.nextval,lastName,email from("</span></span></span><br><span class="line"><span class="tag">             <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        select #&#123;emp.lastName&#125; lastName,#&#123;emp.email&#125; email from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>两个内置参数</li></ul><p>两个内置参数：<br>     不只是方法传递过来的参数可以被用来判断，取值。。。<br>     mybatis默认还有两个内置参数：<br>     _parameter:代表整个参数<br>         单个参数：_parameter就是这个参数<br>         多个参数：参数会被封装为一个map；_parameter就是代表这个map</p><pre><code> _databaseId:如果配置了databaseIdProvider标签。     _databaseId就是代表当前数据库的别名oracle</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpParameter"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">where last_name like #&#123;lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库别名，多数据库查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpParameter"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">            where last_name like #&#123;lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">            where last_name like #&#123;_parameter.lastName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置多数据库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span> <span class="comment">&lt;!--指定使用数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_oracle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bind</li></ul><p>bind元素可以从OGNL表达式中创建一个变量并将其绑定到上下文。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmps"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"_lastName"</span> <span class="attr">value</span>=<span class="string">"'%' + lastName + '%'"</span> /&gt;</span></span><br><span class="line">    select * from employee</span><br><span class="line">    where last_name like #&#123;_lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>sql</li></ul><p>抽取可重用的sql片段。方便后面引用<br>      1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用<br>      2、include来引用已经抽取的sql：<br>      3、include还可以自定义一些property，sql标签内部就能使用自定义的属性<br>              include-property：取值的正确方式${prop},</p><pre><code>          #{不能使用这种方式}</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span>&gt;</span></span><br><span class="line">    insert into employee(</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    ) values(......)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">employee_id,last_name,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">last_name,email,gender,d_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、mybatis缓存机制"><a href="#6、mybatis缓存机制" class="headerlink" title="6、mybatis缓存机制"></a>6、mybatis缓存机制</h3><h3 id="7、mybatis逆向工程"><a href="#7、mybatis逆向工程" class="headerlink" title="7、mybatis逆向工程"></a>7、mybatis逆向工程</h3><p><a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="noopener"><a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/index.html</a></a></p><p>下载jar包：<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener"><a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases</a></a></p><h4 id="7-1、配置文件："><a href="#7-1、配置文件：" class="headerlink" title="7.1、配置文件："></a>7.1、配置文件：</h4><p><a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener"><a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/configreference/xmlconfig.html</a></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">targetRuntime="MyBatis3Simple":生成简单版的CRUD</span></span><br><span class="line"><span class="comment">MyBatis3:豪华版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jdbcConnection：指定如何连接到目标数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javaModelGenerator：指定javaBean的生成策略 </span></span><br><span class="line"><span class="comment">targetPackage="test.model"：目标包名</span></span><br><span class="line"><span class="comment">targetProject="\MBGTestProject\src"：目标工程</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.bean"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sqlMapGenerator：sql映射生成策略： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.dao"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">".\conf"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javaClientGenerator:指定mapper接口所在的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.dao"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要逆向分析哪些表：根据表要创建javaBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"employee"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-2、Running-MyBatis-Generator-With-Java"><a href="#7-2、Running-MyBatis-Generator-With-Java" class="headerlink" title="7.2、Running MyBatis Generator With Java"></a>7.2、Running MyBatis Generator With Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectEmp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sessionFactory=getSqlSessionFactory();</span><br><span class="line">    SqlSession session=sessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmployeeMapper empMapper=session.getMapper(EmployeeMapper.class);</span><br><span class="line">        Employee employee=empMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee.toString());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3、自动生成的Mapper-xml文件"><a href="#7-3、自动生成的Mapper-xml文件" class="headerlink" title="7.3、自动生成的Mapper.xml文件"></a>7.3、自动生成的Mapper.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"depart_id"</span> <span class="attr">property</span>=<span class="string">"departId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Example_Where_Clause"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"oredCriteria"</span> <span class="attr">item</span>=<span class="string">"criteria"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"criteria.valid"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"criteria.criteria"</span> <span class="attr">item</span>=<span class="string">"criterion"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.noValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.singleValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.betweenValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line">and</span><br><span class="line">#&#123;criterion.secondValue&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.listValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"criterion.value"</span> <span class="attr">item</span>=<span class="string">"listItem"</span></span></span><br><span class="line"><span class="tag"><span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;listItem&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Update_By_Example_Where_Clause"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"example.oredCriteria"</span> <span class="attr">item</span>=<span class="string">"criteria"</span></span></span><br><span class="line"><span class="tag"><span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"criteria.valid"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"criteria.criteria"</span> <span class="attr">item</span>=<span class="string">"criterion"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.noValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.singleValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.betweenValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line">and</span><br><span class="line">#&#123;criterion.secondValue&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"criterion.listValue"</span>&gt;</span></span><br><span class="line">and $&#123;criterion.condition&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"criterion.value"</span> <span class="attr">item</span>=<span class="string">"listItem"</span></span></span><br><span class="line"><span class="tag"><span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;listItem&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">id, last_name, password, email, depart_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByExample"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.EmployeeExample"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">select</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"distinct"</span>&gt;</span></span><br><span class="line">distinct</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">from employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"orderByClause != null"</span>&gt;</span></span><br><span class="line">order by $&#123;orderByClause&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">select</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">from employee</span><br><span class="line">where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">delete from employee</span><br><span class="line">where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByExample"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.EmployeeExample"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">delete from employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">insert into employee (id, last_name, password,</span><br><span class="line">email, depart_id)</span><br><span class="line">values</span><br><span class="line">(#&#123;id,jdbcType=INTEGER&#125;, #&#123;lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;departId,jdbcType=INTEGER&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">insert into employee</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">id,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName != null"</span>&gt;</span></span><br><span class="line">last_name,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">password,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span></span><br><span class="line">email,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"departId != null"</span>&gt;</span></span><br><span class="line">depart_id,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">#&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName != null"</span>&gt;</span></span><br><span class="line">#&#123;lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">#&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span></span><br><span class="line">#&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"departId != null"</span>&gt;</span></span><br><span class="line">#&#123;departId,jdbcType=INTEGER&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countByExample"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.EmployeeExample"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">select count(*) from employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByExampleSelective"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">update employee</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"record.id != null"</span>&gt;</span></span><br><span class="line">id = #&#123;record.id,jdbcType=INTEGER&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"record.lastName != null"</span>&gt;</span></span><br><span class="line">last_name = #&#123;record.lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"record.password != null"</span>&gt;</span></span><br><span class="line">password = #&#123;record.password,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"record.email != null"</span>&gt;</span></span><br><span class="line">email = #&#123;record.email,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"record.departId != null"</span>&gt;</span></span><br><span class="line">depart_id = #&#123;record.departId,jdbcType=INTEGER&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Update_By_Example_Where_Clause"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByExample"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">update employee</span><br><span class="line">set id = #&#123;record.id,jdbcType=INTEGER&#125;,</span><br><span class="line">last_name =</span><br><span class="line">#&#123;record.lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line">password =</span><br><span class="line">#&#123;record.password,jdbcType=VARCHAR&#125;,</span><br><span class="line">email =</span><br><span class="line">#&#123;record.email,jdbcType=VARCHAR&#125;,</span><br><span class="line">depart_id =</span><br><span class="line">#&#123;record.departId,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Update_By_Example_Where_Clause"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">update employee</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName != null"</span>&gt;</span></span><br><span class="line">last_name = #&#123;lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">password = #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span></span><br><span class="line">email = #&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"departId != null"</span>&gt;</span></span><br><span class="line">depart_id = #&#123;departId,jdbcType=INTEGER&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"com.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING - @mbggenerated This element is automatically generated by </span></span><br><span class="line"><span class="comment">MyBatis Generator, do not modify. This element was generated on Tue Aug 13 </span></span><br><span class="line"><span class="comment">21:49:23 CST 2019. --&gt;</span></span><br><span class="line">update employee</span><br><span class="line">set last_name = #&#123;lastName,jdbcType=VARCHAR&#125;,</span><br><span class="line">password =</span><br><span class="line">#&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">email = #&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line">depart_id = #&#123;departId,jdbcType=INTEGER&#125;</span><br><span class="line">where id =</span><br><span class="line">#&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8、mybatis工作原理"><a href="#8、mybatis工作原理" class="headerlink" title="8、mybatis工作原理"></a>8、mybatis工作原理</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的JDBC 代码和手动设置参数以及获取结果集。MyBatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的 POJO（Plain Old Java Objects，普通老式Java对象）为数据库中的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="https://tcrushes.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="https://tcrushes.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://tcrushes.github.io/2019/07/22/Redis%E5%9F%BA%E7%A1%80.html"/>
    <id>https://tcrushes.github.io/2019/07/22/Redis基础.html</id>
    <published>2019-07-22T14:56:20.000Z</published>
    <updated>2019-09-12T15:35:06.967Z</updated>
    
    <content type="html"><![CDATA[<p>Redis：Remote Dictionary Server(远程字典服务器)，作为基于键值对的NoSQL数据库，具有高性能、丰富的数据结构、持久化、高可用、分布式等特性，同时Redis非常稳定。</p><a id="more"></a><h3 id="1、Redis基础"><a href="#1、Redis基础" class="headerlink" title="1、Redis基础"></a>1、Redis基础</h3><h4 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h4><p>Redis：Remote Dictionary Server(远程字典服务器)</p><h4 id="1-2、配置"><a href="#1-2、配置" class="headerlink" title="1.2、配置"></a>1.2、配置</h4><h3 id="2、命令"><a href="#2、命令" class="headerlink" title="2、命令"></a>2、命令</h3><ul><li>启动Redis</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_15_centos ~]# redis-server</span><br></pre></td></tr></table></figure><ul><li>连接Redis</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_15_centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>执行<strong>PING</strong>命令，检查redis服务是否启动。</p><ul><li>远程服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_15_centos ~]# redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><p>port为端口号，password为redis服务的密码。</p><p>Redis命令参考：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></p><h3 id="3、键（key）"><a href="#3、键（key）" class="headerlink" title="3、键（key）"></a>3、键（key）</h3><p>Rdis keys命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-keys.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-keys.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>DUMP key</td><td>序列化给定 key ，并返回被序列化的值</td></tr><tr><td>2</td><td>keys *</td><td>查看所有的key</td></tr><tr><td>3</td><td>DEL key</td><td>在key存在时删除key</td></tr><tr><td>4</td><td>EXISTS key</td><td>检查key是否存在</td></tr><tr><td>5</td><td>EXPIRE key seconds</td><td>设置key的过去时间（秒）</td></tr><tr><td>6</td><td>PTTL key</td><td>返回 key 的剩余的过期时间（毫秒）</td></tr><tr><td>7</td><td>MOVE key db</td><td>将当前数据库的 key 移动到给定的数据库db</td></tr><tr><td>8</td><td>TYPE key</td><td>查看key对应value的数据类型</td></tr></tbody></table></div><h3 id="4、字符串（String）"><a href="#4、字符串（String）" class="headerlink" title="4、字符串（String）"></a>4、字符串（String）</h3><p>Redis String命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-strings.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-strings.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SET/GET key</td><td>设置/获取key的值</td></tr><tr><td>2</td><td>APPEND key value</td><td>追加value到key的末尾</td></tr><tr><td>3</td><td>STRLEN key</td><td>返回字符串长度</td></tr><tr><td>4</td><td>INCR/DECR key</td><td>vlaue增/减1，一定为数字</td></tr><tr><td>5</td><td>INCRBY/DECRBY key increment</td><td>vlaue增/减increment，一定为数字</td></tr><tr><td>6</td><td>GETSRANGE/SETRANGE key  start end (value)</td><td>设置/获取范围中的value</td></tr><tr><td>7</td><td>SETEX key seconds value</td><td>key 的过期时间设为 seconds（秒）</td></tr><tr><td>8</td><td>SETNX key value</td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td>9</td><td>MSET key value [key value …]</td><td>设置多个key-value</td></tr><tr><td>10</td><td>MGET key [key …]</td><td>获取多个value</td></tr><tr><td>11</td><td>MSETNX key value [key value …]</td><td>只有在 key 不存在时设置 多个key 的值</td></tr><tr><td>12</td><td>GETSET key value</td><td>key 的值设为 value ，返回 key 的旧值(old value)</td></tr></tbody></table></div><p>说明：</p><ul><li>SET key value如果key存在，则覆盖原来的key-value</li><li>MSETNX key value [key value …]，只要有存在的key，则全部设置不成功</li></ul><h3 id="5、列表（List）"><a href="#5、列表（List）" class="headerlink" title="5、列表（List）"></a>5、列表（List）</h3><p>Redis List命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-hashes.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-hashes.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>LPUSH/RPUSH</td><td>在列表中加入值</td></tr><tr><td>2</td><td>LRANGE key start stop</td><td>获取列表中范围内的元素</td></tr><tr><td>3</td><td>LPOP/RPOP key</td><td>pop出列表中的第一/最后一个值</td></tr><tr><td>4</td><td>LINDEX key index</td><td>索引获取列表中的元素</td></tr><tr><td>5</td><td>LLEN key</td><td>获取列表长度</td></tr><tr><td>6</td><td>LREM key count value</td><td>移除列表元素conut value</td></tr><tr><td>7</td><td>LTRIM key start stop</td><td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>8</td><td>RPOPLPUSH source destination</td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>9</td><td>LSET key index value</td><td>通过索引设置列表元素的值</td></tr><tr><td>10</td><td>LINSERT key BEFORE/AFTER pivot value</td><td>在列表的元素前或者后插入元素</td></tr></tbody></table></div><h3 id="6、哈希（Hash）"><a href="#6、哈希（Hash）" class="headerlink" title="6、哈希（Hash）"></a>6、哈希（Hash）</h3><p>Redis Hash命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-hashes.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-hashes.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>HSET/HGET key field value</td><td>设置/获取哈希表key中的字段field为value</td></tr><tr><td>2</td><td>HMSET/HMGET key</td><td>设置/获取哈希表key中多个字段</td></tr><tr><td>3</td><td>HVALS key</td><td>获取哈希表中所有值</td></tr><tr><td>4</td><td>HDEL key field [field …]</td><td>删除key中的字段</td></tr><tr><td>5</td><td>HLEN key</td><td>获取哈希表中字段的数量</td></tr><tr><td>6</td><td>HEXISTS key field</td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td>7</td><td>HKEYS/HVALS key</td><td>获取所有的字段名/值</td></tr><tr><td>8</td><td>HINCRBY key field increment</td><td>字段值增加整数increment</td></tr><tr><td>9</td><td>HINCRBYFLOAT key field increment</td><td>字段值增加浮点increment</td></tr><tr><td>10</td><td>HSETNX key field value</td><td>只有字段field不存在时，设置字段的值</td></tr></tbody></table></div><p>k-v模式不变，v是一个键值对</p><h3 id="7、集合（Set）"><a href="#7、集合（Set）" class="headerlink" title="7、集合（Set）"></a>7、集合（Set）</h3><p>Redis Set命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-sets.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-sets.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SADD key member [member …]</td><td>添加一个或多个成员</td></tr><tr><td>2</td><td>SMEMBERS key</td><td>返回集合中的所有成员</td></tr><tr><td>3</td><td>SISMEMBER key member</td><td>判断元素是否在集合中</td></tr><tr><td>4</td><td>SCARD key</td><td>返回集合中的元素个数</td></tr><tr><td>5</td><td>SREM key member [member …]</td><td>移除集合中一个或多个元素</td></tr><tr><td>6</td><td>SRANDMEMBER key [count]</td><td>返回集合中一个或多个随机数</td></tr><tr><td>7</td><td>SPOP key [count]</td><td>移除并返回集合中的一个或多个随机元素</td></tr><tr><td>8</td><td>SMOVE source destination member</td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>9</td><td>SDIFF key [key …]</td><td>差集</td></tr><tr><td>10</td><td>SINTER key [key …]</td><td>交集</td></tr><tr><td>11</td><td>SUNION key [key …]</td><td>并集</td></tr></tbody></table></div><h3 id="8、有序集合Zset（Sorted-Set）"><a href="#8、有序集合Zset（Sorted-Set）" class="headerlink" title="8、有序集合Zset（Sorted Set）"></a>8、有序集合Zset（Sorted Set）</h3><p>在set的基础上，加上一个score值，zset：key score1 value1 score2 value2……</p><p>Redis Sorted Set命令</p><p>基本命令：<a href="https://www.runoob.com/redis/redis-sorted-sets.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-sorted-sets.html</a></p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ZADD/ZRANGE</td><td>增添/查询，withscores查询出score</td></tr><tr><td>2</td><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td><td>查询从min到max，‘（’不包含，</td></tr><tr><td>3</td><td>ZRANGE key start stop [WITHSCORES]</td><td>移除有序集合中的一个或多个成员</td></tr><tr><td>4</td><td>ZCARD/ZCOUNT key [min max]</td><td>获取有序集合的成员数</td></tr><tr><td>5</td><td>ZSCORE key member</td><td>返回有序集中，成员的分数值</td></tr><tr><td>6</td><td>ZREVRANK key member</td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>7</td><td>ZREVRANGE key start stop [WITHSCORES]</td><td>逆序返回</td></tr><tr><td>8</td><td>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr></tbody></table></div><p>说明：  ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]，withscores：查询出带有score，‘（’：不包含，LIMIT offset count返回限制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1</span><br><span class="line">1) "v1"</span><br><span class="line">2) "v2"</span><br><span class="line">3) "v3"</span><br><span class="line">4) "v4"</span><br><span class="line">5) "v5"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1 WITHSCORES</span><br><span class="line"> 1) "v1"</span><br><span class="line"> 2) "1"</span><br><span class="line"> 3) "v2"</span><br><span class="line"> 4) "2"</span><br><span class="line"> 5) "v3"</span><br><span class="line"> 6) "3"</span><br><span class="line"> 7) "v4"</span><br><span class="line"> 8) "4"</span><br><span class="line"> 9) "v5"</span><br><span class="line">10) "5"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE zset (0 (5</span><br><span class="line">1) "v1"</span><br><span class="line">2) "v2"</span><br><span class="line">3) "v3"</span><br><span class="line">4) "v4"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE zset 0 5 LIMIT 2 2</span><br><span class="line">1) "v3"</span><br><span class="line">2) "v4"</span><br></pre></td></tr></table></figure><h3 id="9、解析配置文件"><a href="#9、解析配置文件" class="headerlink" title="9、解析配置文件"></a>9、解析配置文件</h3><h4 id="9-1、Redis配置"><a href="#9-1、Redis配置" class="headerlink" title="9.1、Redis配置"></a>9.1、Redis配置</h4><p>Redis的配置文件在Redis的安装目录下，文件名为redis.conf(windows上：redis.windows.conf)</p><ul><li>获取配置项</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET 配置项名</span><br></pre></td></tr></table></figure><ul><li>获取所有配置项</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET *</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET *</span><br><span class="line">  1) &quot;dbfilename&quot;</span><br><span class="line">  2) &quot;dump.rdb&quot;</span><br><span class="line">  3) &quot;requirepass&quot;</span><br><span class="line">  4) &quot;&quot;</span><br><span class="line">  5) &quot;masterauth&quot;</span><br><span class="line">  6) &quot;&quot;</span><br><span class="line">  7) &quot;cluster-announce-ip&quot;</span><br><span class="line">  8) &quot;&quot;</span><br><span class="line">  9) &quot;unixsocket&quot;</span><br><span class="line"> 10) &quot;&quot;</span><br><span class="line"> 11) &quot;logfile&quot;</span><br><span class="line"> 12) &quot;&quot;</span><br><span class="line"> 13) &quot;pidfile&quot;</span><br><span class="line"> 14) &quot;&quot;</span><br><span class="line"> 15) &quot;slave-announce-ip&quot;</span><br><span class="line"> 16) &quot;&quot;</span><br><span class="line"> 17) &quot;replica-announce-ip&quot;</span><br><span class="line"> 18) &quot;&quot;</span><br><span class="line"> 19) &quot;maxmemory&quot;</span><br><span class="line"> 20) &quot;0&quot;</span><br><span class="line"> 21) &quot;proto-max-bulk-len&quot;</span><br><span class="line"> 22) &quot;536870912&quot;</span><br><span class="line"> 23) &quot;client-query-buffer-limit&quot;</span><br><span class="line"> 24) &quot;1073741824&quot;</span><br><span class="line"> 25) &quot;maxmemory-samples&quot;</span><br><span class="line"> 26) &quot;5&quot;</span><br><span class="line"> 27) &quot;lfu-log-factor&quot;</span><br><span class="line"> 28) &quot;10&quot;</span><br><span class="line"> 29) &quot;lfu-decay-time&quot;</span><br><span class="line"> 30) &quot;1&quot;</span><br><span class="line"> 31) &quot;timeout&quot;</span><br><span class="line"> 32) &quot;0&quot;</span><br><span class="line"> 33) &quot;active-defrag-threshold-lower&quot;</span><br><span class="line"> 34) &quot;10&quot;</span><br><span class="line"> 35) &quot;active-defrag-threshold-upper&quot;</span><br><span class="line"> 36) &quot;100&quot;</span><br><span class="line"> 37) &quot;active-defrag-ignore-bytes&quot;</span><br><span class="line"> 38) &quot;104857600&quot;</span><br><span class="line"> 39) &quot;active-defrag-cycle-min&quot;</span><br><span class="line"> 40) &quot;5&quot;</span><br><span class="line"> 41) &quot;active-defrag-cycle-max&quot;</span><br><span class="line"> 42) &quot;75&quot;</span><br><span class="line"> 43) &quot;active-defrag-max-scan-fields&quot;</span><br><span class="line"> 44) &quot;1000&quot;</span><br><span class="line"> 45) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class="line"> 46) &quot;100&quot;</span><br><span class="line"> 47) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class="line"> 48) &quot;67108864&quot;</span><br><span class="line"> 49) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line"> 50) &quot;512&quot;</span><br><span class="line"> 51) &quot;hash-max-ziplist-value&quot;</span><br><span class="line"> 52) &quot;64&quot;</span><br><span class="line"> 53) &quot;stream-node-max-bytes&quot;</span><br><span class="line"> 54) &quot;4096&quot;</span><br><span class="line"> 55) &quot;stream-node-max-entries&quot;</span><br><span class="line"> 56) &quot;100&quot;</span><br><span class="line"> 57) &quot;list-max-ziplist-size&quot;</span><br><span class="line"> 58) &quot;-2&quot;</span><br><span class="line"> 59) &quot;list-compress-depth&quot;</span><br><span class="line"> 60) &quot;0&quot;</span><br><span class="line"> 61) &quot;set-max-intset-entries&quot;</span><br><span class="line"> 62) &quot;512&quot;</span><br><span class="line"> 63) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line"> 64) &quot;128&quot;</span><br><span class="line"> 65) &quot;zset-max-ziplist-value&quot;</span><br><span class="line"> 66) &quot;64&quot;</span><br><span class="line"> 67) &quot;hll-sparse-max-bytes&quot;</span><br><span class="line"> 68) &quot;3000&quot;</span><br><span class="line"> 69) &quot;lua-time-limit&quot;</span><br><span class="line"> 70) &quot;5000&quot;</span><br><span class="line"> 71) &quot;slowlog-log-slower-than&quot;</span><br><span class="line"> 72) &quot;10000&quot;</span><br><span class="line"> 73) &quot;latency-monitor-threshold&quot;</span><br><span class="line"> 74) &quot;0&quot;</span><br><span class="line"> 75) &quot;slowlog-max-len&quot;</span><br><span class="line"> 76) &quot;128&quot;</span><br><span class="line"> 77) &quot;port&quot;</span><br><span class="line"> 78) &quot;6379&quot;</span><br><span class="line"> 79) &quot;cluster-announce-port&quot;</span><br><span class="line"> 80) &quot;0&quot;</span><br><span class="line"> 81) &quot;cluster-announce-bus-port&quot;</span><br><span class="line"> 82) &quot;0&quot;</span><br><span class="line"> 83) &quot;tcp-backlog&quot;</span><br><span class="line"> 84) &quot;511&quot;</span><br><span class="line"> 85) &quot;databases&quot;</span><br><span class="line"> 86) &quot;16&quot;</span><br><span class="line"> 87) &quot;repl-ping-slave-period&quot;</span><br><span class="line"> 88) &quot;10&quot;</span><br><span class="line"> 89) &quot;repl-ping-replica-period&quot;</span><br><span class="line"> 90) &quot;10&quot;</span><br><span class="line"> 91) &quot;repl-timeout&quot;</span><br><span class="line"> 92) &quot;60&quot;</span><br><span class="line"> 93) &quot;repl-backlog-size&quot;</span><br><span class="line"> 94) &quot;1048576&quot;</span><br><span class="line"> 95) &quot;repl-backlog-ttl&quot;</span><br><span class="line"> 96) &quot;3600&quot;</span><br><span class="line"> 97) &quot;maxclients&quot;</span><br><span class="line"> 98) &quot;10000&quot;</span><br><span class="line"> 99) &quot;watchdog-period&quot;</span><br><span class="line">100) &quot;0&quot;</span><br><span class="line">101) &quot;slave-priority&quot;</span><br><span class="line">102) &quot;100&quot;</span><br><span class="line">103) &quot;replica-priority&quot;</span><br><span class="line">104) &quot;100&quot;</span><br><span class="line">105) &quot;slave-announce-port&quot;</span><br><span class="line">106) &quot;0&quot;</span><br><span class="line">107) &quot;replica-announce-port&quot;</span><br><span class="line">108) &quot;0&quot;</span><br><span class="line">109) &quot;min-slaves-to-write&quot;</span><br><span class="line">110) &quot;0&quot;</span><br><span class="line">111) &quot;min-replicas-to-write&quot;</span><br><span class="line">112) &quot;0&quot;</span><br><span class="line">113) &quot;min-slaves-max-lag&quot;</span><br><span class="line">114) &quot;10&quot;</span><br><span class="line">115) &quot;min-replicas-max-lag&quot;</span><br><span class="line">116) &quot;10&quot;</span><br><span class="line">117) &quot;hz&quot;</span><br><span class="line">118) &quot;10&quot;</span><br><span class="line">119) &quot;cluster-node-timeout&quot;</span><br><span class="line">120) &quot;15000&quot;</span><br><span class="line">121) &quot;cluster-migration-barrier&quot;</span><br><span class="line">122) &quot;1&quot;</span><br><span class="line">123) &quot;cluster-slave-validity-factor&quot;</span><br><span class="line">124) &quot;10&quot;</span><br><span class="line">125) &quot;cluster-replica-validity-factor&quot;</span><br><span class="line">126) &quot;10&quot;</span><br><span class="line">127) &quot;repl-diskless-sync-delay&quot;</span><br><span class="line">128) &quot;5&quot;</span><br><span class="line">129) &quot;tcp-keepalive&quot;</span><br><span class="line">130) &quot;300&quot;</span><br><span class="line">131) &quot;cluster-require-full-coverage&quot;</span><br><span class="line">132) &quot;yes&quot;</span><br><span class="line">133) &quot;cluster-slave-no-failover&quot;</span><br><span class="line">134) &quot;no&quot;</span><br><span class="line">135) &quot;cluster-replica-no-failover&quot;</span><br><span class="line">136) &quot;no&quot;</span><br><span class="line">137) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class="line">138) &quot;no&quot;</span><br><span class="line">139) &quot;slave-serve-stale-data&quot;</span><br><span class="line">140) &quot;yes&quot;</span><br><span class="line">141) &quot;replica-serve-stale-data&quot;</span><br><span class="line">142) &quot;yes&quot;</span><br><span class="line">143) &quot;slave-read-only&quot;</span><br><span class="line">144) &quot;yes&quot;</span><br><span class="line">145) &quot;replica-read-only&quot;</span><br><span class="line">146) &quot;yes&quot;</span><br><span class="line">147) &quot;slave-ignore-maxmemory&quot;</span><br><span class="line">148) &quot;yes&quot;</span><br><span class="line">149) &quot;replica-ignore-maxmemory&quot;</span><br><span class="line">150) &quot;yes&quot;</span><br><span class="line">151) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class="line">152) &quot;yes&quot;</span><br><span class="line">153) &quot;daemonize&quot;</span><br><span class="line">154) &quot;no&quot;</span><br><span class="line">155) &quot;rdbcompression&quot;</span><br><span class="line">156) &quot;yes&quot;</span><br><span class="line">157) &quot;rdbchecksum&quot;</span><br><span class="line">158) &quot;yes&quot;</span><br><span class="line">159) &quot;activerehashing&quot;</span><br><span class="line">160) &quot;yes&quot;</span><br><span class="line">161) &quot;activedefrag&quot;</span><br><span class="line">162) &quot;no&quot;</span><br><span class="line">163) &quot;protected-mode&quot;</span><br><span class="line">164) &quot;yes&quot;</span><br><span class="line">165) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class="line">166) &quot;no&quot;</span><br><span class="line">167) &quot;repl-diskless-sync&quot;</span><br><span class="line">168) &quot;no&quot;</span><br><span class="line">169) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class="line">170) &quot;yes&quot;</span><br><span class="line">171) &quot;rdb-save-incremental-fsync&quot;</span><br><span class="line">172) &quot;yes&quot;</span><br><span class="line">173) &quot;aof-load-truncated&quot;</span><br><span class="line">174) &quot;yes&quot;</span><br><span class="line">175) &quot;aof-use-rdb-preamble&quot;</span><br><span class="line">176) &quot;yes&quot;</span><br><span class="line">177) &quot;lazyfree-lazy-eviction&quot;</span><br><span class="line">178) &quot;no&quot;</span><br><span class="line">179) &quot;lazyfree-lazy-expire&quot;</span><br><span class="line">180) &quot;no&quot;</span><br><span class="line">181) &quot;lazyfree-lazy-server-del&quot;</span><br><span class="line">182) &quot;no&quot;</span><br><span class="line">183) &quot;slave-lazy-flush&quot;</span><br><span class="line">184) &quot;no&quot;</span><br><span class="line">185) &quot;replica-lazy-flush&quot;</span><br><span class="line">186) &quot;no&quot;</span><br><span class="line">187) &quot;dynamic-hz&quot;</span><br><span class="line">188) &quot;yes&quot;</span><br><span class="line">189) &quot;maxmemory-policy&quot;</span><br><span class="line">190) &quot;noeviction&quot;</span><br><span class="line">191) &quot;loglevel&quot;</span><br><span class="line">192) &quot;notice&quot;</span><br><span class="line">193) &quot;supervised&quot;</span><br><span class="line">194) &quot;no&quot;</span><br><span class="line">195) &quot;appendfsync&quot;</span><br><span class="line">196) &quot;everysec&quot;</span><br><span class="line">197) &quot;syslog-facility&quot;</span><br><span class="line">198) &quot;local0&quot;</span><br><span class="line">199) &quot;appendonly&quot;</span><br><span class="line">200) &quot;no&quot;</span><br><span class="line">201) &quot;dir&quot;</span><br><span class="line">202) &quot;/usr/local/redis/bin&quot;</span><br><span class="line">203) &quot;save&quot;</span><br><span class="line">204) &quot;3600 1 300 100 60 10000&quot;</span><br><span class="line">205) &quot;client-output-buffer-limit&quot;</span><br><span class="line">206) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class="line">207) &quot;unixsocketperm&quot;</span><br><span class="line">208) &quot;0&quot;</span><br><span class="line">209) &quot;slaveof&quot;</span><br><span class="line">210) &quot;&quot;</span><br><span class="line">211) &quot;notify-keyspace-events&quot;</span><br><span class="line">212) &quot;&quot;</span><br><span class="line">213) &quot;bind&quot;</span><br><span class="line">214) &quot;&quot;</span><br></pre></td></tr></table></figure><ul><li>修改配置项</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET 配置项名 属性</span><br></pre></td></tr></table></figure><p>当然有些配置需要在配置文件中修改才会生效，保存</p><h4 id="9-2、配置文件详解"><a href="#9-2、配置文件详解" class="headerlink" title="9.2、配置文件详解"></a>9.2、配置文件详解</h4><p>文件来自：<a href="https://www.cnblogs.com/zhang-ke/p/5981108.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhang-ke/p/5981108.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">redis.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis configuration file example.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# INCLUDES ###################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> include /path/to/local.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### GENERAL #####################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否在后台执行，yes：后台运行；no：不是后台运行（老版本默认）</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">3.2里的参数，是否开启保护模式，默认开启。要是配置里没有指定<span class="built_in">bind</span>和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。要是开启了密码   和<span class="built_in">bind</span>，可以开启。否   则最好关闭，设置为no。</span></span><br><span class="line">  protected-mode yes</span><br><span class="line"><span class="meta">#</span><span class="bash">redis的进程文件</span></span><br><span class="line">pidfile /var/run/redis/redis-server.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">redis监听的端口号。</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket来让redis支持监听本地连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocket /var/run/redis/redis.sock</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket使用文件的权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 700</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。</span></span><br><span class="line">logfile /var/log/redis/redis-server.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否打开记录syslog功能</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">syslog的标识符。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">日志的来源、设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### SNAPSHOTTING ################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 快照配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置sedis进行数据库镜像的频率。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################ REPLICATION #################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">复制选项，slave复制对应的master。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master <span class="keyword">in</span> progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-size 5mb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-to-write 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置1或另一个设置为0禁用这个特性。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default min-slaves-to-write is <span class="built_in">set</span> to 0 (feature disabled) and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag is <span class="built_in">set</span> to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# SECURITY ###################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置成一个空的值，可以禁止一个命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################## LIMITS ####################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">内存容量超过maxmemory后的处理策略。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：<span class="built_in">set</span> setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx <span class="built_in">exec</span> sort。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名</span></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个<span class="built_in">log</span>给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### LUA SCRIPTING ###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果达到最大时间限制（毫秒），redis会记个<span class="built_in">log</span>，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### REDIS CLUSTER ###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">集群开关，默认是不开启集群模式。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">节点互连超时的阀值。集群节点超时毫秒数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-slave-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# SLOW LOG ###################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### LATENCY MONITOR ##############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################ EVENT NOTIFICATION ##############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#K 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#E 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#$ 字符串命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#l 列表命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#s 集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#h 哈希命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#z 有序集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#x 过期事件：每当有过期键被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#A 参数 g$lshzxe 的别名</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</span></span><br><span class="line"></span><br><span class="line">notify-keyspace-events ""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于<span class="built_in">hash</span>-max-ziplist-entries的用ziplist，大于<span class="built_in">hash</span>-max-ziplist-entries用<span class="built_in">hash</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于<span class="built_in">hash</span>-max-ziplist-value的用ziplist，大于<span class="built_in">hash</span>-max-ziplist-value用<span class="built_in">hash</span>。</span></span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。</span></span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于<span class="built_in">set</span>-max-intset-entries用iniset，大于<span class="built_in">set</span>-max-intset-entries用<span class="built_in">set</span>。</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。</span></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的<span class="built_in">hash</span>表进行重新<span class="built_in">hash</span>，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于normal client，第一个0表示取消hard <span class="built_in">limit</span>，第二个0和第三个0表示取消soft <span class="built_in">limit</span>，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"><span class="meta">#</span><span class="bash">对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"><span class="meta">#</span><span class="bash">对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">redis执行任务的频率为1s除以hz。</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><p>tcp-keepalive：如果设置为0，则不会进行keepalive检查，建议设置为60，单位为秒。</p><p>loglevel：指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</p><h3 id="10、Redis的持久化"><a href="#10、Redis的持久化" class="headerlink" title="10、Redis的持久化"></a>10、Redis的持久化</h3><ul><li>RDB(Redis DataBase)</li></ul><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，（Snapshot快照），它恢复时将快照文件直接读入到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化进程都结束了，再用这个临时文件替代上次持久化的文件。整个过程中，主进程是不进行任何IO操作的，这就保证了极高的性能。如需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，南无RDB方式要比AOF方式更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>Fork的作用时复制一个与当前一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）数值都和原来进程一致，但是是一个全新的进程，并作为原进程的子进程。</p><p>RDB保存的是dump.rdb文件</p><p>SNAPSHOTTING快照：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### SNAPSHOTTING ################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 快照配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置sedis进行数据库镜像的频率。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /var/lib/redis</span><br></pre></td></tr></table></figure><p>SHUTDOWN：关闭连接，redis迅速生成dump.rdb，一般需要备份好dump.rdb文件。cp dump.rdb dump_new.rdb(一般在不同机器)</p><p>save/bgsave：迅速备份，save只管保存，其他不管，全部阻塞。bgsave在后台异步进行快照操作，快照同时还可以响应客服请求，可以通过lastsave命令获取最后一次成功执行快照的时间。</p><p>flushall：也会产生dump.rdb，但是为空，所以说。。。</p><ul><li>AOF(Append Only File)</li></ul><p>以日志文件来记录每一个操作，将Redis执行过得所有写的指令记下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，也就是：redis重启的话就根据日志文件内容将写指令从前到后执行一次以完成数据的恢复工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。no不表示不使用，改为yes打开aof持久化</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名</span></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个<span class="built_in">log</span>给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span></span><br><span class="line">aof-load-truncated yes</span><br></pre></td></tr></table></figure><p>appendonly.aof与dump.rdb可以同时存在，优先选择appendonly.aof</p><p>修复：当写入突然断网，大量数据，appendonly.aof出现错误，redis无法启动，可以使用redis-check-aof检查appendonly.aof，会去掉不符合语法部分。再次重新启动。</p><p>Rewrite：AOF采用文件追加方式，文件会越来越大，于是新增了重写机制，当AOF文件的大小超过所设置的阈值时，Redis就会自动启动AOF文件的内容压缩，只保留可以恢复数据的最小指令，可以使用bgrewriteaof。</p><p>重写原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后在rename），遍历新进程的内存中的数据，每条记录有一条set语句，重写aof文件操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容命令的方式重写了一个新的aof文件，与快照类似。</p><p>触发机制：Redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大于64M时触发。</p><h3 id="11、Redis的事务"><a href="#11、Redis的事务" class="headerlink" title="11、Redis的事务"></a>11、Redis的事务</h3><h4 id="11-1、事务介绍"><a href="#11-1、事务介绍" class="headerlink" title="11.1、事务介绍"></a>11.1、事务介绍</h4><p>Redis中的事务(transaction)是一组命令的集合。事务同命令一样都是Redis最小的执行单位，一个事务中的命令要么都执行，要么都不执行。</p><p>一个队列中，一次性执行，按照顺序，有顺序，排他性的执行一系列命令。</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>MULTI</td><td>标记事务开始</td></tr><tr><td>2</td><td>EXEC</td><td>执行所有事务块内的命令</td></tr><tr><td>3</td><td>DISCARD</td><td>取消事务，放弃执行事务块内的所有命令</td></tr><tr><td>4</td><td>UNWATCH</td><td>取消 WATCH 命令对所有 key 的监视</td></tr><tr><td>5</td><td>WATCH key [key …]</td><td>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</td></tr></tbody></table></div><h4 id="11-2、Redis事务错误处理"><a href="#11-2、Redis事务错误处理" class="headerlink" title="11.2、Redis事务错误处理"></a>11.2、Redis事务错误处理</h4><ul><li>语法错误</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; sett k5 v5</span><br><span class="line">(error) ERR unknown command `sett`, with args beginning with: `k5`, `v5`, </span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "k2"</span><br><span class="line">2) "k1"</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>错误的命令导致事务中的其他命令都不执行了，可见事务中的所有命令式同呼吸共命运的。如果客户端在发送EXEC命令之前断线了，则服务器会清空事务队列，事务中的所有命令都不会被执行。而一旦客户端发送了EXEC命令之后，事务中的所有命令都会被执行，即使此后客户端断线也没关系，因为服务器已经保存了事务中的所有命令。</p><ul><li>运行错误</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "k4"</span><br><span class="line">2) "k2"</span><br><span class="line">3) "k3"</span><br><span class="line">4) "k1"</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">"v3"</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">"v4"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>运行错误在命令执行之前Redis是无法发现的，所以在事务里这样的命令会被Redis接受并执行。如果事务里有一条命令执行错误，其他命令依旧会执行（包括出错之后的命令）。</p><p>悲观锁</p><p>乐观锁</p><p>一旦执行了EXEC，之前加的监控锁都会被取消。</p><h3 id="12、Redis的发布与订阅"><a href="#12、Redis的发布与订阅" class="headerlink" title="12、Redis的发布与订阅"></a>12、Redis的发布与订阅</h3><p>进程间的一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。消息中间件一般不使用redis，了解了解。</p><p>常用命令：</p><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SUBSCRIBE channel [channel …]</td><td>订阅给定的一个或多个频道的信息</td></tr><tr><td>2</td><td>PSUBSCRIBE pattern [pattern …]</td><td>订阅一个或多个符合给定模式的频道</td></tr><tr><td>3</td><td>PUBSUB subcommand [argument [argument …]</td><td>查看订阅与发布系统状态</td></tr><tr><td>4</td><td>PUBLISH channel message</td><td>将信息发送到指定的频道</td></tr><tr><td>5</td><td>PUNSUBSCRIBE [pattern [pattern …]</td><td>退订所有给定模式的频道</td></tr><tr><td>6</td><td>UNSUBSCRIBE [channel [channel …]</td><td>指退订给定的频道</td></tr></tbody></table></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE new*  #可以使用通配符，类似正则表达式</span><br></pre></td></tr></table></figure><h3 id="13、Redis的复制"><a href="#13、Redis的复制" class="headerlink" title="13、Redis的复制"></a>13、Redis的复制</h3><p>主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slaver以读为主。</p><h4 id="13-1、配置"><a href="#13-1、配置" class="headerlink" title="13.1、配置"></a>13.1、配置</h4><ul><li>配从（库）不配主（库）</li></ul><h3 id="14、客户端"><a href="#14、客户端" class="headerlink" title="14、客户端"></a>14、客户端</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis：Remote Dictionary Server(远程字典服务器)，作为基于键值对的NoSQL数据库，具有高性能、丰富的数据结构、持久化、高可用、分布式等特性，同时Redis非常稳定。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://tcrushes.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://tcrushes.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://tcrushes.github.io/2019/07/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://tcrushes.github.io/2019/07/10/Git常用命令.html</id>
    <published>2019-07-10T07:37:51.000Z</published>
    <updated>2020-02-08T05:41:41.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/git.jpg" alt></p><a id="more"></a><h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="获取Git库"><a href="#获取Git库" class="headerlink" title="获取Git库"></a>获取Git库</h2><p>你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git add file</span><br><span class="line"><span class="meta">$</span> git commit -m 'first commit'</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> https://github.com/Tcrusher/python-algorithms</span><br></pre></td></tr></table></figure><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol><li>git branch 创建分支</li><li>git branch -b 创建并切换到新建的分支上</li><li>git checkout 切换分支</li><li>git branch 查看分支列表</li><li>git branch -v 查看所有分支的最后一次操作</li><li>git branch -vv 查看当前分支</li><li>git brabch -b 分支名 origin/分支名 创建远程分支到本地</li><li>git branch —merged 查看别的分支和当前分支合并过的分支</li><li>git branch —no-merged 查看未与当前分支合并的分支</li><li>git branch -d 分支名 删除本地分支</li><li>git branch -D 分支名 强行删除分支</li><li>git branch origin :分支名 删除远处仓库分支</li><li>git merge 分支名 合并分支到当前分支上</li></ol><h2 id="暂存操作"><a href="#暂存操作" class="headerlink" title="暂存操作"></a>暂存操作</h2><ol><li>git stash 暂存当前修改</li><li>git stash apply 恢复最近的一次暂存</li><li>git stash pop 恢复暂存并删除暂存记录</li><li>git stash list 查看暂存列表</li><li>git stash drop 暂存名(例：stash@{0}) 移除某次暂存</li><li>git stash clear 清除暂存</li></ol><h2 id="回退操作"><a href="#回退操作" class="headerlink" title="回退操作"></a>回退操作</h2><ol><li>git reset —hard HEAD^ 回退到上一个版本</li><li>git reset —hard ahdhs1(commit_id) 回退到某个版本</li><li>git checkout — file撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</li><li>git reset HEAD file 撤回暂存区的文件修改到工作区</li></ol><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><ol><li>git tag 标签名 添加标签(默认对当前版本)</li><li>git tag 标签名 commit_id 对某一提交记录打标签</li><li>git tag -a 标签名 -m ‘描述’ 创建新标签并增加备注</li><li>git tag 列出所有标签列表</li><li>git show 标签名 查看标签信息</li><li>git tag -d 标签名 删除本地标签</li><li>git push origin 标签名 推送标签到远程仓库</li><li>git push origin —tags 推送所有标签到远程仓库</li><li>git push origin :refs/tags/标签名 从远程仓库中删除标签</li></ol><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><ol><li>git push origin test 推送本地分支到远程仓库</li><li>git rm -r —cached 文件/文件夹名字 取消文件被版本控制</li><li>git reflog 获取执行过的命令</li><li>git log —graph 查看分支合并图</li><li>git merge —no-ff -m ‘合并描述’ 分支名 不使用Fast forward方式合并，采用这种方式合并可以看到合并记录</li><li>git check-ignore -v 文件名 查看忽略规则</li><li>git add -f 文件名 强制将文件提交</li></ol><h2 id="git创建项目仓库"><a href="#git创建项目仓库" class="headerlink" title="git创建项目仓库"></a>git创建项目仓库</h2><ol><li>git init 初始化</li><li>git remote add origin url 关联远程仓库</li><li>git pull</li><li>git fetch 获取远程仓库中所有的分支到本地</li></ol><h2 id="忽略已加入到版本库中的文件"><a href="#忽略已加入到版本库中的文件" class="headerlink" title="忽略已加入到版本库中的文件"></a>忽略已加入到版本库中的文件</h2><ol><li>git update-index —assume-unchanged file 忽略单个文件</li><li>git rm -r —cached 文件/文件夹名字 (. 忽略全部文件)</li></ol><h2 id="取消忽略文件"><a href="#取消忽略文件" class="headerlink" title="取消忽略文件"></a>取消忽略文件</h2><ol><li>git update-index —no-assume-unchanged file</li></ol><h2 id="拉取、上传免密码"><a href="#拉取、上传免密码" class="headerlink" title="拉取、上传免密码"></a>拉取、上传免密码</h2><ol><li>git config —global credential.helper store</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/git.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://tcrushes.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://tcrushes.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://tcrushes.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="https://tcrushes.github.io/2019/05/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://tcrushes.github.io/2019/05/06/我的第一篇博客.html</id>
    <published>2019-05-06T12:13:14.000Z</published>
    <updated>2019-12-04T01:02:22.214Z</updated>
    
    <content type="html"><![CDATA[<p class="description">这是摘要，描述，下面是image图片显示</p><p><img src="/uploads/a1.jpg" alt></p><a id="more"></a><p>这是<code>&lt;!--more--&gt;</code>后面的内容</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1、部署环境"><a href="#1-1、部署环境" class="headerlink" title="1.1、部署环境"></a>1.1、部署环境</h3><p>1、下载git、node.js，安装git、node.js<br>2、安装hexo，初始化、启动、浏览器访问测试</p><h3 id="1-2、基本命令"><a href="#1-2、基本命令" class="headerlink" title="1.2、基本命令"></a>1.2、基本命令</h3><p>1、npm install、hexo init、hexo server</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-1、创建博客"><a href="#2-1、创建博客" class="headerlink" title="2.1、创建博客"></a>2.1、创建博客</h3><p>1、<br>2、</p><hr><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>内容</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><ul><li><p>title: 标题</p></li><li><p>tags: 标签</p></li></ul><blockquote><p>tags: [‘Programming Assignment’,’Hello world’]</p></blockquote><ul><li><p>copyright: 是否显示版权信息</p></li><li><p>date: 创建博客时间</p></li></ul><blockquote><p>date: 2019-05-06 20:13:14</p></blockquote><ul><li>categories: 归档分类</li></ul><blockquote><p>categories:</p><p>​    - hello world</p><p>​    - categories</p></blockquote><ul><li><p>description: 摘要</p></li><li><p>image: 图片</p></li></ul><blockquote><p>!+[]+(图片地址)</p></blockquote><p>mathjax: 数学公式</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;这是摘要，描述，下面是image图片显示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/a1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hello world" scheme="https://tcrushes.github.io/categories/hello-world/"/>
    
    
      <category term="Programming Assignment" scheme="https://tcrushes.github.io/tags/Programming-Assignment/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tcrushes.github.io/2019/05/06/hello-world.html"/>
    <id>https://tcrushes.github.io/2019/05/06/hello-world.html</id>
    <published>2019-05-06T05:14:20.000Z</published>
    <updated>2019-11-06T07:54:13.857Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href>Hexo</a>! This is your very first post. Check <a href>documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href>troubleshooting</a> or you can ask me on <a href="https://github.com" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="hello world" scheme="https://tcrushes.github.io/categories/hello-world/"/>
    
    
      <category term="coursera" scheme="https://tcrushes.github.io/tags/coursera/"/>
    
      <category term="Algorithms" scheme="https://tcrushes.github.io/tags/Algorithms/"/>
    
      <category term="Programming Assignment" scheme="https://tcrushes.github.io/tags/Programming-Assignment/"/>
    
  </entry>
  
</feed>
